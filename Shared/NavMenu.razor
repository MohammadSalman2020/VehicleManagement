@using VehicleManagement.Authentication
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<AuthorizeView>
    <Authorized>
        <div class="topnav" id="myTopnav">
            @* <a href="/">@context.User.Identity.Name.ToUpper()</a> *@
            <a href="/" class="@GetActiveClass("Home")" @onclick=@(()=>OnClick("Home"))>Home</a>
            <div class="dropdown">
                <button class="dropbtn">
                    Manage 
                    <i class="fa fa-caret-down"></i>
                </button>
                <div class="dropdown-content">
                    <a href="/fleet" class="@GetActiveClass("Fleet")" @onclick=@(()=>OnClick("Fleet"))>Fleet</a>
                    <a href="/avail">Availability</a>
                    <a href="/map">Satellite View</a>
                    <a href="/driver">Drivers</a>
                    <a href="/vehicles">Vehicles</a>
                </div>
            </div>
            <div class="dropdown">
                <button class="dropbtn">
                    Reports
                    <i class="fa fa-caret-down"></i>
                </button>
                <div class="dropdown-content">
                    <a href="/fleetstatus">Fleet Status</a>
                </div>
            </div>
            <div class="dropdown">
                <button class="dropbtn">
                    Invoice
                    <i class="fa fa-caret-down"></i>
                </button>
                <div class="dropdown-content">
                    <a href="/addinvoice">Invoice List</a>
                    <a href="/invoicepanel">Add Invoice</a>
                    @* <a href="#">Link 3</a> *@
                </div>
            </div>
          @*   <a href="/addinvoice" class="@GetActiveClass("Invoice")" @onclick=@(()=>OnClick("Invoice"))>Invoice</a> *@
            <div class="dropdown">
                <button class="dropbtn">
                    Inspection
                    <i class="fa fa-caret-down"></i>
                </button>
                <div class="dropdown-content">
                    <a href="/checklists">New Inspections</a>
                    <a href="/create_template">Create Template</a>
                    
                </div>
            </div>
            <div class="dropdown">
                <button class="dropbtn">
                    Admin
                    <i class="fa fa-caret-down"></i>
                </button>
                <div class="dropdown-content">
                    <a href="/usermanagement">User Management</a>
                </div>
            </div>
            <div class="dropdown" style="float:right;">
                <button class="dropbtn">
                    @context.User.Identity.Name.ToUpper()
                    <i class="fa fa-caret-down"></i>
                </button>
                <div class="dropdown-content">
                    <a href="/" @onclick="Logout" >Logout</a>
                </div>
            </div>
            @* <a href="/" @onclick="Logout" style="float:right;">Logout</a> *@
            <a href="javascript:void(0);" style="font-size:15px;" class="icon" onclick="toggleMenu()">&#9776;</a>
        </div>
    </Authorized>
</AuthorizeView>

<script>
    function toggleMenu() {
        var nav = document.getElementById("myTopnav");
        if (nav.className === "topnav") {
            nav.className += " responsive";
        } else {
            nav.className = "topnav";
        }
    }
</script>

@code {
    private Dictionary<string, bool> linkStates = new Dictionary<string, bool>
    {
        { "Home", false },
        { "Fleet", false },
        { "Invoice", false },
        { "About", false }
    };
    private async Task ReloadPage()
    {
        await JSRuntime.InvokeVoidAsync("location.reload", true);
    }
    private string GetActiveClass(string link)
    {
        return linkStates[link] ? "active" : "";
    }

    private void OnClick(string link)
    {
        foreach (var key in linkStates.Keys.ToList())
        {
            linkStates[key] = (key == link);
        }
        if (link == "Fleet")
        {
            JSRuntime.InvokeVoidAsync("location.reload", true);
        }
       
    }

    // private bool IsLogin { get; set; }
    // [CascadingParameter]
    // private Task<AuthenticationState> Authentication { get; set; }
    // private ElementReference sidenavCollapseMain;

    // private string ShowNav { get; set; } = "";
    protected  async Task Logout()
    {
        var CustomAuth = (CustomAuthenticationStateProvider)AuthStateProvider;
        await CustomAuth.UpdateAuthenticationState(null);
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "BearerToken");

        Nav.NavigateTo("/",true);

    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // Use JSInterop to initialize the toggleNavigation JavaScript function
    //         await JSRuntime.InvokeVoidAsync("initializeToggleNavigation");
    //     }
    // }


}
