@page "/inspections"
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General.Inspection
@inject IApiService API
@inject NavigationManager NavigationManager
@using System.Text.Json;
@inject NavigationManager navmanager
@inject IUserClaimsService UserClaimsService
<h3>Inspections List</h3>
<div class="card">

    <div class="card-body">
        <div class="row mb-12">
            <div class="col-3">
                <input @oninput="HandleKeyPress" class="form-control" placeholder="Search" />
            </div>
            <div class="col-3">
                <select @bind="sortBy" class="form-select">

                    <option value="Date_Time">Date/Time</option>
                    <option value="VehicleID">Vehicle ID</option>
                    <option value="VehicleID">Origian</option>
                    <option value="VehicleID">Destination</option>

                </select>
            </div>
            <div class="col-3">
                <button @onclick="ToggleSortDirection" class="btn btn-secondary">@sortDirectionText</button>
            </div>
            <div class="col-3">
                <button @onclick="ApplyFilter" class="btn btn-primary">Apply Filter</button>
            </div>
        </div>


        <div class="row">

            <div class="col-md-12">
                <div class="card-body px-0 pt-0 pb-2" style="overflow-x: auto;height: 500px;">
                    <div class="table-responsive p-0">
                        <table class="align-items-center mb-0 table">
                            <thead>
                                <tr>
                                    <th class="text-center text-uppercase text-xxs font-weight-bolder opacity-7">Inspection ID</th>
                                    <th class="text-center text-uppercase text-xxs font-weight-bolder opacity-7">Vehicle ID</th>
                                    <th class="text-center text-uppercase text-xxs font-weight-bolder opacity-7">Date/Time</th>
                                    <th class="text-center text-uppercase text-xxs font-weight-bolder opacity-7">Origin</th>
                                    <th class="text-center text-uppercase text-xxs font-weight-bolder opacity-7">Destination</th>
                                    <th class="text-center text-uppercase text-xxs font-weight-bolder opacity-7">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var inspection in inspections)
                                {
                                    <tr>

                                        <td class="align-middle text-center">
                                            <p class="text-secondary text-xs font-weight-bold">@inspection.inspID</p>
                                        </td>
                                        <td class="align-middle text-center">
                                            <p class="text-secondary text-xs font-weight-bold">@inspection.vehicleID</p>
                                        </td>
                                        <td class="align-middle text-center">
                                            <span class="text-secondary text-xs font-weight-bold">@inspection.date_Time</span>
                                        </td>
                                        <td class="align-middle text-center">
                                            <span class="text-secondary text-xs font-weight-bold">@inspection.origian</span>
                                        </td>
                                        <td class="align-middle text-center">
                                            <span class="text-secondary text-xs font-weight-bold">@inspection.destination</span>
                                        </td>
                                        <td class="align-middle text-center" style="cursor:pointer">
                                            <a class="text-secondary text-xs font-weight-bold" @onclick="@(() => ViewCheckList(inspection.inspID))">
                                                View
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    @if (inspections.Count == 0)
                    {
                        <div>No data available.</div>
                    }

                    <!-- Pagination Controls -->

                    <div class="d-flex justify-content-center my-2">
                        @if (currentPage > 1)
                        {
                            <button @onclick="PreviousPage" class="btn btn-info mx-1">Previous</button>
                        }
                        else
                        {

                            <button @onclick="PreviousPage" disabled="true" class="btn btn-info mx-1">Previous</button>

                        }
                        <div>@currentPage</div>

                        @if (inspections.Count > 9)
                        {
                            <button @onclick="NextPage" class="btn btn-info mx-1">Next</button>
                        }
                        else
                        {
                            <button @onclick="NextPage" disabled="true" class="btn btn-info mx-1">Next</button>

                        }



                    </div>
                </div>

            </div>
        </div>
    </div>
</div>




@code {
    private List<tblInspection> inspections = new List<tblInspection>();
    private string vehicleIdFilter = "";
    private string sortBy = "Date_Time";
    private bool sortDescending = false;
    private int currentPage = 1;
    private int selectedInpection;
    private int pageSize = 10;
    List<int> BusinessID = new List<int>();
    private string sortDirectionText => sortDescending ? "Descending" : "Ascending";

    protected override async Task OnInitializedAsync()
    {

        BusinessID = await UserClaimsService.GetBusinessIdsAsync();
        await LoadInspections();
    }
    private async void HandleKeyPress(ChangeEventArgs e)
    {
        vehicleIdFilter = e.Value.ToString();
        LoadInspections();
    }
    void ViewCheckList(int id)
    {
        selectedInpection = id;
        navmanager.NavigateTo($"/chkPreview?inspID={selectedInpection}");

    }
    private async Task LoadInspections()
    {
        inspections = new List<tblInspection>();
        string endpoint = "Inspection/GetInspections";
        string parameters = $"?sortBy={sortBy}&descending={sortDescending}&page={currentPage}&pageSize={pageSize}";

        if (!string.IsNullOrWhiteSpace(vehicleIdFilter))
        {
            parameters += $"&vehicleId={vehicleIdFilter}";
        }

        // List of business IDs to filter by

        if (BusinessID.Any())
        {
            parameters += string.Join("", BusinessID.Select(id => $"&businessIds={id}"));
        }

        string fullUrl = endpoint + parameters;

        var response = await API.GetRequest(fullUrl);
        if (!string.IsNullOrEmpty(response))
        {
            try
            {
                inspections = JsonSerializer.Deserialize<List<tblInspection>>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                StateHasChanged();
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"JSON Error: {ex.Message}");
                // Handle error
            }
        }
        else
        {
            Console.WriteLine("API response is null or empty.");
            // Handle empty response
        }
    }




    private async void ApplyFilter()
    {
        currentPage = 1;
        LoadInspections();
    }

    private async void ToggleSortDirection()
    {
        sortDescending = !sortDescending;
        LoadInspections();
    }

    private async void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadInspections();
        }
    }

    private async void NextPage()
    {
        currentPage++; // You might want to check the total available pages here if your API supports it.
        LoadInspections();
    }
}



