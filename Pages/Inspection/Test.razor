@page "/inspections"
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General.Inspection
@inject IApiService API
@inject NavigationManager NavigationManager
@using System.Text.Json;
@inject NavigationManager navmanager
@inject IUserClaimsService UserClaimsService
<h3>Inspections List</h3>

<style>
    .table-sortable {
        border-collapse: collapse;
    }

        .table-sortable th {
            cursor: pointer;
            padding: 15px;
            border: 1px solid white;
            color: white;
        }

        .table-sortable td {
            border: 1px solid #5e72e4;
        }

        .table-sortable .th-sort-asc::after {
            content: "\25b4";
        }

        .table-sortable .th-sort-desc::after {
            content: "\25be";
        }

        .table-sortable .th-sort-asc::after,
        .table-sortable .th-sort-desc::after {
            margin-left: 5px;
        }

        .table-sortable .th-sort-asc,
        .table-sortable .th-sort-desc {
            background: rgba(0, 0, 0, 0.1);
        }

</style>
<div class="card">

    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <input @oninput="HandleKeyPress" class="form-control" placeholder="Search" />
            </div>
            <br />
            <br />
            <br />
            @*  <div class="col-md-3">
            <select @bind="sortBy" class="form-select">

            <option value="Date_Time">Date/Time</option>
            <option value="VehicleID">Vehicle ID</option>
            <option value="VehicleID">Origian</option>
            <option value="VehicleID">Destination</option>

            </select>
            </div> *@
            @*    <div class="col-md-3">
            <button @onclick="ToggleSortDirection" class="btn btn-secondary">@sortDirectionText</button>
            </div> *@
            @*   <div class="col-md-3">
            <button @onclick="ApplyFilter" class="btn btn-primary">Apply Filter</button>
            </div> *@
        </div>


        <div class="row">

            <div class="col-md-12">
                <div class="card-body px-0 pt-0 pb-2" style="overflow-x: auto;">

                    <table border="0" class="table-responsive table-sortable" width="100%">
                        <thead style="background-color:#5e72e4;color:white">
                            <tr style="text-align:center">
                                <th class="text-center text-uppercase text-xxs font-weight-bolder ">Inspection ID</th>
                                <th class="text-center text-uppercase text-xxs font-weight-bolder ">Vehicle ID</th>
                                <th class="text-center text-uppercase text-xxs font-weight-bolder">Date/Time</th>
                                <th class="text-center text-uppercase text-xxs font-weight-bolder ">Origin</th>
                                <th class="text-center text-uppercase text-xxs font-weight-bolder ">Destination</th>
                                <th class="text-center text-uppercase text-xxs font-weight-bolder ">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var inspection in inspections)
                            {
                                <tr>
                                    @*   <td style="text-align:center">
                                <span>@inspection.inspID</span>
                                </td>
                                <td style="text-align:center">
                                <span>@inspection.vehicleID</span>
                                </td>
                                <td style="text-align:center">
                                <span>@inspection.date_Time</span>
                                </td>
                                <td style="text-align:center">
                                <span>@inspection.origian</span>
                                </td>
                                <td style="text-align:center">
                                <span>@inspection.destination</span>
                                </td>
                                <td style="text-align:center">
                                <span>
                                <a class="text-secondary text-xs font-weight-bold" @onclick="@(() => ViewCheckList(inspection.inspID))">
                                View
                                </a>
                                </span>
                                </td> *@
                                    <td class="align-middle text-center">
                                        <span class="text-secondary text-xs font-weight-bold">@inspection.inspID</span>
                                    </td>
                                    <td class="align-middle text-center">
                                        <span class="text-secondary text-xs font-weight-bold">@inspection.vehicleID</span>
                                    </td>
                                    <td class="align-middle text-center">
                                        <span class="text-secondary text-xs font-weight-bold">@inspection.date_Time</span>
                                    </td>
                                    <td class="align-middle text-center">
                                        <span class="text-secondary text-xs font-weight-bold">@inspection.origian</span>
                                    </td>
                                    <td class="align-middle text-center">
                                        <span class="text-secondary text-xs font-weight-bold">@inspection.destination</span>
                                    </td>
                                    <td class="align-middle text-center" style="cursor:pointer">
                                        <a class="text-secondary text-xs font-weight-bold" @onclick="@(() => ViewCheckList(inspection.inspID))">
                                            View
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    @if (inspections.Count == 0)
                    {
                        <div>No data available.</div>
                    }

                    <!-- Pagination Controls -->


                </div>

                <div class="d-flex justify-content-center my-2">
                    @if (currentPage > 1)
                    {
                        <button @onclick="PreviousPage" style="background-color:#3f55d1;color:white" class="btn btn-success">@("<< ")Previous</button>
                    }
                    else
                    {

                        <button @onclick="PreviousPage" disabled="true" style="background-color:#3f55d1;color:white" class="btn btn-success"> @("<< ")Previous</button>

                    }
                    <span>@currentPage</span>

                    @if (inspections.Count > 9)
                    {
                        <button @onclick="NextPage" style="background-color:#3f55d1;color:white" class="btn btn-success">Next >></button>
                    }
                    else
                    {
                        <button @onclick="NextPage" style="background-color:#3f55d1;color:white" disabled="true" class="btn btn-success">Next >></button>

                    }



                </div>

            </div>
        </div>
    </div>
</div>
<script>
    function sortTableByColumn(table, column, asc = true) {
        const dirModifier = asc ? 1 : -1;
        const tBody = table.tBodies[0];
        const rows = Array.from(tBody.querySelectorAll("tr"));

        // Sort each row
        const sortedRows = rows.sort((a, b) => {
            const aColText = a.querySelector(`td:nth-child(${column + 1})`).textContent.trim();
            const bColText = b.querySelector(`td:nth-child(${column + 1})`).textContent.trim();

            return aColText > bColText ? (1 * dirModifier) : (-1 * dirModifier);
        });

        // Remove all existing TRs from the table
        while (tBody.firstChild) {
            tBody.removeChild(tBody.firstChild);
        }

        // Re-add the newly sorted rows
        tBody.append(...sortedRows);

        // Remember how the column is currently sorted
        table.querySelectorAll("th").forEach(th => th.classList.remove("th-sort-asc", "th-sort-desc"));
        table.querySelector(`th:nth-child(${column + 1})`).classList.toggle("th-sort-asc", asc);
        table.querySelector(`th:nth-child(${column + 1})`).classList.toggle("th-sort-desc", !asc);
    }

    document.querySelectorAll(".table-sortable th").forEach(headerCell => {
        headerCell.addEventListener("click", () => {
            const tableElement = headerCell.parentElement.parentElement.parentElement;
            const headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
            const currentIsAscending = headerCell.classList.contains("th-sort-asc");

            sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
        });
    });
</script>



@code {
    private List<tblInspection> inspections = new List<tblInspection>();
    private string vehicleIdFilter = "";
    private string sortBy = "Date_Time";
    private bool sortDescending = false;
    private int currentPage = 1;
    private int selectedInpection;
    private int pageSize = 10;
    List<int> BusinessID = new List<int>();
    private string sortDirectionText => sortDescending ? "Descending" : "Ascending";

    protected override async Task OnInitializedAsync()
    {

        BusinessID = await UserClaimsService.GetBusinessIdsAsync();
        await LoadInspections();
    }
    private async void HandleKeyPress(ChangeEventArgs e)
    {
        vehicleIdFilter = e.Value.ToString();
        LoadInspections();
    }
    void ViewCheckList(int id)
    {
        selectedInpection = id;
        navmanager.NavigateTo($"/chkPreview?inspID={selectedInpection}");

    }
    private async Task LoadInspections()
    {
        inspections = new List<tblInspection>();
        string endpoint = "Inspection/GetInspections";
        string parameters = $"?sortBy={sortBy}&descending={sortDescending}&page={currentPage}&pageSize={pageSize}";

        if (!string.IsNullOrWhiteSpace(vehicleIdFilter))
        {
            parameters += $"&vehicleId={vehicleIdFilter}";
        }

        // List of business IDs to filter by

        if (BusinessID.Any())
        {
            parameters += string.Join("", BusinessID.Select(id => $"&businessIds={id}"));
        }

        string fullUrl = endpoint + parameters;

        var response = await API.GetRequest(fullUrl);
        if (!string.IsNullOrEmpty(response))
        {
            try
            {
                inspections = JsonSerializer.Deserialize<List<tblInspection>>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                StateHasChanged();
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"JSON Error: {ex.Message}");
                // Handle error
            }
        }
        else
        {
            Console.WriteLine("API response is null or empty.");
            // Handle empty response
        }
    }




    private async void ApplyFilter()
    {
        currentPage = 1;
        LoadInspections();
    }

    private async void ToggleSortDirection()
    {
        sortDescending = !sortDescending;
        LoadInspections();
    }

    private async void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadInspections();
        }
    }

    private async void NextPage()
    {
        currentPage++; // You might want to check the total available pages here if your API supports it.
        LoadInspections();
    }
}



