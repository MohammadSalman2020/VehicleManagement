@page "/Chk_Details"

@using Microsoft.AspNetCore.WebUtilities;
@using System.Text.Json;
@using VehicleManagement.Models.General
@inject IToastService toastService
@inject IJSRuntime JSRuntime
@inject NavigationManager navmanager
@inject IJSRuntime jsRuntime
@using VehicleManagement.Models.DB
@using VehicleManagement.ApiService;
@inject IApiService API
@using VehicleManagement.Models.General.Inspection;
@inject ApplicationDbContext DbContext

<div class="container-fluid py-4">
    <div class="row">
        @if (start)
        {
            <div class="col-3">
                <button @onclick="ShowBack" class="btn btn-primary btn-sm">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <button @onclick="ShowNext" class="btn btn-primary btn-sm text-end">
                    <i class="fas fa-chevron-right"></i>
                </button>

            </div>
            <div class="col-6 ">
            </div>

            <div class="col-3">

                <button @onclick="submit" class="btn btn-primary btn-sm text-end">Submit</button>


            </div>
        }
        else
        {


            <div class="col-12" >
           
                <button @onclick="StartChecklist" class="btn btn-primary">
                    <i class="fas fa-step-backward"></i> Start
                </button>

           
            </div>
        }
        <div class="col-12">
            <div class="card mb-12">
                <div class="card-header pb-0" id="contentToPrint">

                    <div class="form-group">
                        <h4 style="text-align:center">Check List(@vehicle)</h4>
                        <h6 style="text-align:left">if found correct mark(YES) if found Faulty mark (NO) if irrelevant Mark (N/A)</h6>
                    </div>
                    <div class="container">
                        <div class="row">
                            <div class="col-md-12">
                                @if (checklist.Count > 0 && currentindex > -1 && currentindex < checklist.Count)
                                {
                                    try
                                    {

                                        <div class="form-group">
                                            <label for="textBoxId">@currentObject.obsDesc</label>
                                        </div>
                                        <div class="form-group">
                                            <label for="textBoxId">@($"{currentObject.scopeDesc}" + " " + (srno)+"/"+(checklist.Count))</label>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" @onclick="@(e => HandleCheckboxClicked("Yes"))" id="yes" @bind=@currentObject.yes />
                                                    <label class="form-check-label" for="yes">
                                                        YES
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" @onclick="@(e => HandleCheckboxClicked("No"))" id="no" @bind=@currentObject.no />
                                                    <label class="form-check-label" for="no">
                                                        NO
                                                    </label>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" @onclick="@(e => HandleCheckboxClicked("NA"))" id="na" @bind=@currentObject.na />
                                                    <label class="form-check-label" for="na">
                                                        N/A
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label for="textBoxId">Attach Evidance</label>
                                            <InputFile @ref="fileInput" class="form-control" OnChange="OnFileSelected" accept="image/jpeg,image/png" />

                                        </div>


                                        <div class="form-group">
                                            <label for="textBoxId">Remarks</label>
                                            <textarea class="form-control" id="remarks" rows="5" @bind="currentObject.remarks"></textarea>

                                        </div>
                                    }
                                    catch (Exception ex)
                                    {

                                        string s = ex.Message;
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>
</div>





@code {
    // Your code-behind logic goes here

    string vehicle = "";

    string tempid;
    int InspectionID;
    protected override async void OnInitialized()
    {
        // Get the query string parameter value for 'id'
        var uri = navmanager.ToAbsoluteUri(navmanager.Uri);
        var id = QueryHelpers.ParseQuery(uri.Query).TryGetValue("Vehicle", out var value);
        vehicle = value;
        var x = QueryHelpers.ParseQuery(uri.Query).TryGetValue("tempid", out var temp);
        tempid = temp;
        var y = QueryHelpers.ParseQuery(uri.Query).TryGetValue("InspectionID", out var insid);
        InspectionID = int.Parse(insid);
        await LoadChecklist();
        Validate();


    }

    void Validate()
    {
        if (checklist.Count > 0)
        {


            if (currentIndex == 0)
            {
                IsFirstObject = true;
                IsLastObject = false;
            }
            if (currentIndex == checklist.Count - 1)
            {
                IsFirstObject = false;
                IsLastObject = true;
            }
            if (currentIndex > 0 && currentIndex < checklist.Count)
            {
                IsFirstObject = false;
                IsLastObject = false;
            }
        }
    }
    List<tblTemplateDetails> checklist = new List<tblTemplateDetails>();
    private int currentIndex = -1;
    private tblTemplateDetails currentObject;
    public bool IsFirstObject;
    public bool IsLastObject;
    private async Task LoadChecklist()
    {
        try
        {
            var rec = await API.GetRequest($"Inspection/LoadChecklist/{tempid}");

            if (rec != null)
            {
                checklist = JsonSerializer.Deserialize<List<tblTemplateDetails>>(rec);


            }
            else
            {
                Console.WriteLine("API request returned null.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            // Handle the exception appropriately (e.g., log, display error message, etc.)
        }
    }

    bool firstalow = false;
    InputFile fileInput;

    bool istart = true;
    bool isend = false;
    int srno;
    async void submit()
    {
        List<tblInspectionDetails> ins_Details = new List<tblInspectionDetails>();
        int count = 0;
        foreach(var x in checklist)
        {
            tblInspectionDetails obj = new tblInspectionDetails();
            if(x.yes==true || x.no == true || x.na == true)
            {
                count++;
            }

            obj.inspID = InspectionID;
            obj.template_Detail_ID = x.tdid;
            obj.remarks = x.remarks;
            obj.yes = x.yes;
            obj.no = x.no;
            obj.na = x.na;
            obj.attachment = null;
            ins_Details.Add(obj);
        }
        if (count == checklist.Count && checklist.Count>0)
        {
            JsonSerializerOptions options = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData = JsonSerializer.Serialize(ins_Details, options);
            var addtemplate = await API.PostRequest("Inspection/AddInspectionDetail", jsonData);
            string Result = JsonSerializer.Deserialize<string>(addtemplate);
            if (Result == "200")
            {

              //  navmanager.NavigateTo($"/Chk_Details?Vehicle={txtvehicle}&tempid={tempid}&InspectionID={Result}");
                navmanager.NavigateTo($"/checklists");

                toastService.ShowSuccess($"Inspection Completed");
            }
        }
        else
        {
            toastService.ShowError("Please Complete All Observations");
        }



    }


    int currentindex = 0;
    string scopeDesc;

    // private async Task StartClick()
    // {
    //     if (currentindex < checklist.Count && checklist.Count > 0)
    //     {
    //         var rec = await API.GetRequest($"Inspection/GetInspectionDescription/{checklist[currentindex].TemplateDetailID}");

    //         if (!string.IsNullOrEmpty(rec))
    //         {
    //             List<string> data = JsonSerializer.Deserialize<List<string>>(rec);
    //             checklist[currentindex].Description = data[1];
    //             scopeDesc = data[0];

    //             ID = checklist[currentindex].TemplateDetailID;
    //             Desc = checklist[currentindex].Description;
    //             YES = checklist[currentindex].Yes;
    //             NO = checklist[currentindex].No;
    //             NA = checklist[currentindex].NA;
    //             istart = true;
    //             srno = currentindex;
    //             FileName = null; // Reset file name if needed
    //         }
    //         else
    //         {
    //             Console.WriteLine("Error: Data retrieval failed.");
    //             // Handle the error appropriately (e.g., display error message)
    //         }
    //     }
    // }
    void ShowBack()
    {
        Validate();
        SaveChanges(); // Save changes before moving to the previous object
        if (!IsFirstObject)
        {
            if (currentIndex > -1)
            {
                currentIndex--;
                currentObject = checklist[currentIndex];
            }

        }
        else
        {
            if (currentIndex > 0)
            {
                currentIndex--;
                currentObject = checklist[currentIndex];
            }

        }
        srno = currentIndex + 1;
    }
    bool start = false;
    void StartChecklist()
    {
        start = true;
        ShowNext();
    }
    void ShowNext()
    {
        Validate();
        SaveChanges(); // Save changes before moving to the next object

        if (!IsLastObject)
        {

            if (currentIndex < checklist.Count - 1)
            {
                currentIndex++;
            }



            if (checklist.Count > 0)
            {
                currentObject = checklist[currentIndex];
            }




        }
        srno = currentIndex + 1;
    }
    private void SaveChanges()
    {
        if (currentObject != null && checklist != null && currentIndex >= 0 && currentIndex < checklist.Count)
        {
            checklist[currentIndex] = currentObject; // Update object in the list
        }
    }


    public string remarks;
    public int ID;
    public string Desc;
    public bool YES;
    public bool NO;
    public bool NA;


    void HandleCheckboxClicked(string checkboxType)
    {

        switch (checkboxType)
        {
            case "Yes":
                checklist[currentindex].yes = true;
                checklist[currentindex].no = false;
                checklist[currentindex].na = false;

                break;
            case "No":
                checklist[currentindex].no = true;
                checklist[currentindex].yes = false;
                checklist[currentindex].na = false;

                break;
            case "NA":
                checklist[currentindex].na = true;
                checklist[currentindex].yes = false;
                checklist[currentindex].no = false;

                break;
        }
    }
    string FileName { get; set; }
    string ImageUrl { get; set; }
    async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null)
        {
            FileName = file.Name;
            ImageUrl = await GetImageUrl(file);


        }
    }
    async Task<string> GetImageUrl(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        return imageDataUrl;
    }


    void UploadFile()
    {
        // Implement file upload logic here
        // You can access the file data from the InputFile component
        // For example, you can send the file to a server-side endpoint for processing
    }

}

