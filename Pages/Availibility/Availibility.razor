@page "/avail"
@using System.Text.Json
@using System.Security.Claims
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Driver
@using VehicleManagement.Models.General.User_Management
@using VehicleManagement.Pages.Redirects
@inject IToastService toastService
@inject IApiService API
@inject IUserClaimsService UserClaimsService
@inject AuthenticationStateProvider _authenticationStateProvider
<AuthorizeView Policy="AvailMan">
    <Authorized>
        <Nav PageName="Availibility" />

        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="card-header pb-0">
                            <h6>Actions</h6>
                        </div>
                        <div class="card-header pb-0">
                            <div class="row col-md-12" style="text-align:center;">

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <button class="btn btn-danger btn-sm ms-auto" @onclick="OpenPushModal">Push To Client</button>
                                    </div>
                                </div>

                                <div class="col-md-4">
                                    <div class="form-group">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="OpenModal">Add New</button>

                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <button class="btn btn-warning btn-sm ms-auto" @onclick="OpenClearModal">Clear</button>

                                    </div>
                                </div>
                            </div>


                        </div>

                        <div class="fleet-cards">

                            <div class="container" style="justify-content:center !important;">
                                @if (!IsChildLoad)
                                {


                                    @if (AvailDraftList.Count > 0)
                                    {
                                        @foreach (var item in AvailDraftList)
                                        {
                                            <div class="card">

                                                <div class="card-body">

                                                    <div class="card-header">
                                                        <span class="edit-icon" @onclick="@(() => EditDriver(item.availID))"><i class="fa fa-edit"></i></span>
                                                        <span style="color: red;" @onclick="@(() => Delete(item.availID))" class="delete-icon"><i class="fa fa-trash"></i></span>

                                                    </div>

                                                    <span class="tag tag-success">Available</span>
                                                    &nbsp;
                                                    @if (@item.isActive)
                                                    {
                                                        <span class="badge badge-sm bg-gradient-success">@(item.isActive == true ? "Active" : "In-Active")</span>

                                                    }
                                                    else
                                                    {
                                                        <span class="badge badge-sm bg-gradient-danger">@(item.isActive == true ? "Active" : "In-Active")</span>

                                                    }
                                                    <h4 style="padding-top: 30px;">
                                                        @item.vehicleCap &nbsp;&nbsp;@item.chamberSEQ
                                                    </h4>
                                                    <p>
                                                        <i class="fa fa-map-marker" aria-hidden="true"></i>
                                                        &nbsp;@item.location
                                                    </p>
                                                    <p>
                                                        <i class="fas fa-building" aria-hidden="true"></i>
                                                        &nbsp;@item.businessName
                                                    </p>
                                                    <p>
                                                        <i class="fa fa-user" aria-hidden="true"></i>
                                                        &nbsp;@item.driver1
                                                        <br /><br />
                                                        <i class="fa fa-user" aria-hidden="true"></i>
                                                        &nbsp;@item.driver2
                                                    </p>



                                                </div>

                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div>

                                            <div class="card-body">


                                                <span class="tag tag-success">No Vehicle in Availibility</span>
                                             


                                            </div>

                                        </div>
                                    }
                                }
                                else if (IsChildLoad)
                                {
                                    <DataLoaderComponent IsLoading="@IsChildLoad" LoadingText="Loading Available Fleets..." />
                                }


                            </div>
                        </div>



                    </div>
                </div>
            </div>
        </div>
        <Loader isLoading="@IsLoading" />
        <Modal @ref="modal" Title="Add Availability">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Business</label>

                                        <select class="form-control" @onchange="AvailBusiness">
                                            @if (BusinessList.Count > 0)
                                            {
                                                <option value="0" selected="@(Avail.Business==0?"selected":null)">Select One</option>
                                                foreach (var item in BusinessList)
                                                {
                                                    <option value="@item.busID" selected="@(item.busID==Avail.Business ? "selected" : null)">@item.busDesc</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="0"></option>
                                            }


                                        </select>
                                    </div>
                                </div>


                                @if (VehicleList.Count > 0)
                                {
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="example-text-input" class="form-control-label">Vehicle</label>
                                            <select class="form-control" @onchange="VeicleChange">
                                                <option value="0" selected="@(Avail.VehicleID==null?"selected":null)">Select One</option>

                                                @if (VehicleList.Count > 0)
                                                {

                                                    foreach (var item in VehicleList)
                                                    {
                                                        <option value="@item" selected="@(Avail.VehicleID==item?"selected":null)">@item</option>

                                                    }
                                                }
                                                else
                                                {
                                                    <option value="0">Loading...</option>

                                                }


                                            </select>

                                        </div>
                                    </div>

                                    @if (Driver1List.Count > 0)
                                    {
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label for="example-text-input" class="form-control-label">1st Driver</label>
                                                <select class="form-control" @onchange="Driver1">
                                                    @if (Driver1List.Count > 0)
                                                    {
                                                        <option value="0" selected="@(Avail.Driver1ID==null?"selected":null)">Select One</option>
                                                        @foreach (var item in Driver1List)
                                                        {
                                                            <option value="@item.driverID" selected="@(item.driverID == Avail.Driver1ID?"selected":null)">@item.fullname (@item.driverID)</option>

                                                        }
                                                    }
                                                    else
                                                    {
                                                        <option value="0">Loading....</option>

                                                    }


                                                </select>

                                            </div>
                                        </div>
                                    }

                                    @if (Driver2List.Count > 0)
                                    {
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label for="example-text-input" class="form-control-label">Second Driver</label>
                                                <select class="form-control" @onchange="Driver2">

                                                    @if (Driver2List.Count > 0)
                                                    {
                                                        <option value="0" selected="@(Avail.Driver2ID==null?"selected":null)">Select One</option>
                                                        @foreach (var item in Driver2List)
                                                        {
                                                            <option value="@item.driverID" selected="@(item.driverID == Avail.Driver2ID?"selected":null)">@item.fullname (@item.driverID)</option>

                                                        }
                                                    }
                                                    else
                                                    {
                                                        <option value="0">Loading....</option>

                                                    }



                                                </select>

                                            </div>
                                        </div>



                                        @*       <div class="col-md-6">
                                <div class="form-group">
                                <label for="example-text-input" class="form-control-label">Location</label>
                                <input type="text" @bind="Avail.VehicleLocation" placeholder="Location" class="form-control">

                                </div>
                                </div> *@
                                        @*      <div class="col-md-6">
                                <div class="form-group">
                                <div class="form-control">
                                <label for="example-text-input" class="form-control-label">Status</label>
                                <input checked="@Avail.IsActive" @onchange="AvailStatus" type="checkbox">
                                <span class="form-control-label">Active</span>
                                </div>

                                </div>
                                </div> *@
                                        @if (IsEdit)
                                        {
                                            <div class="col-md-12">
                                                <div class="form-group" style="text-align:center;">
                                                    <button class="btn btn-warning btn-sm ms-auto" @onclick="UpdateAvail">Update</button>

                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-md-12">
                                                <div class="form-group" style="text-align:center;">
                                                    <button class="btn btn-primary btn-sm ms-auto" @onclick="AddAvail">Submit</button>

                                                </div>
                                            </div>
                                        }

                                    }
                                    else

                                    {
                                        <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading Drivers..." />

                                    }

                                }
                                else

                                {
                                    <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading Vehicles..." />

                                }

                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

        <Modal @ref="ClearModal" Title="Clear Availability">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-12" style="text-align:center;">
                                    <div class="form-group">

                                        <h3 class="form-control-label"> Are you sure want to clear all availability?</h3>

                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-danger btn-sm ms-auto" @onclick="Clear">Clear</button>

                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

        <Modal @ref="PushModal" Title="Push To Client">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-12" style="text-align:center;">
                                    <div class="form-group">

                                        <h3 class="form-control-label"> Are you sure want to push all availability to client?</h3>

                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-danger btn-sm ms-auto" @onclick="PushToClient">Push</button>

                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>



    </Authorized>
    <NotAuthorized>
        <_403 />
    </NotAuthorized>
</AuthorizeView>




@code {
    private Modal modal;
    private Modal ClearModal;
    private Modal PushModal;
    public List<GetBusiness> BusinessList = new List<GetBusiness>();
    public List<string> VehicleList = new List<string>();
    public List<DriverName> Driver1List = new List<DriverName>();
    public List<DriverName> Driver2List = new List<DriverName>();
    public List<int> BusinessID = new List<int>();
    public List<AvailDraft> AvailDraftList = new List<AvailDraft>();
    public AddAvailability Avail = new AddAvailability();

    public bool IsEdit = false;
    public bool IsLoading = false;
    public bool IsChildLoading = false;
    public bool IsChildLoad = false;
    public string GetRole { get; set; }
    public int EditAvailID { get; set; }

    private void AvailStatus(ChangeEventArgs e)
    {
        Avail.IsActive = (bool)e.Value;
    }

    public async Task<string> GetName(string DriverID)
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Available/GetDriverName/{DriverID}");
            if (AvailDrafts != "")
            {

                var rec = JsonSerializer.Deserialize<string>(AvailDrafts);
                return rec.ToString();

            }
            return null;
        }
        catch (Exception ex)
        {
            return null;
        }
    }
    public async Task<string> Get1DriverID(int AvailID)
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Available/GetDriver1ID/{AvailID}");
            if (AvailDrafts != "")
            {

                return JsonSerializer.Deserialize<string>(AvailDrafts);


            }
            return null;
        }
        catch (Exception ex)
        {
            return null;
        }
    }
    public async Task<string> Get2DriverID(int AvailID)
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Available/GetDriver2ID/{AvailID}");
            if (AvailDrafts != "")
            {

                return JsonSerializer.Deserialize<string>(AvailDrafts);


            }
            return null;
        }
        catch (Exception ex)
        {
            return null;
        }
    }
    private async Task EditDriver(int AvailID)
    {
        try
        {
            IsLoading = true;
            Avail = new AddAvailability();
            var rec = AvailDraftList.Where(p => p.availID == AvailID).FirstOrDefault();
            if (rec != null)
            {
                IsEdit = true;
                EditAvailID = AvailID;
                Avail.VehicleLocation = rec.location;
                Avail.VehicleID = rec.vehicleID;
                Avail.Business = rec.business;
                Avail.Driver1ID = await Get1DriverID(rec.availID);
                Avail.Driver2ID = await Get2DriverID(rec.availID);
                Avail.IsActive = rec.isActive;
                await GetAllVehicle(Avail.Business);
                await GetAll1Driver(Avail.VehicleID, Avail.Business);
                await GetAll2Driver(Avail.VehicleID, Avail.Business);

                modal.Show();

            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
        }
    }
    private async Task Delete(int AvailID)
    {
        try
        {
            IsLoading = true;
            var AvailDrafts = await API.GetRequest($"Available/RemoveAvail/{AvailID}");
            if (AvailDrafts != "")
            {

                var rec = JsonSerializer.Deserialize<int>(AvailDrafts);
                if (rec == 200)
                {
                    await GetAllAvail();
                    toastService.ShowSuccess("Availibility Record Removed");
                }
                else
                {

                    toastService.ShowError("Error...");

                }

            }

            IsLoading = false;
        }
        catch (Exception ex)
        {

            IsLoading = false;
            toastService.ShowError("Removal not available");
        }
    }
    private async Task AvailBusiness(ChangeEventArgs e)
    {
        IsChildLoading = true;
        if (e.Value != "0")
        {
            Avail.Business = int.Parse(e.Value.ToString());
            VehicleList = new List<string>();
            Driver1List = new List<DriverName>();
            Driver2List = new List<DriverName>();
            await GetAllVehicle(Avail.Business);

        }
        else
        {
            BusinessList = new List<GetBusiness>();
            VehicleList = new List<string>();
            Driver1List = new List<DriverName>();
            Driver2List = new List<DriverName>();
        }
        IsChildLoading = false;
    }

    private void Driver2(ChangeEventArgs e)
    {
        IsChildLoading = true;
        if (e.Value != "0")
        {
            try
            {
                Avail.Driver2ID = e.Value.ToString();

            }
            catch (Exception ex)
            {

            }
        }
        else
        {
            Driver2List = new List<DriverName>();

        }
        IsChildLoading = false;
    }
    private void Driver1(ChangeEventArgs e)
    {
        IsChildLoading = true;

        if (e.Value != "0")
        {
            try
            {
                Avail.Driver1ID = e.Value.ToString();

            }
            catch (Exception ex)
            {

            }
        }
        else
        {
            Driver1List = new List<DriverName>();
        }
        IsChildLoading = false;

    }
    private async Task VeicleChange(ChangeEventArgs e)
    {
        IsChildLoading = true;

        if (e.Value != "0")
        {
            Avail.VehicleID = e.Value.ToString();
            Driver1List = new List<DriverName>();
            Driver2List = new List<DriverName>();
            await GetAll1Driver(Avail.VehicleID, Avail.Business);
            await GetAll2Driver(Avail.VehicleID, Avail.Business);

        }
        else
        {
            VehicleList = new List<string>();
            Driver1List = new List<DriverName>();
            Driver2List = new List<DriverName>();
        }
        IsChildLoading = false;
    }

    public bool isEmpty()
    {
        if (Avail.Business != 0 && Avail.VehicleID != "0" && Avail.Driver1ID != "0"
        && Avail.Driver2ID != "0")
        {
            return false;
        }
        else
        {
            return true;
        }

    }
    private async Task Clear()
    {
        try
        {
            IsLoading = true;
            JsonSerializerOptions options = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData = JsonSerializer.Serialize(BusinessID, options);
            var AddUser = await API.PostRequest($"Available/Clear", jsonData);
            int Result = JsonSerializer.Deserialize<int>(AddUser);
            if (Result == 200)
            {
                await GetAllAvail();
                toastService.ShowSuccess($"Availability Cleared Success");
                ClearModal.CloseModal();
            }
            else
            {

                toastService.ShowError("Error...");
                ClearModal.CloseModal();

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    private async Task PushToClient()
    {
        try
        {
            IsLoading = true;

            JsonSerializerOptions options = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData = JsonSerializer.Serialize(BusinessID, options);
            var AddUser = await API.PostRequest($"Available/PushToClient", jsonData);
            int Result = JsonSerializer.Deserialize<int>(AddUser);
            if (Result == 200)
            {
                await GetAllAvail();
                PushModal.CloseModal();
                toastService.ShowSuccess($"Availability Pushed Success");
            }
            else
            {
                PushModal.CloseModal();
                toastService.ShowWarning($"Some In-Active Push Detected");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    private async Task UpdateAvail()
    {
        try
        {

            if (Avail != null && !isEmpty())
            {
                IsLoading = true;
                string jsonData = JsonSerializer.Serialize(Avail);
                var AddUser = await API.PostRequest($"Available/UpdateAvailability/{EditAvailID}", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    toastService.ShowSuccess($"Availability Update Success");
                    Avail = new AddAvailability();
                    await GetAllAvail();
                    modal.CloseModal();
                    VehicleList = new List<string>();
                    Driver1List = new List<DriverName>();
                    Driver2List = new List<DriverName>();
                    IsEdit = false;
                }
                else
                {

                    toastService.ShowError("Error...");
                    modal.CloseModal();

                }

            }
            else
            {
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    private async Task AddAvail()
    {
        try
        {

            if (Avail != null && !isEmpty())
            {
                IsLoading = true;
                Avail.AvailDate = DateTime.Now;
                Avail.IsActive = true;
                Avail.VehicleLocation = "";
                string jsonData = JsonSerializer.Serialize(Avail);
                var AddUser = await API.PostRequest($"Available/AddAvailability", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    toastService.ShowSuccess($"Availability Added Success");
                    Avail = new AddAvailability();
                    await GetAllAvail();
                    modal.CloseModal();
                    VehicleList = new List<string>();
                    Driver1List = new List<DriverName>();
                    Driver2List = new List<DriverName>();

                }
                else
                {

                    toastService.ShowError("Error...");
                    modal.CloseModal();

                }

            }
            else
            {
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    protected override async Task OnInitializedAsync()
    {

        IsChildLoad = true;
        try
        {

            BusinessID = await UserClaimsService.GetBusinessIdsAsync();

            await GetAllAvail();

            await GetAllBusiness();





        }
        catch (Exception ex)
        {
            IsChildLoad = false;
        }
        IsChildLoad = false;
    }
    public async Task GetAllAvail()
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Available/GetAllAvailDraft");
            if (AvailDrafts != "")
            {

                var rec = JsonSerializer.Deserialize<List<AvailDraft>>(AvailDrafts);
                AvailDraftList = rec.Where(b => BusinessID.Contains(b.business)).OrderByDescending(p => p.availID).ToList();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAll1Driver(string VehicleID, int BusID)
    {

        try
        {

            var Driver = await API.GetRequest($"Available/GetDrivers/{VehicleID}/{BusID}");
            if (Driver != "")
            {

                Driver1List = JsonSerializer.Deserialize<List<DriverName>>(Driver);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAll2Driver(string VehicleID, int BusID)
    {

        try
        {

            var Driver = await API.GetRequest($"Available/GetDrivers/{VehicleID}/{BusID}");
            if (Driver != "")
            {

                Driver2List = JsonSerializer.Deserialize<List<DriverName>>(Driver);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAllVehicle(int BusID)
    {

        try
        {

            var Vehicles = await API.GetRequest($"Available/GetVehicles/{BusID}");
            if (Vehicles != "")
            {

                VehicleList = JsonSerializer.Deserialize<List<string>>(Vehicles);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAllBusiness()
    {

        try
        {
            JsonSerializerOptions options = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData = JsonSerializer.Serialize(BusinessID, options);
            var Vehicles = await API.PostRequest($"Available/GetBusinessAll", jsonData);
            if (Vehicles != "")
            {

                BusinessList = JsonSerializer.Deserialize<List<GetBusiness>>(Vehicles);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void CheckModal()
    {
        modal.CloseModal();
    }
    private void OpenClearModal()
    {
        ClearModal.Show();
    }
    private void OpenModal()
    {
        if (!IsEdit)
        {
            Avail = new AddAvailability();
        }
        modal.Show();
    }
    private void OpenPushModal()
    {
        PushModal.Show();
    }
}
