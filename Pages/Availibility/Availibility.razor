@page "/avail"
@using System.Text.Json
@using VehicleManagement.ApiService
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Driver
@using VehicleManagement.Pages.Redirects
@inject IToastService toastService
@inject IApiService API
<AuthorizeView Policy="Testing">
    <Authorized>
        <Nav PageName="Availibility" />

        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="card-header pb-0">
                            <h6>Actions</h6>
                        </div>
                        <div class="card-header pb-0">
                            <div class="row col-md-12" style="text-align:center;">
                                   <AuthorizeView Roles="admin">
                                    <Authorized Context="AdminAuthorized">
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <button class="btn btn-danger btn-sm ms-auto" @onclick="OpenPushModal">Push To Client</button>
                                            </div>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                             
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="OpenModal">Add New</button>

                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <button class="btn btn-warning btn-sm ms-auto" @onclick="OpenClearModal">Clear</button>

                                    </div>
                                </div>
                            </div>


                        </div>

                        <div class="fleet-cards">

                            <div class="container">
                                @if (AvailDraftList.Count > 0)
                                {
                                    @foreach (var item in AvailDraftList)
                                    {
                                        <div class="card">

                                            <div class="card-body">
                                                <AuthorizeView>
                                                    <Authorized Context="User">
                                                        <div class="card-header">
                                                            <span class="edit-icon"><i class="fa fa-edit"></i></span>
                                                            <span style="color: red;" class="delete-icon"><i class="fa fa-trash"></i></span>

                                                        </div>
                                                    </Authorized>
                                                </AuthorizeView>
                                             
                                                <span class="tag tag-success">Available</span>
                                                <h4 style="padding-top: 30px;">
                                                    @item.vehicleCap &nbsp;&nbsp;@item.chamberSEQ
                                                </h4>
                                                <p>
                                                    <i class="fa fa-map-marker" aria-hidden="true"></i>
                                                    &nbsp;@item.location
                                                </p>
                                                <p>
                                                    <i class="fa fa-user" aria-hidden="true"></i>
                                                    &nbsp;@item.driver1
                                                    <br /><br />
                                                    <i class="fa fa-user" aria-hidden="true"></i>
                                                    &nbsp;@item.driver2
                                                </p>
                                                <span class="btn tag-btn btn-warning btn-sm ms-auto">Assign Load</span>
                                            </div>

                                        </div>
                                    }
                                }
                                else
                                {
                                    <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading Available Fleets..."/>
                                }

                                
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <Loader isLoading="@IsLoading" />
        <Modal @ref="modal" Title="Add Availability">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Business</label>

                                        <select class="form-control" placeholder="Role" id="Role" @onchange="AvailBusiness" name="Roles">
                                            @if (BusinessList.Count > 0)
                                            {
                                                <option value="0">Select One</option>
                                                foreach (var item in BusinessList)
                                                {
                                                    <option value="@item" selected="@(item==Avail.Business ? "selected" : null)">@item</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="0"></option>
                                            }


                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Vehicle</label>
                                        <select class="form-control" @onchange="VeicleChange">
                                            <option value="0">Select One</option>

                                            @if (VehicleList.Count > 0)
                                            {

                                                foreach (var item in VehicleList)
                                                {
                                                    <option value="@item">@item</option>

                                                }
                                            }
                                            else
                                            {
                                                <option value="0">Loading...</option>

                                            }


                                        </select>

                                    </div>
                                </div>


                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">1st Driver</label>
                                        <select class="form-control" @onchange="Driver1">
                                            @if (Driver1List.Count > 0)
                                            {
                                                <option value="0">Select One</option>
                                                @foreach (var item in Driver1List)
                                                {
                                                    <option value="@item.driverID.ToString()">@item.driverNameID</option>

                                                }
                                            }
                                            else
                                            {
                                                <option value="0">Loading....</option>

                                            }


                                        </select>

                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Second Driver</label>
                                        <select class="form-control" @onchange="Driver2">

                                            @if (Driver2List.Count > 0)
                                            {
                                                <option value="0">Select One</option>
                                                @foreach (var item in Driver2List)
                                                {
                                                    <option value="@item.driverID.ToString()">@item.driverNameID</option>

                                                }
                                            }
                                            else
                                            {
                                                <option value="0">Loading....</option>

                                            }



                                        </select>

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Location</label>
                                        <input type="text" @bind="Avail.VehicleLocation" placeholder="Location" class="form-control">

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="form-control">
                                            <label for="example-text-input" class="form-control-label">Status</label>
                                            <input checked="@Avail.IsActive" @onchange="AvailStatus" type="checkbox">
                                            <span class="form-control-label">Active</span>
                                        </div>

                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="AddAvail">Submit</button>

                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

        <Modal @ref="ClearModal" Title="Clear Availability">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-12" style="text-align:center;">
                                    <div class="form-group">

                                        <h3 class="form-control-label"> Are you sure want to clear all availability?</h3>

                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-danger btn-sm ms-auto" @onclick="Clear">Clear</button>

                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>
   
        <Modal @ref="PushModal" Title="Push To Client">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-12" style="text-align:center;">
                                    <div class="form-group">

                                        <h3 class="form-control-label"> Are you sure want to push all availability to client?</h3>

                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-danger btn-sm ms-auto" @onclick="PushToClient">Push</button>

                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>



    </Authorized>
    <NotAuthorized>
        <_403 />
    </NotAuthorized>
</AuthorizeView>




@code {
    private Modal modal;
    private Modal ClearModal;
    private Modal PushModal;
    public List<string> BusinessList = new List<string>();
    public List<string> VehicleList = new List<string>();
    public List<DriversList> Driver1List = new List<DriversList>();
    public List<DriversList> Driver2List = new List<DriversList>();
    public List<AvailDraft> AvailDraftList = new List<AvailDraft>();
    public AddAvailability Avail = new AddAvailability();

    public bool IsLoading = false;
    public bool IsChildLoading = false;

    private void AvailStatus(ChangeEventArgs e)
    {
        Avail.IsActive = (bool)e.Value;
    }
    private void AvailBusiness(ChangeEventArgs e)
    {
        Avail.Business = e.Value.ToString();
    }

    private void Driver2(ChangeEventArgs e)
    {
        if (e.Value != "0")
        {
            try
            {
                Avail.Driver2ID = int.Parse(e.Value.ToString());

            }
            catch (Exception ex)
            {

            }
        }
    }
    private void Driver1(ChangeEventArgs e)
    {
        if (e.Value != "0")
        {
            try
            {
                Avail.Driver1ID = int.Parse(e.Value.ToString());

            }
            catch (Exception ex)
            {

            }
        }
    }
    private void VeicleChange(ChangeEventArgs e)
    {
        if (e.Value != "0")
        {
            Avail.VehicleID = e.Value.ToString();
        }
    }

    public bool isEmpty()
    {
        if (Avail.VehicleLocation != null && Avail.Business != null && Avail.VehicleID != null && Avail.Driver1ID != 0
        && Avail.Driver2ID != 0)
        {
            return false;
        }
        else
        {
            return true;
        }

    }
    private async Task Clear()
    {
        try
        {
            IsLoading = true;

            var AddUser = await API.GetRequest($"Available/Clear");
            int Result = JsonSerializer.Deserialize<int>(AddUser);
            if (Result == 200)
            {
                await GetAllAvail();
                toastService.ShowSuccess($"Availability Cleared Success");
                ClearModal.CloseModal();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    private async Task PushToClient()
    {
        try
        {
            IsLoading = true;

            var AddUser = await API.GetRequest($"Available/PushToClient");
            int Result = JsonSerializer.Deserialize<int>(AddUser);
            if (Result == 200)
            {
                await GetAllAvail();
                PushModal.CloseModal();
                toastService.ShowSuccess($"Availability Pushed Success");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    private async Task AddAvail()
    {
        try
        {

            if (Avail != null && !isEmpty())
            {
                IsLoading = true;
                Avail.AvailDate = DateTime.Now;
                string jsonData = JsonSerializer.Serialize(Avail);
                var AddUser = await API.PostRequest($"Available/AddAvailability", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    toastService.ShowSuccess($"Availability Added Success");
                    Avail = new AddAvailability();
                    await GetAllAvail();
                    modal.CloseModal();


                }

            }
            else
            {
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    protected override async Task OnInitializedAsync()
    {
        IsChildLoading = true;
        try
        {
            await GetAllAvail();
            await GetAllBusiness();
            await GetAllVehicle();
            await GetAll1Driver();
            await GetAll2Driver();
        }
        catch (Exception ex)
        {
            IsChildLoading = false;
        }
        IsChildLoading = false;
    }
    public async Task GetAllAvail()
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Available/GetAllAvailDraft");
            if (AvailDrafts != "")
            {

                AvailDraftList = JsonSerializer.Deserialize<List<AvailDraft>>(AvailDrafts);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAll1Driver()
    {

        try
        {

            var Driver = await API.GetRequest($"Available/GetDrivers");
            if (Driver != "")
            {

                Driver1List = JsonSerializer.Deserialize<List<DriversList>>(Driver);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAll2Driver()
    {

        try
        {

            var Driver = await API.GetRequest($"Available/GetDrivers2");
            if (Driver != "")
            {

                Driver2List = JsonSerializer.Deserialize<List<DriversList>>(Driver);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAllVehicle()
    {

        try
        {

            var Vehicles = await API.GetRequest($"Available/GetVehicles");
            if (Vehicles != "")
            {

                VehicleList = JsonSerializer.Deserialize<List<string>>(Vehicles);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAllBusiness()
    {

        try
        {

            var Vehicles = await API.GetRequest($"Available/GetBusiness");
            if (Vehicles != "")
            {

                BusinessList = JsonSerializer.Deserialize<List<string>>(Vehicles);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void CheckModal()
    {
        modal.CloseModal();
    }
    private void OpenClearModal()
    {
        ClearModal.Show();
    }
    private void OpenModal()
    {
        modal.Show();
    }
    private void OpenPushModal()
    {
        PushModal.Show();
    }
}
