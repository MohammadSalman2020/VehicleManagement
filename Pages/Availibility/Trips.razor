@page "/trips"

@using System.Text.Json
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General

@inject IToastService toast
@inject IApiService API
@inject IUserClaimsService UserClaimsService
<AuthorizeView Policy="MainCom">
    <Authorized>
        <Nav PageName="Trips" />

        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="fleet-cards">
                            <div class="container">
                                @if(TripList.Count>0)
                                {
                                    @foreach (var item in TripList)
                                    {
                                        <div class="card">
                                            <div class="card-header">
                                              
                                                <span class="edit-icon" @onclick="@(() => OpenMainModal(item.loadID))"><i class="fa fa-wrench"></i></span>


                                            </div>
                                            <div class="card-body">

                                                <span class="tag tag-yellow">On Trip</span>
                                                <h4>@item.vehicleID</h4>
                                                <p>
                                                    <i class="fas fa-oil-can" aria-hidden="true"></i>
                                                    &nbsp;Product: @item.product
                                                </p>
                                                <p>
                                                    <i class="fa fa-marker" aria-hidden="true"></i>
                                                    &nbsp;Location: @item.loadingPoint
                                                </p>
                                                <p>
                                                    <i class="fa fa-building" aria-hidden="true"></i>
                                                    &nbsp;To: @item.decentingPoint
                                                </p>
                                                <p>
                                                    <i class="fa fa-user" aria-hidden="true"></i>
                                                    &nbsp;Driver 1: @item.driver1
                                                    <br /><br />
                                                    <i class="fa fa-user" aria-hidden="true"></i>
                                                    &nbsp;Driver 2: @item.driver2
                                                </p>

                                            </div>

                                        </div>
                                    }
                                }
                                else
                                {
                                    <DataLoaderComponent IsLoading="IsChildLoading" LoadingText="Loading Trips..."/>
                                }

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <Modal @ref="MaintainanceModal" Title="Send To Maintainance">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-12" style="text-align:center;">
                                    <div class="form-group">

                                        <h3 class="form-control-label"> Are you sure want to Send this Vehicle To Maintainance?</h3>

                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">

                                        <label for="example-text-input" style="font-weight:bolder;" class="form-control-label">Enter Reason</label>
                                        <input type="text" for="example-text-input" @bind="@Main.reason" class="form-control">

                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        @if (IsLoading2)
                                        {
                                            <DataLoaderComponent IsLoading="@IsLoading2" LoadingText="Sending To Maintainance..." />
                                        }
                                        else
                                        {
                                            <button class="btn btn-danger btn-sm ms-auto" @onclick="SendVehicle">Send Vehicle</button>
                                        }
                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>


    </Authorized>
</AuthorizeView>
@code {
    public List<TripConfirm> TripList = new List<TripConfirm>();
    public bool IsChildLoading = false;
    public List<int> BusinessID = new List<int>();
    public MaintainanceVehicle Main = new MaintainanceVehicle();
    public bool IsLoading2 = false;
    private Modal MaintainanceModal;
    private int LoadIDs;
    private async Task OpenMainModal(int LoadID)
    {
        LoadIDs = LoadID;
        MaintainanceModal.Show();

    }

    protected override async Task OnInitializedAsync()
    {

        IsChildLoading = true;
        try
        {

            BusinessID = await UserClaimsService.GetBusinessIdsAsync();

            await GetAllTrips();





        }
        catch (Exception ex)
        {
            IsChildLoading = false;
        }
        IsChildLoading = false;
    }
    public async Task GetAllTrips()
    {
        try
        {
            TripList = new List<TripConfirm>();
            var AvailDrafts = await API.GetRequest($"Available/GetAllTrip");
            if (AvailDrafts != "")
            {

                var rec = JsonSerializer.Deserialize<List<TripConfirm>>(AvailDrafts);
                if(rec.Count>0)
                {
                    TripList = rec.Where(b => BusinessID.Contains(b.businessID)).ToList();

                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task SendVehicle()
    {
        IsLoading2 = true;
        try
        {
            var rec = TripList.Where(p => p.loadID == LoadIDs).FirstOrDefault();
            Main.onMainDate = DateTime.Now;
            Main.isActive = true;
            Main.vehicleNumber = rec.vehicleID;
            Main.mainFrom = "On-Trip";
            Main.busID = rec.businessID;
            Main.loadid = rec.loadID;
            Main.business = "";
            string jsonData = JsonSerializer.Serialize(Main);
            var AddUser = await API.PostRequest($"Available/SentToTrip", jsonData);
            int Result = JsonSerializer.Deserialize<int>(AddUser);
            if (Result == 200)
            {
                await GetAllTrips();
                LoadIDs = 0;
                Main = new MaintainanceVehicle();
                MaintainanceModal.CloseModal();
                toast.ShowSuccess($"Vehicle Sent to Maintainance");

            }
            else
            {
                MaintainanceModal.CloseModal();

                toast.ShowError("Error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        IsLoading2 = false;
    }
}
