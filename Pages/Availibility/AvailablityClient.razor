@page "/availclient"


@using System.Security.Claims
@using System.Text.Json
@using System.Text.RegularExpressions
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Driver
@using VehicleManagement.Models.General.User_Management
@using VehicleManagement.Pages.Redirects
@inject IToastService toastService
@inject IApiService API
@inject IJSRuntime js
@inject IUserClaimsService UserClaimsService
@inject AuthenticationStateProvider _authenticationStateProvider

<AuthorizeView Policy="AvailabilityCom">
    <Authorized>
        <Nav PageName="Availibility" />

        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">


                        <AuthorizeView Roles="admin,FleetManager">
                            <Authorized Context="AdminAccess">


                                <div class="card-header pb-0">
                                    <div class="row col-md-12" style="text-align:right;">
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <select class="form-control" @onchange="BusChange">
                                                    @if (BusinessList.Count > 0)
                                                    {
                                                        <option value="0" selected="@(Bus==0?"selected":null)">Select All</option>
                                                        foreach (var item in BusinessList)
                                                        {
                                                            <option value="@item.busID" selected="@(item.busID==Bus ? "selected" : null)">@item.busDesc</option>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <option value="0">Loading...</option>
                                                    }

                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </Authorized>
                        </AuthorizeView>


                        <div class="fleet-cards">

                            <div class="container" style="justify-content:center !important;">
                                @if (!IsChildLoading)
                                {


                                    @if (DraftList.Count > 0)
                                    {
                                        @foreach (var item in DraftList)
                                        {
                                            <div class="card">
                                                <div class="card-body">
                                                    <span class="tag tag-success">Available</span>

                                                    <h4 style="padding-top: 30px;">
                                                        @item.vehicleCap &nbsp;&nbsp;@item.chamberSEQ
                                                    </h4>
                                                    <p>
                                                        <i class="fa fa-map-marker" aria-hidden="true"></i>
                                                        &nbsp;@item.location
                                                    </p>
                                                    <p>
                                                        <i class="fas fa-building" aria-hidden="true"></i>
                                                        &nbsp;@item.businessName
                                                    </p>
                                                    <p class="contact-info">
                                                        <CallModal @ref="Call" phoneNumber="@phoneNumber" />
                                                        <a @onclick="@(()=>HandleButtonClick(item.phoneDriver1))">
                                                            <i class="fa fa-user" aria-hidden="true"></i>
                                                            &nbsp;@item.driver1
                                                        </a>
                                                        <br /><br />
                                                        <a @onclick="@(()=>HandleButtonClick(item.phoneDriver2))">

                                                            <i class="fa fa-user" aria-hidden="true"></i>
                                                            &nbsp;@item.driver2
                                                        </a>
                                                    </p>
                                                    @if (!IsFleetManager)
                                                    {
                                                        <span class="btn tag-btn btn-warning btn-sm ms-auto" @onclick="@(()=>OpenLoadModal(item.availID))">Assign Load</span>
                                                    }

                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div>

                                            <div class="card-body">


                                                <span class="tag tag-success">No Vehicle in Available List..</span>



                                            </div>

                                        </div>
                                    }
                                }
                                else if (IsChildLoading)
                                {
                                    <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading Available Fleets..." />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <Loader isLoading="@IsLoading" />
        <Modal @ref="modal" Title="Assign Load">
            <Body>
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Loading Points</label>
                                        <select class="form-control" @onchange="FillingChange">
                                            @if (Fillings.Count > 0)
                                            {
                                                <option value="0" selected="@(Load.loading==null?"selected":null)">Select One</option>
                                                foreach (var item in Fillings)
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="0">Loading...</option>
                                            }


                                        </select>

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Decanting Points</label>
                                        <select class="form-control" @onchange="DecantChange">
                                            @if (GetDecantings.Count > 0)
                                            {
                                                <option value="0" selected="@(Load.decenting==null?"selected":null)">Select One</option>
                                                foreach (var item in GetDecantings)
                                                {
                                                    <option value="@item">@item</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="0">Loading...</option>
                                            }


                                        </select>

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Product</label>
                                        <input type="text" @bind="Load.product" placeholder="Product" class="form-control">
                                    </div>
                                </div>
                                @*         <div class="col-md-6">
                                <div class="form-group">
                                <div class="form-control">
                                <label for="example-text-input" class="form-control-label">Status</label>
                                <input checked="@Load.isActive" @onchange="LoadStatus" type="checkbox">
                                <span class="form-control-label">Active</span>
                                </div>

                                </div>
                                </div> *@
                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="AddLoad">Submit</button>

                                    </div>
                                </div>


                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

    </Authorized>
    <NotAuthorized>
        @if (_isJsReady)
        {
            <_403 />

        }
    </NotAuthorized>
</AuthorizeView>


@code {
    private bool _isJsReady = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Attempt a simple JavaScript call to check if JS is ready
                await js.InvokeVoidAsync("console.log", "");
                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();
            }
            catch
            {
                // If JS isn't ready, handle it gracefully
                _isJsReady = false; // JavaScript is not yet ready
            }
        }
    }
    private Modal modal;
    private CallModal Call;
    public List<AvailDraft> AvailDraftList = new List<AvailDraft>();
    public AddLoad Load = new AddLoad();
    public List<int> BusinessID = new List<int>();
    public List<GetBusiness> BusinessList = new List<GetBusiness>();
    public List<string> GetDecantings = new List<string>();
    public List<string> Fillings = new List<string>();
    public bool IsLoading = false;
    public bool IsFleetManager = false;
    public bool IsChildLoading = false;
    public string modalDisplay { get; set; } = "none";
    public int Bus { get; set; }
    public List<AvailDraft> DraftList = new List<AvailDraft>();

    public string? phoneNumber { get; set; }
    private async Task BusChange(ChangeEventArgs e)
    {
        IsChildLoading = true;
        int Val = int.Parse(e.Value.ToString());
        if (Val != 0)
        {
            Bus = Val;
            DraftList = AvailDraftList.Where(p => p.business == Bus).OrderByDescending(p => p.business).ToList();

        }
        else
        {
            DraftList = AvailDraftList;
        }

        IsChildLoading = false;
    }
    public async Task GetAllDecantings()
    {
        try
        {
            // JsonSerializerOptions options = new JsonSerializerOptions
            //     {
            //         WriteIndented = true,
            //         ReferenceHandler = null
            //     };
            // string jsonData = JsonSerializer.Serialize(BusinessID, options);
            var AvailDrafts = await API.GetRequest($"Fleet/GetDecantings");
            if (AvailDrafts != "")
            {

                GetDecantings = JsonSerializer.Deserialize<List<string>>(AvailDrafts);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private async Task DecantChange(ChangeEventArgs e)
    {

        string Val = e.Value.ToString();
        if (Val != "0")
        {
            Load.decenting= e.Value.ToString();

        }
        else
        {
            Load.decenting= null;
        }



    }
    private async Task FillingChange(ChangeEventArgs e)
    {

        string Val = e.Value.ToString();
        if (Val != "0")
        {
            Load.loading= e.Value.ToString();

        }
        else
        {
            Load.loading= null;
        }



    }
    public async Task GetFillings()
    {
        try
        {
            // JsonSerializerOptions options = new JsonSerializerOptions
            //     {
            //         WriteIndented = true,
            //         ReferenceHandler = null
            //     };
            // string jsonData = JsonSerializer.Serialize(BusinessID, options);
            var AvailDrafts = await API.GetRequest($"Fleet/GetFillings");
            if (AvailDrafts != "")
            {

                Fillings = JsonSerializer.Deserialize<List<string>>(AvailDrafts);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task GetAllBusiness()
    {

        try
        {
            JsonSerializerOptions options = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData = JsonSerializer.Serialize(BusinessID, options);
            var Vehicles = await API.PostRequest($"Available/GetBusinessAll", jsonData);
            if (Vehicles != "")
            {

                BusinessList = JsonSerializer.Deserialize<List<GetBusiness>>(Vehicles);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    void HandleButtonClick(string s)
    {
        if (s == null)
        {
            toastService.ShowError("Phone Number is Empty please update driver contact number");
            return;
        }
        phoneNumber = s;
        // Check if the first character is '0'
        if (phoneNumber.Length > 0 && phoneNumber[0] == '0')
        {
            // Remove the first character '0' and prepend '+92'
            phoneNumber = "+92" + phoneNumber.Substring(1);
        }

        // Remove spaces from the whole string
        phoneNumber = phoneNumber.Replace(" ", "");

        // Now you can proceed with your further operations
        Call.Open();

    }
    private void LoadStatus(ChangeEventArgs e)
    {
        Load.isActive = (bool)e.Value;
    }

    protected override async Task OnInitializedAsync()
    {
        IsChildLoading = true;
        try
        {
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.IsInRole("FleetManager"))
            {
                IsFleetManager = true;
            }
            BusinessID = await UserClaimsService.GetBusinessIdsAsync();
            await GetAllBusiness();
            await GetAllAvail();


        }
        catch (Exception ex)
        {
            IsChildLoading = false;
        }
        IsChildLoading = false;
        StateHasChanged();
        await GetAllDecantings();
        await GetFillings();
    }
    public bool isEmpty()
    {
        if (Load.loading != null && Load.decenting != null)
        {
            return false;
        }
        else
        {
            return true;
        }

    }
    private async Task AddLoad()
    {
        try
        {
            var rec = AvailDraftList.Where(p => p.availID == Load.availID).FirstOrDefault();

            if (rec != null)
            {
                IsLoading = true;
                Load.dated = DateTime.Now;
                Load.businessID = rec.business;
                Load.isActive = true;
                Load.decenting = Load.decenting ?? "";
                string jsonData = JsonSerializer.Serialize(Load);
                var AddUser = await API.PostRequest($"Available/AddLoad", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    toastService.ShowSuccess($"Load Added Success");
                    Load = new AddLoad();
                    await GetAllAvail();
                    modal.CloseModal();

                }
                else
                {

                    toastService.ShowError("Error...");
                    modal.CloseModal();

                }

            }
            else
            {
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    public async Task GetAllAvail()
    {

        try
        {
            JsonSerializerOptions options = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData = JsonSerializer.Serialize(BusinessID, options);
            var AvailDrafts = await API.PostRequest($"Available/GetAllAvailClient", jsonData);
            if (AvailDrafts != "")
            {
                AvailDraftList = JsonSerializer.Deserialize<List<AvailDraft>>(AvailDrafts).OrderByDescending(p => p.business).ToList();
                DraftList = new List<AvailDraft>();
                DraftList = AvailDraftList;
                // AvailDraftList = rec.Where(b => BusinessID.Contains(b.business)).OrderByDescending(p => p.availID).ToList();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void OpenLoadModal(int ID)
    {
        Load.availID = ID;
        modal.Show();
    }
}
