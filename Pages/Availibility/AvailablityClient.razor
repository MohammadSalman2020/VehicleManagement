@page "/availclient"


@using System.Security.Claims
@using System.Text.Json
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Driver
@using VehicleManagement.Models.General.User_Management
@using VehicleManagement.Pages.Redirects
@inject IToastService toastService
@inject IApiService API
@inject IUserClaimsService UserClaimsService
<AuthorizeView Policy="AvailabilityCom">
    <Authorized>
        <Nav PageName="Availibility" />

        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="fleet-cards">
                            <div class="container">
                                @if (AvailDraftList.Count > 0)
                                {
                                    @foreach (var item in AvailDraftList)
                                    {
                                        <div class="card">
                                            <div class="card-body">
                                                <span class="tag tag-success">Available</span>
                                          
                                                <h4 style="padding-top: 30px;">
                                                    @item.vehicleCap &nbsp;&nbsp;@item.chamberSEQ
                                                </h4>
                                                <p>
                                                    <i class="fa fa-map-marker" aria-hidden="true"></i>
                                                    &nbsp;@item.location
                                                </p>
                                                <p>
                                                    <i class="fas fa-building" aria-hidden="true"></i>
                                                    &nbsp;@item.businessName
                                                </p>
                                                <p>
                                                    <i class="fa fa-user" aria-hidden="true"></i>
                                                    &nbsp;@item.driver1
                                                    <br /><br />
                                                    <i class="fa fa-user" aria-hidden="true"></i>
                                                    &nbsp;@item.driver2
                                                </p>

                                                <span class="btn tag-btn btn-warning btn-sm ms-auto" @onclick="@(()=>OpenLoadModal(item.availID))">Assign Load</span>

                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading Available Fleets..." />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <Loader isLoading="@IsLoading" />
        <Modal @ref="modal" Title="Assign Load">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">



                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Loading Point</label>
                                        <input type="text" @bind="Load.loading" placeholder="Location" class="form-control">

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Decenting Point</label>
                                        <input type="text" @bind="Load.decenting" placeholder="Location" class="form-control">

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Product</label>
                                        <input type="text" @bind="Load.product" placeholder="Location" class="form-control">

                                    </div>
                                </div>
                        @*         <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="form-control">
                                            <label for="example-text-input" class="form-control-label">Status</label>
                                            <input checked="@Load.isActive" @onchange="LoadStatus" type="checkbox">
                                            <span class="form-control-label">Active</span>
                                        </div>

                                    </div>
                                </div> *@
                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="AddLoad">Submit</button>

                                    </div>
                                </div>


                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

    </Authorized>
    <NotAuthorized>
        <_403 />
    </NotAuthorized>
</AuthorizeView>


@code {
    private Modal modal;
    public List<AvailDraft> AvailDraftList = new List<AvailDraft>();
    public AddLoad Load = new AddLoad();
    public List<int> BusinessID = new List<int>();

    public bool IsLoading = false;
    public bool IsChildLoading = false;


    private void LoadStatus(ChangeEventArgs e)
    {
        Load.isActive = (bool)e.Value;
    }

    protected override async Task OnInitializedAsync()
    {
        IsChildLoading = true;
        try
        {

            BusinessID = await UserClaimsService.GetBusinessIdsAsync();
            await GetAllAvail();


        }
        catch (Exception ex)
        {
            IsChildLoading = false;
        }
        IsChildLoading = false;
    }
    public bool isEmpty()
    {
        if (Load.loading != null && Load.decenting != null)
        {
            return false;
        }
        else
        {
            return true;
        }

    }
    private async Task AddLoad()
    {
        try
        {
            var rec = AvailDraftList.Where(p => p.availID == Load.availID).FirstOrDefault();

            if (rec != null)
            {
                IsLoading = true;
                Load.dated = DateTime.Now;
                Load.businessID = rec.business;
                Load.isActive = true;
                string jsonData = JsonSerializer.Serialize(Load);
                var AddUser = await API.PostRequest($"Available/AddLoad", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    toastService.ShowSuccess($"Load Added Success");
                    Load = new AddLoad();
                    await GetAllAvail();
                    modal.CloseModal();

                }
                else
                {

                    toastService.ShowError("Error...");
                    modal.CloseModal();

                }

            }
            else
            {
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }
    public async Task GetAllAvail()
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Available/GetAllAvailClient");
            if (AvailDrafts != "")
            {

                var rec = JsonSerializer.Deserialize<List<AvailDraft>>(AvailDrafts);
                AvailDraftList = rec.Where(b => BusinessID.Contains(b.business)).OrderByDescending(p => p.availID).ToList();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void OpenLoadModal(int ID)
    {
        Load.availID = ID;
        modal.Show();
    }
}
