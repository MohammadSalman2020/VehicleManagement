@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@inject NavigationManager Nav
@using VehicleManagement.Models.General.Login
@using VehicleManagement.Service
@inject UserAccountService useraccountservice
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService toastService
@using VehicleManagement.Models.DB
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@inject IApiService API

<PageTitle>Login</PageTitle>
<div class="login-screen" @onkeydown="HandleKeyPress">


    <div class="parent clearfix">
        <div class="bg-illustration">


        </div>

        <div class="login">
            <div class="container">
                <h1>Login to access to<br />your account</h1>

                <div class="login-form">
                    <div class="form">
                        <input type="text" @bind="@Username" placeholder="Username">
                        <input type="password" @bind="@Password" placeholder="Password">

                        <div class="remember-form">
                            <input @bind-value="@rememberMe" checked="@rememberMe" type="checkbox">
                            <span>Remember me</span>
                        </div>

                        <button class="btn-auth" @onclick="Authenticate" @onkeydown="HandleKeyPress">LOG-IN</button>

                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<Modal @ref="modal" Title="Add Secret Key">
    <Body>
        <div class="col-md-12">
            <div class="card">

                <div class="card-body">

                    <div class="row">

                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="example-text-input" class="form-control-label">Secret Key</label>
                                <input type="text" placeholder="Secret Key" @bind="SecretModel.SecretKey" class="form-control">

                            </div>
                        </div>


                        <div class="col-md-12">
                            <div class="form-group" style="text-align:center;">
                                <button class="btn btn-primary btn-sm ms-auto" @onclick="SubmitSecret">Submit</button>

                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </div>
    </Body>
</Modal>
<Loader isLoading="@isLoading" />

@code {
    public string Username { get; set; }
    public string Password { get; set; }
    public bool isLoading { get; set; } = false;
    private bool rememberMe;
    private Modal modal;

    public ActivateSecret SecretModel = new ActivateSecret();
    private async Task SubmitSecret()
    {
        try
        {
            if (SecretModel.SecretKey != null)
            {
                SecretModel.UserName = Username;
                SecretModel.Password = Password;
                string jsonData = JsonSerializer.Serialize(SecretModel);
                var AddUser = await API.PostRequest($"Login/ActiveSecret", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    await Authenticate();
                }
                else
                {
                    toastService.ShowError($"Invalid Secret Key");
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }
    }
    private void OpenModal()
    {
        modal.Show();
    }
    private async void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Handle the Enter key press
            await Authenticate();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if remembered credentials exist
            var storedUsername = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username");
            var storedPassword = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "password");

            if (!string.IsNullOrEmpty(storedUsername) && !string.IsNullOrEmpty(storedPassword))
            {
                Username = storedUsername;
                Password = storedPassword;
                rememberMe = true;
                StateHasChanged();
            }

        }
    }

    private async Task Authenticate()
    {
        try
        {
            isLoading = true;
            var loginResponse = await API.GetRequest($"Login/Authentication/{Username}/{Password}");
            var userAccount = JsonSerializer.Deserialize<AuthenticationBearer>(loginResponse);

            switch (userAccount.remarks)
            {
                case "200":
                    await HandleSuccessfulLogin(userAccount);
                    break;
                case "User Secret 404":
                    HandleInvalidSecret();
                    break;
                case "User 404":
                    HandleInvalidCredentials();
                    break;
                case "Bearer 404":
                    HandleInvalidToken();
                    break;
                default:
                    HandleUnknownError();
                    break;
            }
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSuccessfulLogin(AuthenticationBearer userAccount)
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "BearerToken", userAccount.bearer);

        var customAuth = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuth.UpdateAuthenticationState(new UserSession
            {
                Username = Username,
                Role = userAccount.role,
            });

        if (rememberMe)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "username", Username);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "password", Password);
        }

        toastService.ShowSuccess("Login Success");
        Nav.NavigateTo("/", true);
    }

    private void HandleInvalidSecret()
    {
        toastService.ShowInfo("Your Secret key is expired or inactive please contact administrator");
        OpenModal();
    }

    private void HandleInvalidCredentials()
    {
        toastService.ShowError("Invalid Credentials");
    }

    private void HandleInvalidToken()
    {
        toastService.ShowError("Invalid Token please contact administrator");
    }

    private void HandleUnknownError()
    {
        toastService.ShowError("An unknown error occurred during authentication");
    }

    private void HandleException(Exception ex)
    {
        if (ex.Message.Contains("A second operation was started on this context"))
        {
            toastService.ShowInfo("Please wait we are logging you in...");
        }
        else
        {
            toastService.ShowError(ex.Message);
        }
    }

}
