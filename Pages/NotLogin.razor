@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@inject NavigationManager Nav
@using VehicleManagement.Models.General.Login
@using VehicleManagement.Service
@inject UserAccountService useraccountservice
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService toastService
@using VehicleManagement.Models.DB
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@inject IApiService API

<div class="login-screen" @onkeydown="HandleKeyPress">


    <div class="parent clearfix">
        <div class="bg-illustration">
            <img src="https://i.ibb.co/Pcg0Pk1/logo.png" alt="logo">

            <div class="burger-btn">
                <span></span>
                <span></span>
                <span></span>
            </div>

        </div>

        <div class="login">
            <div class="container">
                <h1>Login to access to<br />your account</h1>

                <div class="login-form">
                    <div class="form">
                        <input type="text" @bind="@Username" placeholder="Username">
                        <input type="password" @bind="@Password" placeholder="Password">

                        <div class="remember-form">
                            <input @bind-value="@rememberMe" checked="@rememberMe" type="checkbox">
                            <span>Remember me</span>
                        </div>
                        @*   <div class="forget-pass">
                        <a href="#">Forgot Password ?</a>
                        </div> *@

                        <button class="btn-auth" @onclick="Authenticate" @onkeydown="HandleKeyPress">LOG-IN</button>

                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<Modal @ref="modal" Title="Add Secret Key">
    <Body>
        <div class="col-md-12">
            <div class="card">

                <div class="card-body">

                    <div class="row">

                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="example-text-input" class="form-control-label">Secret Key</label>
                                <input type="text" placeholder="Secret Key" class="form-control">

                            </div>
                        </div>


                        <div class="col-md-12">
                            <div class="form-group" style="text-align:center;">
                                <button class="btn btn-primary btn-sm ms-auto">Submit</button>

                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </div>
    </Body>
</Modal>
<Loader isLoading="@isLoading" />

@code {
    public string Username { get; set; }
    public string Password { get; set; }
    public bool isLoading { get; set; } = false;
    private bool rememberMe;
    private Modal modal;
    private void OpenModal()
    {
        modal.Show();
    }
    private async void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Handle the Enter key press
            await Authenticate();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if remembered credentials exist
            var storedUsername = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username");
            var storedPassword = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "password");

            if (!string.IsNullOrEmpty(storedUsername) && !string.IsNullOrEmpty(storedPassword))
            {
                Username = storedUsername;
                Password = storedPassword;
                rememberMe = true;
                StateHasChanged();
            }

        }
    }

    private async Task Authenticate()
    {
        try
        {
            isLoading = true;
            var Login = await API.GetRequest($"Login/Authentication/{Username}/{Password}");
            var useraccount = JsonSerializer.Deserialize<GetLogin>(Login);
            // var useraccount = JsonSerializer.Deserialize<GetLogin>(API.GetRequest($"Login/Authentication/{Username}/{Password}"));
            //  var useraccount = await DbContext.tbluser.FirstOrDefaultAsync(p => p.username == Username && p.password == Password);
            if (useraccount.username != null)
            {
                var UserSecretRequest = await API.GetRequest($"Token/CheckSecretAvailability/{Username}/{Password}");
                var checkUserSecret = JsonSerializer.Deserialize<TokenGenerator>(UserSecretRequest);
                if (checkUserSecret.remarks == "200")
                {
                    string jsonData = JsonSerializer.Serialize(checkUserSecret);
                    var BearerRequest = await API.PostRequest($"Token/GenerateBearer", jsonData);
                    var bearerToken = JsonSerializer.Deserialize<string>(BearerRequest);

                    // Assuming you have the bearer token available as a string variable named bearerToken
                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "BearerToken", bearerToken);


                    var CustomAuth = (CustomAuthenticationStateProvider)AuthStateProvider;
                    await CustomAuth.UpdateAuthenticationState(new UserSession
                        {
                            Username = Username,
                            Role = useraccount.role,
                        });
                    var storedUsername = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username");
                    var storedPassword = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "password");

                    if (string.IsNullOrEmpty(storedUsername) && string.IsNullOrEmpty(storedPassword))
                    {
                        if (rememberMe)
                        {
                            // Store user credentials securely (e.g., using JavaScript interop)
                            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "username", Username);
                            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "password", Password);
                        }
                    }

                    toastService.ShowSuccess("Login Success");
                    isLoading = false;
                    Nav.NavigateTo("/", true);
                }
                else
                {
                    if (checkUserSecret.remarks.Contains("Expired"))
                    {
                        isLoading = false;
                        toastService.ShowInfo("Your Secret key is expired or inactive please contact administrator");
                        OpenModal();
                    }
                    
                   
                }

            }
            else
            {
                isLoading = false;
                toastService.ShowError("Invalid Credentials");
                StateHasChanged();


            }
        }
        catch (Exception ex)
        {

            if (ex.Message.Contains("A second operation was started on this context"))
            {
                toastService.ShowInfo("Please wait we are logging you in...");
            }
            else
            {
                toastService.ShowError(ex.Message);
            }
            isLoading = false;
        }

    }
}
