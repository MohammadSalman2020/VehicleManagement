@* @page "/shortageledger" *@
@using System.Text.Json
@using System.Web
@using System.Text
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Driver
@inject IToastService toastService
@inject IApiService API
@inject IUserClaimsService UserClaimsService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<Nav PageName="Invoice List" />

<div class="container-fluid py-4">
    <div class="row">
        <AuthorizeView>
            <Authorized>




                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">


                                <div class="col-md-4">

                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Search :</label>
                                        <input id="searchInput" type="text" class="form-control" required @oninput="SearchTable" />
                                    </div>
                                </div>
                                <AuthorizeView Policy="AvailMan">
                                    <Authorized Context="AdminSuper">


                                        <div class="row col-md-8" style="text-align:right;">
                                            <div class="col-6">
                                            </div>
                                            <div class="row col-6">
                                                @if (IsMerge)
                                                {

                                                    <div class="col-6">
                                                        <div class="form-group">
                                                            <button class="btn btn-danger btn-sm ms-auto" @onclick="Merge"> Merge</button>
                                                        </div>
                                                    </div>

                                                }
                                                <div class="col-6">
                                                    <div class="form-group">
                                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="EnableMerge">@(IsMerge == true ? "Disable Merge" : "Enable Merge")</button>
                                                    </div>
                                                </div>


                                            </div>


                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </div>

                        </div>
                    </div>
                </div>
                <br />
                <div class="row" style="margin-top:10px;">

                    <div class="col-md-12 card">
                        <div class="card-header pb-0">
                            <h6>Invoice</h6>
                        </div>
                        <div class="card-body px-0 pt-0 pb-2" style="overflow-x: auto;height: 500px;">
                            <div class="table-responsive p-0">


                                <table class="table align-items-center mb-0 table-test" id="invoiceTable">
                                    <thead>
                                        <tr>
                                            @if (IsMerge)
                                            {
                                                <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Select</th>
                                            }
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Invoice #</th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Vehicle</th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Date</th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">1st Driver Name</th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">2nd Driver Name</th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Type</th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Liters (ltr)</th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Status</th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"></th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"></th>
                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (!IsChildLoad)
                                        {
                                            @if (DriverShortages.Count > 0)
                                            {

                                                foreach (var item in DriverShortages)

                                                {

                                                    <tr class="tbl-accordion-header">
                                                        @if (IsMerge)
                                                        {
                                                            <td class="align-middle text-center">
                                                                <span class="text-secondary text-xs font-weight-bold">
                                                                    <input type="checkbox" @onchange="e => OnCheckboxChange(e, item.invoiceID, true, item.shortages.Select(p=>p.invoiceID).ToList())" />
                                                                </span>
                                                            </td>
                                                        }
                                                        <td class="align-middle text-center">
                                                            <div class="d-flex px-2 py-1">
                                                                <div>
                                                                    <img src="css/invoice-icon.png" class="avatar avatar-sm me-3" alt="user1">
                                                                </div>
                                                                <div class="d-flex flex-column justify-content-center" style="cursor:pointer;" onclick="toggleDiv('@item.invoiceNumber')">
                                                                    <h6 class="mb-0 text-sm">@item.invoiceNumber</h6>

                                                                </div>
                                                            </div>
                                                        </td>
                                                        <td class="align-middle text-center">
                                                            <span class="text-secondary text-xs font-weight-bold">@item.vehicleID</span>
                                                        </td>
                                                        <td class="align-middle text-center">
                                                            <span class="text-secondary text-xs font-weight-bold">@item.dated.ToString("MM-dd-yyyy")</span>
                                                        </td>
                                                        <td class="align-middle text-center">
                                                            <span class="text-secondary text-xs font-weight-bold">
                                                                @((item.driverName != null ? item.driverName : "No Attendance"))
                                                            </span>
                                                        </td>
                                                        <td class="align-middle text-center">
                                                            <span class="text-secondary text-xs font-weight-bold">
                                                                @((item.driver2Name != null ? item.driver2Name : "No Attendance"))
                                                            </span>
                                                        </td>
                                                        <td class="align-middle text-center text-sm">

                                                            <span class="badge badge-sm bg-gradient-success">@(item.invoiceType == "pk" ? "Primary" : "Secondary")</span>


                                                        </td>
                                                        <td class="align-middle text-center">
                                                            <span class="text-secondary text-xs font-weight-bold">@item.ltr </span>
                                                        </td>
                                                        <td class="align-middle text-center text-sm">
                                                            @if (item.status == "Short")
                                                            {
                                                                <span class="badge badge-sm bg-gradient-danger">@item.status</span>
                                                            }
                                                            else if (item.status == "Extra")
                                                            {
                                                                <span class="badge badge-sm bg-gradient-info">@item.status</span>
                                                            }
                                                            else
                                                            {
                                                                <span>@item.status</span>
                                                            }
                                                        </td>
                                                        <td class="align-middle">
                                                            <a @onclick="@(()=>ShowMessage(item.invoiceNumber))" class="text-secondary font-weight-bold text-xs cursor-pointer">
                                                                View
                                                            </a>
                                                        </td>
                                                        <td class="align-middle">
                                                            <a @onclick="@(()=>EditButton(item.invoiceNumber))" class="text-secondary font-weight-bold text-xs cursor-pointer">
                                                                Edit
                                                            </a>
                                                        </td>
                                                        <AuthorizeView Policy="AvailMan">
                                                            <Authorized Context="AdminSuper">
                                                                <td class="align-middle">
                                                                    <a @onclick="@(()=>AddCost(item.invoiceNumber))" class="text-secondary font-weight-bold text-xs cursor-pointer">
                                                                        AddCost
                                                                    </a>
                                                                </td>
                                                            </Authorized>
                                                        </AuthorizeView>
                                                    </tr>
                                                    @if (item.shortages.Count > 0)
                                                    {
                                                        <tr class="tbl-accordion-body" data-div-id="@item.invoiceNumber">

                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Invoice #</th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Vehicle</th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"> Date</th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">1st Driver Name</th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">2nd Driver Name</th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Type</th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"> Liters (ltr)</th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Status</th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"></th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"></th>
                                                            <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"></th>
                                                        </tr>
                                                        foreach (var shorts in item.shortages)
                                                        {
                                                            <tr class="tbl-accordion-body" data-div-id="@item.invoiceNumber">

                                                                <td class="align-middle text-center text-sm">
                                                                    <span class="text-secondary text-xs font-weight-bold">@shorts.invoiceNumber</span>
                                                                </td>
                                                                <td class="align-middle text-center text-sm">
                                                                    <span class="text-secondary text-xs font-weight-bold">@shorts.vehicleID</span>
                                                                </td>
                                                                <td class="align-middle text-center">
                                                                    <span class="text-secondary text-xs font-weight-bold">@shorts.dated.ToString("MM-dd-yyyy")</span>
                                                                </td>

                                                                <td class="align-middle text-center">
                                                                    <span class="text-secondary text-xs font-weight-bold">
                                                                        @((shorts.driverName != null ? shorts.driverName : "No Attendance") + " " + (shorts.driverID != null ? shorts.driverID : ""))
                                                                    </span>

                                                                </td>
                                                                <td class="align-middle text-center">
                                                                    <span class="text-secondary text-xs font-weight-bold">
                                                                        @((shorts.driver2Name != null ? shorts.driver2Name : "No Attendance") + " " + (shorts.driver2ID != null ? shorts.driver2ID : ""))
                                                                    </span>
                                                                </td>
                                                                <td class="align-middle text-center text-sm">

                                                                    <span class="badge badge-sm bg-gradient-warning">@(shorts.invoiceType == "pk" ? "Primary" : "Secondary")</span>


                                                                </td>
                                                                <td class="align-middle text-center">
                                                                    <span class="text-secondary text-xs font-weight-bold">@shorts.ltr</span>
                                                                </td>

                                                                <td class="align-middle text-center text-sm">
                                                                    @if (shorts.status == "Short")
                                                                    {
                                                                        <span class="badge badge-sm bg-gradient-danger">@shorts.status</span>
                                                                    }
                                                                    else if (shorts.status == "Extra")
                                                                    {
                                                                        <span class="badge badge-sm bg-gradient-info">@shorts.status</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span>@shorts.status</span>
                                                                    }
                                                                </td>
                                                                <td class="align-middle">
                                                                    <a @onclick="@(()=>ShowMessage(shorts.invoiceNumber))" class="text-secondary font-weight-bold text-xs cursor-pointer">
                                                                        View
                                                                    </a>
                                                                </td>
                                                                <td class="align-middle">
                                                                    <a class="text-secondary font-weight-bold text-xs cursor-pointer">

                                                                    </a>
                                                                </td>
                                                                <td class="align-middle">
                                                                    <a class="text-secondary font-weight-bold text-xs cursor-pointer">

                                                                    </a>
                                                                </td>
                                                            </tr>

                                                        }
                                                    }
                                                    else
                                                    {
                                                    <td class="tbl-accordion-body" data-div-id="@item.invoiceNumber" colspan="12">No Secondary For This Invoice</td>
                                                    }


                                                }
                                            }
                                        }
                                        else if (IsChildLoad)
                                        {
                                        <tr>
                                            <td colspan="12">
                                                <DataLoaderComponent IsLoading="@IsChildLoad" LoadingText="Loading Invoices..." />
                                            </td>
                                        </tr>
                                        }
                                    </tbody>
                                </table>


                            </div>
                        </div>
                    </div>

                </div>



            </Authorized>
            <NotAuthorized>
                @if (_isJsReady)
                {
                    <_403 />
                }
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {

    private bool _isJsReady = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Attempt a simple JavaScript call to check if JS is ready
                await JSRuntime.InvokeVoidAsync("console.log", "");
                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();
            }
            catch
            {
                // If JS isn't ready, handle it gracefully
                _isJsReady = false; // JavaScript is not yet ready
            }
        }
    }
    public bool IsChildLoad = false;
    public bool IsMerge = false;
    public List<DriverShortage> DriverShortages = new List<DriverShortage>();
    public Invoicing Invoices { get; set; }
    public List<Invoicing> Invoicing = new List<Invoicing>();
    public List<int> BusinessID = new List<int>();
    private List<int> selectedInvoiceIds = new List<int>();

    private void OnCheckboxChange(ChangeEventArgs e, int invoiceId, bool isPrimary, List<int> secondaryInvoiceIds)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            if (!selectedInvoiceIds.Contains(invoiceId))
            {
                selectedInvoiceIds.Add(invoiceId);
            }

            // If it's a primary invoice, also add its secondary invoices
            if (isPrimary && secondaryInvoiceIds != null)
            {
                foreach (var secInvoiceId in secondaryInvoiceIds)
                {
                    if (!selectedInvoiceIds.Contains(secInvoiceId))
                    {
                        selectedInvoiceIds.Add(secInvoiceId);
                    }
                }
            }
        }
        else
        {
            selectedInvoiceIds.Remove(invoiceId);

            // If it's a primary invoice, also remove its secondary invoices
            if (isPrimary && secondaryInvoiceIds != null)
            {
                foreach (var secInvoiceId in secondaryInvoiceIds)
                {
                    selectedInvoiceIds.Remove(secInvoiceId);
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            IsChildLoad = true;

            BusinessID = await UserClaimsService.GetBusinessIdsAsync();
            await GetShortages();
        }
        catch (Exception ex)
        {
            IsChildLoad = false;
        }
        IsChildLoad = false;
        StateHasChanged();
        await GetAllInvoices();
    }
    private async Task AddCost(string StoNo)
    {
        NavigationManager.NavigateTo($"/addcost?pk={StoNo}");
    }
    private async Task EnableMerge()
    {
        IsMerge = !IsMerge;
    }
    private async Task Merge()
    {
        try
        {
            if (selectedInvoiceIds.Count > 0)
            {


                IsMerge = false;

                IsChildLoad = true;

                JsonSerializerOptions options = new JsonSerializerOptions
                    {
                        WriteIndented = true,
                        ReferenceHandler = null
                    };
                string jsonData = JsonSerializer.Serialize(selectedInvoiceIds, options);
                var AddUser = await API.PostRequest($"Invoice/SaveMerge", jsonData);
                string Result = JsonSerializer.Deserialize<string>(AddUser);
                if (Result == "200")
                {
                    selectedInvoiceIds = new List<int>();
                    toastService.ShowSuccess("Merge Success");
                    StateHasChanged();
                }
                else if (Result == "202")
                {
                    toastService.ShowWarning("Some InvoiceID's are already MERGED");
                    selectedInvoiceIds = new List<int>();
                    StateHasChanged();
                }
            }
            else
            {
                toastService.ShowError("Please Select Any Record First");
            }
            IsChildLoad = false;
        }
        catch (Exception ex)
        {

        }


    }
    private async Task EditButton(string StoNo)
    {
        try
        {
            var Invoice = Invoicing.Where(p => p.Details.STONo == StoNo).FirstOrDefault();
            if (Invoice != null)
            {
                Invoice.IsFromDisplay = true;
                Invoice.IsView = "Update";
                string jsonString = JsonSerializer.Serialize(Invoice);
                string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));
                string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

                NavigationManager.NavigateTo($"/invoicepanel?Edit={encodedJson}");


            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex.Message}");
        }



    }
    public async Task ShowMessage(string STONo)
    {
        IsChildLoad = true;

        try
        {

            var Invoice = Invoicing.Where(p => p.Details.STONo == STONo).FirstOrDefault();
            if (Invoice != null)
            {
                string jsonString = JsonSerializer.Serialize(Invoice);
                string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));
                string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

                NavigationManager.NavigateTo($"/invoicedisplay?InvoiceID={encodedJson}");


            }
        }
        catch (Exception ex)
        {
            IsChildLoad = false;
            toastService.ShowError($"Error: {ex.Message}");
        }
        IsChildLoad = false;
    }
    private async Task SearchTable(ChangeEventArgs e)
    {
        IsChildLoad = true;
        string searchValue = e.Value.ToString();
        await JSRuntime.InvokeVoidAsync("filterTable", searchValue);
        IsChildLoad = true;
    }
    public async Task GetAllInvoices()
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Invoice/GetInvoicesList");
            if (AvailDrafts != "")
            {
                Invoicing = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Invoicing>>(AvailDrafts).OrderByDescending(p => p.Details.Date).ToList();
            }

        }
        catch (Exception ex)
        {

        }
    }
    public async Task GetShortages()
    {
        try
        {
            var AvailDrafts = await API.GetRequest($"Driver/GetDriverShortage");
            if (AvailDrafts != "")
            {
                var rec = JsonSerializer.Deserialize<List<DriverShortage>>(AvailDrafts);
                if (rec.Count > 0)
                {
                    DriverShortages = rec.Where(p => BusinessID.Contains(p.busid)).OrderByDescending(p => p.dated).ToList();
                }
            }

        }
        catch (Exception ex)
        {

        }
    }
}
