@page "/usermanagement"

@using System.Text.Json
@using System.Text.Json.Serialization
@using VehicleManagement.ApiService
@using VehicleManagement.Models.General.Login
@using VehicleManagement.Models.General.User_Management
@using VehicleManagement.Pages.Redirects

@inject IToastService toastService
@inject IApiService API

<AuthorizeView Roles="admin">
    <Authorized>
        <Nav PageName="User Management" />
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">

                        <div class="card-header pb-0">
                            <h6>Actions</h6>
                        </div>
                        <div class="card-header pb-0">
                            <div class="row col-md-12" style="text-align:center;">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="OpenPolicyModal">Add Policy</button>

                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="OpenUserModal">Add User</button>

                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="OpenSecretrModal">Add User Secret</button>

                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="OpenBusinessModal">Assign Business</button>

                                    </div>
                                </div>
                            </div>


                        </div>

                        <div class="card-body px-0 pt-0 pb-2">
                            <div class="table-responsive p-0">
                                <table class="table align-items-center mb-0">
                                    @if (AllUsers.Count > 0)
                                    {
                                        <thead>
                                            <tr>
                                                <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7">User ID</th>
                                                <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">User Name</th>
                                                <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Role</th>
                                                <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Businesses</th>
                                                <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Status</th>


                                            </tr>
                                        </thead>


                                        <tbody>
                                            @foreach (var item in AllUsers)
                                            {


                                                <tr>
                                                    <td class="align-middle text-center">
                                                        <div class="d-flex px-2 py-1">
                                                            <div>
                                                                <img src="css/userimg.png" class="avatar avatar-sm me-3" alt="user1">
                                                            </div>
                                                            <div class="d-flex flex-column justify-content-center">
                                                                <h6 class="mb-0 text-sm">@item.userID</h6>

                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td class="align-middle text-center">
                                                        <p class="text-xs font-weight-bold mb-0 text-center">@item.username</p>

                                                    </td>
                                                    <td class="align-middle text-center">
                                                        <span class="text-secondary text-xs font-weight-bold">@item.role</span>
                                                    </td>

                                                      <td class="align-middle text-center">
                                                        <span class="text-secondary text-xs font-weight-bold">@item.business</span>
                                                    </td>

                                                    <td class="align-middle text-center text-sm">
                                                        @if (@item.isActive)
                                                        {
                                                            <span class="badge badge-sm bg-gradient-success">@(item.isActive == true ? "Active" : "In-Active")</span>

                                                        }
                                                        else
                                                        {
                                                            <span class="badge badge-sm bg-gradient-danger">@(item.isActive == true ? "Active" : "In-Active")</span>

                                                        }
                                                    </td>
                                                    <td class="align-middle">
                                                        <a class="text-secondary font-weight-bold text-xs cursor-pointer" @onclick="@(() => EditUser(item.userID))" data-toggle="tooltip" data-original-title="Edit user">
                                                            Edit
                                                        </a>
                                                    </td>

                                                </tr>

                                            }
                                        </tbody>
                                    }

                                    else
                                    {

                                        <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading User Data..." />

                                    }
                                </table>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*Policy Modal *@
        <Modal @ref="PolicyModal" Title="Add Policy">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Policy Name</label>
                                        <input type="text" disabled="@IsPolicySubmitted" placeholder="Policy Name" @bind="Policy.PolicyName" class="form-control">

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Roles</label>

                                        <select class="form-control" @onchange="PolicyRoles" placeholder="Role" id="Role" name="Roles">
                                            @if (AllRoles.Count > 0)
                                            {
                                                <option value="0">Select One</option>
                                                foreach (var item in AllRoles)
                                                {
                                                    <option value="@item.roleID">@item.role</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value=""></option>
                                            }


                                        </select>
                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">

                                        @if (Policy.Roles.Count > 0)
                                        {
                                            <label class="form-control-label">@Policy.PolicyName Roles:</label>
                                            @foreach (var item in Policy.Roles)
                                            {
                                                <label>@item.Value.ToString().ToUpper()</label>
                                            }
                                        }



                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-primary btn-sm ms-auto" @onclick="SubmitRoles">Submit</button>
                                        &nbsp;
                                        @if (Policy.Roles.Count > 0)
                                        {
                                            <button class="btn btn-warning btn-sm ms-auto" @onclick="AddPolicy">Save @Policy.PolicyName To Database</button>
                                        }

                                    </div>


                                </div>
                                <div class="col-md-12">
                                    <div class="form-control">
                                        <label for="example-text-input" class="form-control-label">Roles Visibility</label>
                                        <input checked="@IsShowRoles" @onchange="ShowRoles" type="checkbox">
                                        <span class="form-control-label">@(IsShowRoles == true ? "Hide Roles" : "Show Roles")</span>
                                    </div>

                                </div>

                                <div class="card-body px-0 pt-0 pb-2" style="overflow-x: auto;height: 140px;">
                                    <div class="table-responsive p-0">
                                        <table class="table align-items-center mb-0">
                                            @if (AllPolicies.Count > 0)
                                            {
                                                <thead>
                                                    <tr>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7">Policy ID</th>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Policy Name</th>
                                                        @if (IsShowRoles)
                                                        {
                                                            <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Roles</th>
                                                        }





                                                    </tr>
                                                </thead>


                                                <tbody>
                                                    @foreach (var item in AllPolicies)
                                                    {
                                                        <tr>
                                                            <td class="align-middle text-center">
                                                                <div class="d-flex px-2 py-1">
                                                                    <div>
                                                                        <img src="css/Policy.png" class="avatar avatar-sm me-3" alt="user1">
                                                                    </div>
                                                                    <div class="d-flex flex-column justify-content-center">
                                                                        <h6 class="mb-0 text-sm">@item.policyID</h6>

                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0  text-center">@item.policyName</p>

                                                            </td>
                                                            @if (IsShowRoles)
                                                            {
                                                                <td class="align-middle text-center" style="text-align:center;">
                                                                    <p class="text-xs font-weight-bold mb-0  text-center">@item.roles</p>

                                                                </td>

                                                            }




                                                        </tr>

                                                    }
                                                </tbody>
                                            }
                                            else
                                            {

                                                <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading Policy Data..." />


                                            }


                                        </table>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

        @* End Policy Modal *@

        @*User Modal *@
        <Modal @ref="UserModal" Title="Add User">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Roles</label>

                                        <select class="form-control" placeholder="Role" id="Role" @onchange="UserRole" name="Roles">
                                            @if (AllRoles.Count > 0)
                                            {
                                                <option value="0">Select One</option>
                                                foreach (var item in AllRoles)
                                                {
                                                    <option value="@item.roleID" selected="@(item.roleID==User.RoleID ? "selected" : null)">@item.role</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="0"></option>
                                            }


                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">User Name</label>
                                        <input type="text" placeholder="User Name" @bind="User.Username" class="form-control">

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Password</label>
                                        <input type="password" placeholder="Password" @bind="User.Password" class="form-control">

                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="form-control">
                                            <input checked="@User.IsActive" @onchange="UserStatus" type="checkbox">
                                            <span class="form-control-label">Active</span>
                                        </div>

                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        @if (!IsUserEdit)
                                        {
                                            <button class="btn btn-primary btn-sm ms-auto" @onclick="AddUser">Add User</button>

                                        }
                                        else if (IsUserEdit)
                                        {
                                            <button class="btn btn-primary btn-sm ms-auto" @onclick="UpdateUser">Update User</button>
                                        }


                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

        @* End User Modal *@

        @*Secret Modal *@
        <Modal @ref="SecretModal" Title="Add User Secret Key">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">User</label>

                                        <select class="form-control" @onchange="SecretUser" placeholder="User" id="User" name="Users">
                                            <option value="0">Select One</option>
                                            @if (AllUsers.Count > 0)
                                            {
                                                @foreach (var item in AllUsers)
                                                {
                                                    <option value="@item.userID" selected="@(item.userID==Secret.UserID? "selected" : null)">@item.username</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value=""></option>
                                            }


                                        </select>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Secret Key</label>
                                        <input type="text" placeholder="Secret Key" @bind="Secret.SecretKey" class="form-control">

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Valid Till</label>
                                        <input type="date" placeholder="Valid Till" @bind="Secret.ValidTill" class="form-control">

                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <div class="form-control">
                                            <label for="example-text-input" class="form-control-label">Status</label>
                                            <input checked="@Secret.IsActive" @onchange="SecretStatus" type="checkbox">
                                            <span class="form-control-label">Active</span>
                                        </div>

                                    </div>
                                </div>

                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        @if (!IsSecretEdit)
                                        {
                                            <button class="btn btn-primary btn-sm ms-auto" @onclick="AddSecret">Submit</button>
                                        }
                                        else if (IsSecretEdit)
                                        {
                                            <button class="btn btn-warning btn-sm ms-auto" @onclick="UpdateSecret">Update</button>
                                        }


                                    </div>
                                </div>
                                <div class="card-body px-0 pt-0 pb-2" style="overflow-x: auto;height: 140px;">
                                    <div class="table-responsive p-0">
                                        <table class="table align-items-center mb-0">
                                            @if (AllSecrets.Count > 0)
                                            {
                                                <thead>
                                                    <tr>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7">Secret Key</th>
                                                        <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Status</th>
                                                        <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">User</th>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7">Role</th>
                                                        <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Valid Till</th>



                                                    </tr>
                                                </thead>


                                                <tbody>
                                                    @foreach (var item in AllSecrets)
                                                    {


                                                        <tr>
                                                            <td class="align-middle text-center">
                                                                <div class="d-flex px-2 py-1">
                                                                    <div>
                                                                        <img src="css/UserSecret.png" class="avatar avatar-sm me-3" alt="user1">
                                                                    </div>
                                                                    <div class="d-flex flex-column justify-content-center">
                                                                        <h6 class="mb-0 text-sm">@ShortenString(item.secretKey)</h6>

                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td class="align-middle text-center text-sm">
                                                                @if (item.isActive)
                                                                {
                                                                    <span class="badge badge-sm bg-gradient-success">@(item.isActive == true ? "Active" : "In-Active")</span>

                                                                }
                                                                else
                                                                {
                                                                    <span class="badge badge-sm bg-gradient-danger">@(item.isActive == true ? "Active" : "In-Active")</span>

                                                                }
                                                            </td>
                                                            <td class="align-middle text-center">
                                                                <span class="text-secondary text-xs font-weight-bold">@item.username</span>
                                                            </td>
                                                            <td class="align-middle text-center">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">@item.role</p>

                                                            </td>


                                                            <td class="align-middle text-center text-sm">
                                                                <span class="text-secondary text-xs font-weight-bold">@item.validTill.ToString("MM-dd-yyyy")</span>
                                                            </td>



                                                            <td class="align-middle">

                                                                <a class="text-secondary font-weight-bold text-xs cursor-pointer" @onclick="@(() => EditSecret(item.userSecretID))">
                                                                    Edit
                                                                </a>


                                                            </td>

                                                        </tr>
                                                    }
                                                </tbody>
                                            }

                                            else
                                            {
                                                <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading Secret Key Data..." />
                                            }


                                        </table>
                                    </div>


                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

        @* End Secret Modal *@



        @*Business Modal *@
        <Modal @ref="BusinessModal" Title="Assign User Business">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">User</label>

                                        <select class="form-control" @onchange="UserBusiness" placeholder="User" id="User" name="Users">
                                            <option value="0">Select One</option>
                                            @if (AllUsers.Count > 0)
                                            {
                                                @foreach (var item in AllUsers)
                                                {
                                                    <option value="@item.userID" selected="@(item.userID==addUserBusiness.UserID? "selected" : null)">@item.username</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value=""></option>
                                            }


                                        </select>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="example-text-input" class="form-control-label">Business</label>

                                        <select class="form-control" @onchange="AllBusinesses" placeholder="User" id="User" name="Users">
                                            <option value="0">Select One</option>
                                            @if (AllBusinessDrop.Count > 0)
                                            {
                                                @foreach (var item in AllBusinessDrop)
                                                {
                                                    <option value="@item.busID" selected="@(item.busID==addUserBusiness.BusID? "selected" : null)">@item.busDesc</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value=""></option>
                                            }


                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group" style="text-align:center;">
                                        @if (!IsUserBusinessEdit)
                                        {
                                            <button class="btn btn-primary btn-sm ms-auto" @onclick="AddUserBusiness">Submit</button>
                                        }
                                        else if (IsUserBusinessEdit)
                                        {
                                            <button class="btn btn-warning btn-sm ms-auto" @onclick="UpdateSecret">Remove</button>
                                        }


                                    </div>
                                </div>
                                <div class="card-body px-0 pt-0 pb-2" style="overflow-x: auto;height: 140px;">
                                    <div class="table-responsive p-0">
                                        <table class="table align-items-center mb-0">
                                            @if (AllBusiness.Count > 0)
                                            {
                                                <thead>
                                                    <tr>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7">Business ID</th>
                                                        <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7">Business Name</th>
                                                        <th class="text-center font-colors text-uppercase  text-xxs font-weight-bolder opacity-7"></th>


                                                    </tr>
                                                </thead>


                                                <tbody>
                                                    @foreach (var item in AllBusiness)
                                                    {


                                                        <tr>
                                                            <td class="align-middle text-center">
                                                                <div class="d-flex px-2 py-1">
                                                                    <div>
                                                                        <img src="css/UserSecret.png" class="avatar avatar-sm me-3" alt="user1">
                                                                    </div>
                                                                    <div class="d-flex flex-column justify-content-center">
                                                                        <h6 class="mb-0 text-sm">@item.busID</h6>

                                                                    </div>
                                                                </div>
                                                            </td>

                                                            <td class="align-middle text-center">
                                                                <span class="text-secondary text-xs font-weight-bold">@item.busDesc</span>
                                                            </td>



                                                            <td class="align-middle">

                                                                <a class="text-secondary font-weight-bold text-xs cursor-pointer" @onclick="@(() => EditUserBusiness(item.busID))">
                                                                    Remove
                                                                </a>


                                                            </td>

                                                        </tr>
                                                    }
                                                </tbody>
                                            }

                                            else
                                            {
                                                <DataLoaderComponent IsLoading="@IsChildLoading" LoadingText="Loading User Business Data..." />
                                            }


                                        </table>
                                    </div>


                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

        @* End Business Modal *@


        <Loader isLoading="@IsLoading" />

    </Authorized>

    <NotAuthorized>
        <_403 />
    </NotAuthorized>
</AuthorizeView>


@code {



    private Modal PolicyModal;

    private Modal UserModal;
    private Modal SecretModal;
    private Modal BusinessModal;
    private Users User = new Users();
    private Secret Secret = new Secret();
    private Policies Policy = new Policies();
    private AddUserBusiness addUserBusiness = new AddUserBusiness();

    public List<GetRoles> AllRoles = new List<GetRoles>();

    public List<UserList> AllUsers = new List<UserList>();
    public List<GetSecret> AllSecrets = new List<GetSecret>();
    public List<GetPolicy> AllPolicies = new List<GetPolicy>();
    public List<GetBusiness> AllBusiness = new List<GetBusiness>();
    public List<GetBusiness> AllBusinessDrop = new List<GetBusiness>();


    private bool IsUserEdit = false;
    private bool IsPolicySubmitted = false;
    private bool IsSecretEdit = false;
    private bool IsUserBusinessEdit = false;
    private bool IsLoading = false;
    private bool IsChildLoading = false;
    private bool IsShowRoles = false;
    private int UpdateUserID = 0;
    private int UpdateSecretID = 0;
    private string PoliciesRole;


    #region User

    private void OpenUserModal()
    {

        UserModal.Show();
    }

    private void UserStatus(ChangeEventArgs e)
    {
        User.IsActive = (bool)e.Value;
    }
    private void UserRole(ChangeEventArgs e)
    {
        string Val = e.Value.ToString();
        User.RoleID = int.Parse(Val);
    }



    public async Task GetAllUsers()
    {

        try
        {

            var Users = await API.GetRequest($"UserManagement/GetAllUser");
            if (Users != "")
            {

                AllUsers = JsonSerializer.Deserialize<List<UserList>>(Users).OrderByDescending(p => p.userID).ToList();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


    private async Task EditUser(int UserID)
    {

        User = new Users();
        var rec = AllUsers.Where(p => p.userID == UserID).FirstOrDefault();
        if (rec != null)
        {
            IsUserEdit = true;
            UpdateUserID = UserID;
            User.Username = rec.username;
            User.IsActive = rec.isActive;
            User.Password = rec.password;
            User.RoleID = rec.roleID;
            UserModal.Show();

        }

    }
    private async Task AddUser()
    {
        try
        {

            if (User != null && !isEmpty())
            {
                IsLoading = true;
                string jsonData = JsonSerializer.Serialize(User);
                var AddUser = await API.PostRequest($"UserManagement/AddUser", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    toastService.ShowSuccess($"User: {User.Username} Added Success");
                    User = new Users();
                    await GetAllUsers();
                    UserModal.CloseModal();


                }
                else
                {
                    UserModal.CloseModal();
                    toastService.ShowError($"Error while Adding to User");
                }

            }
            else
            {
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }

    private async Task UpdateUser()
    {
        try
        {
            if (User != null && !isEmpty())
            {
                IsLoading = true;
                string jsonData = JsonSerializer.Serialize(User);
                var AddUser = await API.PostRequest($"UserManagement/UpdateUser/{UpdateUserID}", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    toastService.ShowSuccess($"User: {User.Username} Update Success");
                    User = new Users();
                    UserModal.CloseModal();

                    await GetAllUsers();
                    IsUserEdit = false;
                    UpdateUserID = 0;
                }
                else
                {
                    UserModal.CloseModal();
                    toastService.ShowError($"Error while Updating");
                }
            }
            else
            {
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }

    public bool isEmpty()
    {
        if (User.Username != null && User.Password != null && User.RoleID != 0)
        {
            return false;
        }
        else
        {
            return true;
        }

    }
    #endregion

    #region Secret Key

    private void OpenSecretrModal()
    {
        SecretModal.Show();
    }

    private void SecretStatus(ChangeEventArgs e)
    {
        Secret.IsActive = (bool)e.Value;
    }


    private void SecretUser(ChangeEventArgs e)
    {
        string Val = e.Value.ToString();
        Secret.UserID = int.Parse(Val);
    }
    private string ShortenString(string input, int maxLength = 20)
    {
        if (input.Length <= maxLength)
        {
            return input;
        }
        else
        {
            return input.Substring(0, maxLength) + "...";
        }
    }


    public async Task GetAllSecrets()
    {
        try
        {
            var Secrets = await API.GetRequest($"UserManagement/GetAllSecret");
            if (Secrets != "")
            {

                AllSecrets = JsonSerializer.Deserialize<List<GetSecret>>(Secrets).OrderByDescending(p => p.userID).ToList();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }



    private async Task AddSecret()
    {
        try
        {
            if (Secret != null && !SecretisEmpty())
            {
                IsLoading = true;
                string jsonData = JsonSerializer.Serialize(Secret);
                var AddUser = await API.PostRequest($"UserManagement/AddSecret", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    Secret = new Secret();
                    await GetAllSecrets();
                    toastService.ShowSuccess($"Secret Key Added Success");

                }
                else
                {
                    SecretModal.CloseModal();
                    toastService.ShowError("Error While Adding Secret Key...");
                }

            }
            else
            {
                SecretModal.CloseModal();
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex}");
        }

        IsLoading = false;
    }
    private async Task EditSecret(int SecretID)
    {

        Secret = new Secret();
        var rec = AllSecrets.Where(p => p.userSecretID == SecretID).FirstOrDefault();
        if (rec != null)
        {
            IsSecretEdit = true;
            UpdateSecretID = SecretID;
            Secret.SecretKey = rec.secretKey;
            Secret.IsActive = rec.isActive;
            Secret.UserID = rec.userID;
            Secret.ValidTill = rec.validTill;
        }

    }


    public bool SecretisEmpty()
    {
        if (Secret.SecretKey != null && Secret.UserID != 0)
        {
            return false;
        }
        else
        {
            return true;
        }

    }


    private async Task UpdateSecret()
    {
        try
        {
            if (Secret != null && !SecretisEmpty())
            {
                IsLoading = true;
                string jsonData = JsonSerializer.Serialize(Secret);
                var AddUser = await API.PostRequest($"UserManagement/UpdateSecret/{UpdateSecretID}", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {
                    Secret = new Secret();
                    toastService.ShowSuccess($"Secret Update Success");
                    await GetAllSecrets();
                    IsSecretEdit = false;
                    UpdateSecretID = 0;
                    SecretModal.CloseModal();
                }
                else
                {
                    SecretModal.CloseModal();
                    toastService.ShowError($"Error");
                }
            }
            else
            {
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex}");
        }

        IsLoading = false;
    }

    #endregion

    #region Policy
    public async Task ShowRoles()
    {
        IsShowRoles = !IsShowRoles;


    }
    public bool PolicyisEmpty()
    {
        if (Policy.PolicyName != null && Policy.RoleID != 0 && Policy.Roles.Count > 0)
        {
            return false;
        }
        else
        {
            return true;
        }

    }

    private void OpenPolicyModal()
    {
        PolicyModal.Show();
    }


    public async Task GetAllPolicy()
    {
        try
        {
            var Policy = await API.GetRequest($"UserManagement/GetAllPolcies");
            if (Policy != "")
            {
                AllPolicies = JsonSerializer.Deserialize<List<GetPolicy>>(Policy).OrderByDescending(p => p.policyID).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void PolicyRoles(ChangeEventArgs e)
    {
        Policy.RoleID = int.Parse(e.Value.ToString());
    }

    private async Task SubmitRoles()
    {
        try
        {

            if (Policy.RoleID != 0 && Policy.PolicyName != null)
            {
                var rec = AllRoles.Where(p => p.roleID == Policy.RoleID).FirstOrDefault();
                var checkifexists = Policy.Roles.Where(p => p.Key == rec.roleID).FirstOrDefault();
                if (checkifexists.Key == 0)
                {
                    IsPolicySubmitted = true;
                    Policy.Roles.Add(Policy.RoleID, rec.role);

                }

            }
            else
            {
                toastService.ShowError($"Please select role or policy name first");
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex}");
        }


    }
    static string ConvertDictionaryToString(Dictionary<int, string> dictionary)
    {
        // Create a list to hold the string representations of each key-value pair
        List<string> keyValuePairs = new List<string>();

        // Iterate over each key-value pair in the dictionary
        foreach (var kvp in dictionary)
        {
            // Convert the key-value pair into a string and add it to the list
            keyValuePairs.Add($"{kvp.Key}");
        }

        // Join all the string representations with a comma and space
        return string.Join(", ", keyValuePairs);
    }

    private async Task AddPolicy()
    {
        try
        {
            if (Policy != null && !PolicyisEmpty())
            {
                IsLoading = true;
                AddPolicy obj = new AddPolicy();
                obj.PolicyName = Policy.PolicyName;
                obj.Roles = ConvertDictionaryToString(Policy.Roles);


                string jsonData = JsonSerializer.Serialize(obj);
                var AddUser = await API.PostRequest($"UserManagement/AddPolicy", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {

                    Policy.Roles.Clear();
                    Policy.PolicyName = string.Empty;
                    Policy.RoleID = 0;
                    obj = new AddPolicy();
                    IsPolicySubmitted = false;
                    await GetAllPolicy();

                }
                else
                {
                    PolicyModal.CloseModal();
                    toastService.ShowError("Error While Adding Policy...");
                }

            }
            else
            {
                PolicyModal.CloseModal();
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex}");
        }

        IsLoading = false;
    }



    #endregion

    #region Business

    private void OpenBusinessModal()
    {

        BusinessModal.Show();
    }
    private async Task EditUserBusiness(int busID)
    {

        var rec = AllBusiness.Where(p => p.busID == busID).FirstOrDefault();
        if (rec != null)
        {
            AllBusiness.Remove(rec);
            // await GetAllBusiness();
        }

    }




    public async Task GetUserBusiness(int UserID)
    {
        try
        {
            IsChildLoading = true;
            var Business = await API.GetRequest($"UserManagement/GetUserBusiness/{UserID}");
            if (Business != "")
            {
                AllBusiness = JsonSerializer.Deserialize<List<GetBusiness>>(Business);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        IsChildLoading = false;
    }

    public async Task GetAllBusiness()
    {
        try
        {
            var Business = await API.GetRequest($"UserManagement/GetAllBusiness");
            if (Business != "")
            {
                AllBusinessDrop = JsonSerializer.Deserialize<List<GetBusiness>>(Business);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task UserBusiness(ChangeEventArgs e)
    {
        if (e.Value != "0")
        {
            int Val = int.Parse(e.Value.ToString());
            await GetUserBusiness(Val);
            addUserBusiness.UserID = Val;

        }

    }


    private async Task AllBusinesses(ChangeEventArgs e)
    {
        if (e.Value != "0")
        {
            int Val = int.Parse(e.Value.ToString());
            addUserBusiness.BusID = Val;

        }

    }
    public bool UserBusinessisEmpty()
    {
        if (addUserBusiness.UserID != 0 && addUserBusiness.BusID != 0)
        {
            return false;
        }
        else
        {
            return true;
        }

    }
    private async Task AddUserBusiness()
    {
        try
        {
            if (addUserBusiness != null && !UserBusinessisEmpty())
            {
                IsLoading = true;



                string jsonData = JsonSerializer.Serialize(addUserBusiness);
                var AddUser = await API.PostRequest($"UserManagement/AddUserBusiness", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddUser);
                if (Result == 200)
                {

                    await GetUserBusiness(addUserBusiness.UserID);
                    await GetAllUsers();
                    toastService.ShowSuccess("User Business Added Success");
                    BusinessModal.CloseModal();


                }
                else if(Result == 504)
                {
                    toastService.ShowWarning("User with this business already exists");
                    BusinessModal.CloseModal();

                }

                else
                {
                   
                    toastService.ShowError("Error While Adding User Business...");
                    BusinessModal.CloseModal();

                }

            }
            else
            {
              
                toastService.ShowError("Empty Fields are not Allowed");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex}");
        }

        IsLoading = false;
    }


    #endregion


    public async Task GetAllRoles()
    {

        try
        {

            var Roles = await API.GetRequest($"UserManagement/GetRoles");
            if (Roles != "")
            {

                AllRoles = JsonSerializer.Deserialize<List<GetRoles>>(Roles);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }



    protected override async Task OnInitializedAsync()
    {
        IsChildLoading = true;
        try
        {


            Policy.Roles = new Dictionary<int, string>();

            await GetAllUsers();
            await GetAllRoles();
            await GetAllSecrets();
            await GetAllPolicy();
            await GetAllBusiness();

        }
        catch (Exception ex)
        {
            IsChildLoading = false;
            Console.WriteLine(ex.Message);
        }
        IsChildLoading = false;
    }



}
