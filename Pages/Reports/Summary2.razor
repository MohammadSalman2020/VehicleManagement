  @page "/Summary2"
@using Microsoft.Data.SqlClient
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@inject IUserClaimsService UserClaimsService
@inject IToastService toastService

  @inject IJSRuntime js
  @inject IConfiguration _configuration
<div class="container-fluid py-4">
    <div class="row">
        <AuthorizeView Roles="admin,FleetManager,SafetySupervisor">
            <Authorized Context="access">

                <div class="col-md-12">
                    <div class="">
                        <div class="">
                            <div class="row col-md-12">
                                <!-- Filter Button -->
                                <div class="row col-md-8">
                                    <div class="row col-md-12">
                                        <div class="col-md-3">
                                            <h4>OCR Records</h4>
                                        </div>

                                        <div class="col-md-3">
                                            <button id="loadDataButton" style="border: white;" class="btn-danger" onclick="fetchItems()">
                                                <span id="buttonText">Load Data</span>
                                                <span id="spinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display: none;"></span>
                                            </button>


                                        </div>

                                        <div class="col-md-3">
                                            <h6 id="totalRecords"></h6>
                                        </div>



                                    </div>




                                </div>


                                <div class="col-md-4" style="text-align:end;">
                                    <img style="cursor:pointer;" src="css/filter.png" onclick="toggleFilterPanel()" />
                                </div>


                            </div>
                            <div class="row">

                                <div class="col-md-2">
                                    <!-- Filter Button -->
                                    <!-- Slider Panel -->
                                    <div class="filter-slider-panel hidden-panel">
                                        <div class="filter-header">
                                            <h4>Export</h4>
                                            <button class="close-btn" onclick="toggleFilterPanel()">X</button>
                                        </div>
                                        <!-- Filter Options -->
                                        <div class="filter-content">
                                            <!-- Add your filter controls here -->
                                            <div class="col-md-12" style="text-align:center;">
                                                <div class="form-group">
                                                    <button style="border: white;" onclick="fetchItems()" class="btn-danger">Reset</button>
                                                </div>
                                            </div>
                                            <div class="row col-md-12">

                                                <div class="row filter-controls">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <input type="text" class="form-control" id="searchInput"  placeholder="STO/Vehicle/Business...">

                                                        </div>
                                                    </div>
                                                </div>


                                            </div>
                                            <!-- Date Filter -->
                                            <div class="row col-md-12">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label for="startDate">Select Month:</label>
                                                        <input type="month" class="form-control"  id="startDate">
                                                    </div>
                                                </div>

                                            </div>
                                            <div class="row col-md-12">
                                                <div class="col-md-12" style="text-align:center;">
                                                    <div class="form-group">
                                                        <button style="border: white;" class="btn-primary">Primary</button>
                                                        <button style="border: white;"  class="btn-primary">Secondary</button>
                                                     


                                                    </div>
                                                </div>
                                                <!-- Add more filter options as needed -->
                                            </div>
                                            <div class="row col-md-12">
                                                <div class="col-md-6" style="text-align:center;" title="Export All Data to Excel">
                                                    <div class="form-group">
                                                        <img style="cursor:pointer;" onclick="exportTableToExcelCon()" src="css/Excel Icon.png" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6" style="text-align:center;" title="Copy Shown Data">

                                                    <div class="form-group">
                                                        <img style="cursor:pointer;" src="css/clipboard.png" onclick="copyTableToClipboard()" />
                                                    </div>
                                                </div>
                                                <!-- Add more filter options as needed -->
                                            </div>

                                        </div>

                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>
                    <br />

                    <div class="row" style="margin-top:10px;">

                        <div class="col-md-12 ">

                            <div class="">
                                <div class="table-responsive p-0">


                                    <table class="" id="invoiceTables" style="width:100%">
                                        <thead style="    background: black;">
                                            <tr>

                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    STO No
                                                    <input type="text" class="filter-input" placeholder="Filter by STO No..." @bind="filters.stono" />
                                                </th>

                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Primary Reference
                                                    <input type="text" class="filter-input" placeholder="Filter by Primary Reference..." @bind="filters.primaryreference" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Business
                                                    <input type="text" class="filter-input" placeholder="Filter by Business..." @bind="filters.busdesc" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Vehicle
                                                    <input type="text" class="filter-input" placeholder="Filter by Vehicle..." @bind="filters.VehicleNo" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Date
                                                    <input type="text" class="filter-input" placeholder="Filter by Date..." @bind="filters.Date" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Location
                                                    <input type="text" class="filter-input" placeholder="Filter by Location..." @bind="filters.Location" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Type
                                                    <input type="text" class="filter-input" placeholder="Filter by Type..." @bind="filters.type" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Driver1 ID
                                                    <input type="text" class="filter-input" placeholder="Filter by Driver1 ID..." @bind="filters.DriverID1" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Driver1 Name
                                                    <input type="text" class="filter-input" placeholder="Filter by Driver1 Name..." @bind="filters.DriverName1" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Driver2 ID
                                                    <input type="text" class="filter-input" placeholder="Filter by Driver2 ID..." @bind="filters.DriverID2" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Driver2 Name
                                                    <input type="text" class="filter-input" placeholder="Filter by Driver2 Name..." @bind="filters.DriverName2" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Status
                                                    <input type="text" class="filter-input" placeholder="Filter by Status..." @bind="filters.ShortType" />
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Primary
                                                    @*                                                     <input type="text" class="filter-input" placeholder="Filter by Primary..." @bind="filters.Primary" />
                                                    *@
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Secondary
                                                    @*                                                     <input type="text" class="filter-input" placeholder="Filter by Secondary..." @bind="filters.Secondary" />
                                                    *@
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Total
                                                    @*                                                     <input type="text" class="filter-input" placeholder="Filter by Total..." @bind="filters.Total" />
                                                    *@
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Exempted
                                                    @*                                                     <input type="text" class="filter-input" placeholder="Filter by Exempted..." @bind="filters.Exempted" />
                                                    *@
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Shortage Deduction
                                                    @*                                                     <input type="text" class="filter-input" placeholder="Filter by Shortage Deduction..." @bind="filters.ShortageDeduction" />
                                                    *@
                                                </th>



                                            </tr>
                                            </thead>
                                        <tbody id="table-body" style="background:white;">
                                            <!-- Table rows will be populated here -->
                                        </tbody>
                                    </table>


                                </div>
                            </div>
                        </div>

                    </div>

                    @*       <div class="col-md-12">
                    <div class="">
                    <div class="pagination">
                    <button class="btn btn-primary" @onclick="GoToFirstPage" disabled="@(!CanGoToPreviousPage)"><i style="font-size:24px" class="fa fa-angle-double-left"></i></button>
                    <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)"><i style="font-size:24px" class="fa fa-angle-left"></i></button>
                    <span>Page @CurrentPage of @TotalPages</span>
                    <button class="btn btn-primary" @onclick="NextPage" disabled="@(!CanGoToNextPage)"><i style="font-size:24px" class="fa fa-angle-right"></i></button>
                    <button class="btn btn-primary" @onclick="GoToLastPage" disabled="@(!CanGoToNextPage)"><i style="font-size:24px" class="fa fa-angle-double-right"></i></button>
                    </div>

                    </div>
                    </div> *@


                </div>

            </Authorized>
            <NotAuthorized>
                @if (_isJsReady)
                {
                    <_403 />

                }
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
@code {
    private bool _isJsReady = false;
    public bool IsLoading { get; set; }
    //   private int TotalItems;
    //  private int CurrentPage = 1;
    // private int PageSize = 15; // Number of items per page
    //  private bool CanGoToPreviousPage => CurrentPage > 1;
    //  private bool CanGoToNextPage => CurrentPage < TotalPages;
    private List<DriverShortageSummaries> Items => FilteredItems
      .Where(i => (string.IsNullOrEmpty(filters.stono) || i.stono.Contains(filters.stono, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.busdesc) || i.busdesc.Contains(filters.busdesc, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.VehicleNo) || i.VehicleNo.Contains(filters.VehicleNo, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.Date) || i.Date.Contains(filters.Date, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.Location) || i.Location.Contains(filters.Location, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.type) || i.type.Contains(filters.type, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.DriverID1) || i.DriverID1.Contains(filters.DriverID1, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.DriverID2) || i.DriverID2.Contains(filters.DriverID2, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.DriverName1) || i.DriverName1.Contains(filters.DriverName1, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.DriverName2) || i.DriverName2.Contains(filters.DriverName2, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.primaryreference) || i.primaryreference.Contains(filters.primaryreference, StringComparison.OrdinalIgnoreCase))
                  && (string.IsNullOrEmpty(filters.ShortType) || i.ShortType.Contains(filters.ShortType, StringComparison.OrdinalIgnoreCase))
      // Handling numeric filters correctly by checking parsed value
      // && filters.Primary==0 || i.Primary == filters.Primary
      // && filters.Secondary == 0 || i.Secondary == filters.Secondary
      // && filters.Exempted==0  ||  i.Exempted == filters.Exempted
      // && filters.Total == 0 || i.Total == filters.Total
      // && filters.ShortageDeduction == 0 || i.ShortageDeduction == filters.ShortageDeduction
      )
      .ToList();
    private DriverShortageSummaries filters = new DriverShortageSummaries();
    public List<int> BusinessID = new List<int>();
    private string searchTerm;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool isPanelVisible = false;
    private string selectedCategory;

    // Toggle the filter panel visibility
    private void ToggleFilterPanel()
    {
        isPanelVisible = !isPanelVisible;
    }

    // CSS style based on panel visibility
    private string PanelStyle => isPanelVisible ? "transform: translateX(0);" : "transform: translateX(100%);";

    public List<DriverShortageSummaries> obj = new List<DriverShortageSummaries>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Attempt a simple JavaScript call to check if JS is ready
                await js.InvokeVoidAsync("addKeyboardShortcut");

                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();
            }
            catch
            {
                // If JS isn't ready, handle it gracefully
                _isJsReady = false; // JavaScript is not yet ready
            }
        }
    }
    private List<DriverShortageSummaries> FilteredItems;

    private async void SearchRecords(string searchCriteria)
    {
        searchCriteria = searchCriteria.Replace(" ", string.Empty).Trim();
        if (string.IsNullOrEmpty(searchCriteria))
        {
            // If no search criteria, reset to all items
            FilteredItems = obj;

        }
        else
        {
            // Example search logic based on `primaryreference` and `VehicleNo` fields
            FilteredItems = obj.Where(item =>
                (item.stono != null && item.stono.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase)) ||
                (item.VehicleNo != null && item.VehicleNo.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                || (item.DriverID1 != null && item.DriverID1.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                || (item.DriverID2 != null && item.DriverID2.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                  || (item.DriverName1 != null && item.DriverName1.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                    || (item.DriverName2 != null && item.DriverName2.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                     || (item.primaryreference != null && item.primaryreference.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                     || (item.busdesc != null && item.busdesc.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }

        // After filtering, reset the pagination
        // CurrentPage = 1;
        //   await LoadData();
    }
    private async Task FilterByDateRange()
    {
        DateTime startDateTime;
        DateTime endDateTime;
        bool isStartDateValid = DateTime.TryParse(startDate?.ToString(), out startDateTime);
        bool isEndDateValid = DateTime.TryParse(endDate?.ToString(), out endDateTime);
        if (!isEndDateValid || !isStartDateValid)
        {
            toastService.ShowError("Please Select Valid Date");
            return;
        }
        FilteredItems = obj.Where(item =>
        {
            DateTime itemDate;
            bool isItemDateValid = DateTime.TryParse(item.Date, out itemDate);

            if (!isItemDateValid)
            {
                return false; // Skip items with invalid date formats
            }

            bool isAfterStartDate = !isStartDateValid || itemDate >= startDateTime;
            bool isBeforeEndDate = !isEndDateValid || itemDate <= endDateTime;

            return isAfterStartDate && isBeforeEndDate;
        }).ToList();

        // CurrentPage = 1;
        //  await LoadData();

    }
    private async Task Reset()
    {
        startDate = null;
        endDate = null;
        FilteredItems = obj;

        //  CurrentPage = 1;
        //  await LoadData();

    }
    private async Task ExportToExcel()
    {
        // Convert the list to JSON
        var jsonData = System.Text.Json.JsonSerializer.Serialize(FilteredItems);

        // Call the JavaScript function
        await js.InvokeVoidAsync("exportTableToExcel", jsonData);
    }

    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;
        try
        {

            // BusinessID = await UserClaimsService.GetBusinessIdsAsync();

            // await LoadShortagereport();
            // FilteredItems = obj;

            //  await LoadData();

        }
        catch (Exception ex)
        {
            IsLoading = false;
        }
        IsLoading = false;
    }

    public async Task LoadShortagereport()
    {
        try
        {
            string query = $@"
SELECT * FROM vw_DriverShortage ORDER BY primaryreference, type, Date, stono;";
            var connectionString = _configuration.GetConnectionString("Con");

            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();

                using (var command = new SqlCommand(query, connection))
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        DriverShortageSummaries dv = new DriverShortageSummaries();
                        dv = new DriverShortageSummaries
                            {
                                Date = reader.GetString(reader.GetOrdinal("Date")),

                                stono = reader.IsDBNull(reader.GetOrdinal("stono")) ? "" : reader.GetString(reader.GetOrdinal("stono")),
                                DriverID2 = reader.IsDBNull(reader.GetOrdinal("DriverID2")) ? "" : reader.GetString(reader.GetOrdinal("DriverID2")),
                                DriverID1 = reader.IsDBNull(reader.GetOrdinal("DriverID1")) ? "" : reader.GetString(reader.GetOrdinal("DriverID1")),
                                DriverName1 = reader.IsDBNull(reader.GetOrdinal("DriverName1")) ? "" : reader.GetString(reader.GetOrdinal("DriverName1")),
                                DriverName2 = reader.IsDBNull(reader.GetOrdinal("DriverName2")) ? "" : reader.GetString(reader.GetOrdinal("DriverName2")),
                                Exempted = reader.IsDBNull(reader.GetOrdinal("Exempted")) ? 0 : reader.GetInt32(reader.GetOrdinal("Exempted")),
                                scCount = reader.IsDBNull(reader.GetOrdinal("scCount")) ? 0 : reader.GetInt32(reader.GetOrdinal("scCount")),
                                businessID = reader.IsDBNull(reader.GetOrdinal("businessID")) ? 13 : reader.GetInt32(reader.GetOrdinal("businessID")),

                                busdesc = reader.IsDBNull(reader.GetOrdinal("busdesc")) ? "Euro" : reader.GetString(reader.GetOrdinal("busdesc")),
                                Location = reader.IsDBNull(reader.GetOrdinal("Location")) ? "" : reader.GetString(reader.GetOrdinal("Location")),
                                Primary = reader.IsDBNull(reader.GetOrdinal("Primary1")) ? 0 : reader.GetDouble(reader.GetOrdinal("Primary1")),

                                primaryreference = reader.IsDBNull(reader.GetOrdinal("primaryreference")) ? "" : reader.GetString(reader.GetOrdinal("primaryreference")),
                                Secondary = reader.IsDBNull(reader.GetOrdinal("Secondary1")) ? 0 : reader.GetDouble(reader.GetOrdinal("Secondary1")),
                                ShortageDeduction = reader.IsDBNull(reader.GetOrdinal("ShortageDeduction")) ? 0 : reader.GetDouble(reader.GetOrdinal("ShortageDeduction")),

                                Total = reader.IsDBNull(reader.GetOrdinal("Total1")) ? 0 : reader.GetDouble(reader.GetOrdinal("Total1")),

                                type = reader.IsDBNull(reader.GetOrdinal("type")) ? "" : reader.GetString(reader.GetOrdinal("type")),
                                VehicleNo = reader.IsDBNull(reader.GetOrdinal("VehicleNo")) ? "" : reader.GetString(reader.GetOrdinal("VehicleNo")),
                                ShortType = reader.IsDBNull(reader.GetOrdinal("ShortType")) ? "" : reader.GetString(reader.GetOrdinal("ShortType")),

                            };
                        obj.Add(dv);




                    }
                }
            }

            obj = obj.Where(p => BusinessID.Contains(p.businessID)).ToList();

        }
        catch (Exception ex)
        {

        }
    }




}
