  @page "/OCRExtracted"
@using Microsoft.Data.SqlClient
@using System.Web
@using System.Text
@using System.Text.Json
@using System.Data
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@inject IUserClaimsService UserClaimsService
@inject IToastService toastService
@inject IApiService API
  @inject IJSRuntime js
  @inject IConfiguration _configuration

<div class="container-fluid py-4">
    <div class="row">
        <AuthorizeView Roles="admin,FleetManager,SafetySupervisor">
            <Authorized Context="access">

                <div class="col-md-12">
                    <div class="">

                        <div class="">
                            <div class="row col-md-12">
                                <!-- Filter Button -->
                                <div class="row col-md-8">
                                    <div class="row col-md-12">
                                        <div class="col-md-3">
                                            <h4>OCR Records</h4>
                                        </div>

                                        <div class="col-md-3">
                                            <button style="border: white;" class="btn-danger" @onclick="LoadData">
                                                @if (IsLoading)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                }

                                                @(IsLoading ? "Loading Data.." : "Load Data")
                                            </button>

                                        </div>
                                        @if (FilteredItems != null)
                                        {
                                            <div class="col-md-3">
                                                <h6>@FilteredItems.Count.ToString() -Records</h6>
                                            </div>
                                        }
                                        @if (ShowCheckbox)
                                        {
                                            <div class="col-md-3">
                                                <button style="position: fixed;top: 77px;z-index: 9999;border: white;" class="btn-success" @onclick="UpdateInvoiceGenerated">

                                                    @if (MarkLoader)
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                    }

                                                    @(MarkLoader ? MarkingText : " Mark as accurate")
                                                </button>

                                            </div>
                                        }
                                    </div>




                                </div>

                                @if (FilteredItems != null)
                                {
                                    <div class="col-md-4" style="text-align:end;">
                                        <img style="cursor:pointer;" src="css/filter.png" @onclick="ToggleFilterPanel" />
                                    </div>
                                }

                            </div>
                            <div class="row">

                                <div class="col-md-2">
                                    <!-- Filter Button -->
                                    <!-- Slider Panel -->
                                    <div class="filter-slider-panel" style="@PanelStyle">
                                        <div class="filter-header">
                                            <h4>Export</h4>
                                            <button class="close-btn" @onclick="ToggleFilterPanel">X</button>
                                        </div>
                                        <!-- Filter Options -->
                                        <div class="filter-content">
                                            <!-- Add your filter controls here -->
                                            <div class="col-md-12" style="text-align:center;">
                                                <div class="form-group">
                                                    <button style="border: white;" class="btn-danger" @onclick="Reset">Reset</button>
                                                </div>
                                            </div>
                                            <div class="row col-md-12">

                                                <div class="row filter-controls">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <input type="text" @bind="@searchTerm" class="form-control" id="searchInput" placeholder="STO/Vehicle/Business...">

                                                        </div>
                                                    </div>
                                                </div>


                                            </div>
                                            <!-- Date Filter -->
                                            <div class="row col-md-12">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label for="startDate">Select Month:</label>
                                                        <input type="month" @bind="@startDate" class="form-control" id="startDate">
                                                    </div>
                                                </div>
                                                <div class="col-md-12" style="text-align:center;">
                                                    <div class="form-group">
                                                        <button style="border: white;" class="btn-primary" @onclick="@(() => SearchRecords(searchTerm))">Search</button>


                                                    </div>
                                                </div>

                                            </div>
                                            <div class="row col-md-12">
                                                <div class="col-md-12" style="text-align:center;">
                                                    <div class="form-group">
                                                        <button style="border: white;" class="btn-primary" @onclick="@(()=>SearchInComplete(true))">Primary</button>
                                                        <button style="border: white;" class="btn-primary" @onclick="@(()=>SearchInComplete(false))">Secondary</button>


                                                    </div>
                                                </div>
                                                <!-- Add more filter options as needed -->
                                            </div>
                                            <div class="row col-md-12">
                                                <div class="col-md-6" style="text-align:center;" title="Export All Data to Excel">
                                                    <div class="form-group">
                                                        <img style="cursor:pointer;" src="css/Excel Icon.png" @onclick="ExportToExcel" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6" style="text-align:center;" title="Copy Shown Data">

                                                    <div class="form-group">
                                                        <img style="cursor:pointer;" src="css/clipboard.png" onclick="copyTableToClipboard()" />
                                                    </div>
                                                </div>
                                                <!-- Add more filter options as needed -->
                                            </div>

                                        </div>

                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>
                    <br />

                    <div class="row" style="margin-top:10px;">

                        <div class="col-md-12 ">

                            <div class="">
                                <div class="table-responsive p-0">


                                    <table class="" id="invoiceTables" style="width:100%">
                                        <thead style="    background: black;">
                                            <tr>

                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    STO No
                                                </th>

                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Vehicle No
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Business
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Invoice Date
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Shipping Location
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Receiving Location
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Invoice Type
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Product
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Image
                                                </th>

                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">

                                                </th>




                                            </tr>
                                        </thead>
                                        <tbody style="   background: white;">
                                            @if (FilteredItems != null)
                                            {
                                                @if (FilteredItems.Count > 0)
                                                {
                                                    foreach (var item in FilteredItems.OrderByDescending(p => p.InvoiceDate))
                                                    {

                                                        <tr class="tbl-accordion-header" ondblclick="@(() => ToggleCheckboxDisplay())" style=@GetColorCode(item.isInvoiceGenerated,item.InvoiceType)>
                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                @if (item.InvoiceType == "sc" && ShowCheckbox && !item.isInvoiceGenerated)
                                                                {
                                                                    <input type="checkbox" @onchange="@(e => OnCheckboxChanged(item, e))" />
                                                                }
                                                            </td>

                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.STO</span>
                                                            </td>

                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.Vehicle</span>
                                                            </td>

                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.BusinessName?.ToUpper()</span>
                                                            </td>
                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.InvoiceDate?.ToString("dd-MMMM-yy")</span>
                                                            </td>
                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">
                                                                    @TruncateString(@item.ShippingLocation)
                                                                </span>
                                                            </td>

                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">
                                                                    @TruncateString(@item.ReceivingLocation)
                                                                </span>
                                                            </td>
                                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@(item.InvoiceType == "pk" ? "Primary" : item.InvoiceType == "Not Defined" ? "Unidentified" : "Secondary")</span>
                                                            </td>

                                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.Product</span>
                                                            </td>
                                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                <a class="text-secondary text-xs font-weight-bold" style="@(item.isInvoiceGenerated?"color:blue !important;":"") ;cursor:pointer" @onclick="@(()=>ShowMessage2(item))">View</a>
                                                            </td>

                                                            @if (item.InvoiceType == "pk")
                                                            {
                                                                <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                    <a class="text-secondary text-xs font-weight-bold" style="@(item.isInvoiceGenerated?"color:blue !important;":"") ;cursor:pointer;" @onclick="@(()=>AddSecondary(item))">
                                                                        Add Secondary


                                                                    </a>
                                                                </td>
                                                            }
                                                            else
                                                            {
                                                                <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                </td>
                                                            }







                                                        </tr>

                                                    }
                                                }
                                            }

                                            @*    @if (!IsLoading)
                                            {
                                            @if (FilteredItems != null)
                                            {
                                            @if (FilteredItems.Count > 0)
                                            {
                                            foreach (var item in FilteredItems.OrderByDescending(p => p.InvoiceDate))
                                            {

                                            <tr class="tbl-accordion-header" ondblclick="@(() => ToggleCheckboxDisplay())" style=@GetColorCode(item.isInvoiceGenerated,item.InvoiceType)>
                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                            @if (item.InvoiceType == "sc" && ShowCheckbox && !item.isInvoiceGenerated)
                                            {
                                            <input type="checkbox" @onchange="@(e => OnCheckboxChanged(item, e))" />
                                            }
                                            </td>

                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                            <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.STO</span>
                                            </td>

                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                            <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.Vehicle</span>
                                            </td>

                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                            <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.BusinessName?.ToUpper()</span>
                                            </td>
                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                            <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.InvoiceDate?.ToString("dd-MMMM-yy")</span>
                                            </td>
                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                            <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">
                                            @TruncateString(@item.ShippingLocation)
                                            </span>
                                            </td>

                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                            <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">
                                            @TruncateString(@item.ReceivingLocation)
                                            </span>
                                            </td>
                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                            <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@(item.InvoiceType == "pk" ? "Primary" : item.InvoiceType == "Not Defined" ? "Unidentified" : "Secondary")</span>
                                            </td>

                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                            <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.Product</span>
                                            </td>
                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                            <a class="text-secondary text-xs font-weight-bold" style="@(item.isInvoiceGenerated?"color:blue !important":"") ;cursor:pointer" @onclick="@(()=>ShowMessage2(item))">View</a>
                                            </td>

                                            @if (item.InvoiceType == "pk")
                                            {
                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                            <a class="text-secondary text-xs font-weight-bold" style="@(item.isInvoiceGenerated?"color:blue !important":"") ;cursor:pointer" @onclick="@(()=>AddSecondary(item))">Add Secondary</a>
                                            </td>
                                            }
                                            else
                                            {
                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                            </td>
                                            }







                                            </tr>

                                            }
                                            }
                                            }
                                            } *@
                                            @*  else if (IsLoading)
                                            {
                                            <tr>
                                            <td colspan="18">
                                            <DataLoaderComponent IsLoading="@IsLoading" LoadingText="Loading Data..." />
                                            </td>
                                            </tr>
                                            } *@
                                        </tbody>
                                    </table>


                                </div>
                            </div>
                        </div>

                    </div>

                    @*           <div class="col-md-12">
                    <div class="">
                    <div class="pagination">
                    <button class="btn btn-primary" @onclick="GoToFirstPage" disabled="@(!CanGoToPreviousPage)"><i style="font-size:24px" class="fa fa-angle-double-left"></i></button>
                    <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)"><i style="font-size:24px" class="fa fa-angle-left"></i></button>
                    <span>Page @CurrentPage of @TotalPages</span>
                    <button class="btn btn-primary" @onclick="NextPage" disabled="@(!CanGoToNextPage)"><i style="font-size:24px" class="fa fa-angle-right"></i></button>
                    <button class="btn btn-primary" @onclick="GoToLastPage" disabled="@(!CanGoToNextPage)"><i style="font-size:24px" class="fa fa-angle-double-right"></i></button>
                    </div>

                    </div>
                    </div> *@


                </div>


            </Authorized>
            <NotAuthorized>
                @if (_isJsReady)
                {
                    <_403 />

                }
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
@code {
    private bool _isJsReady = false;
    public bool IsLoading { get; set; }
    // private int TotalItems;
    // private int CurrentPage = 1;
    // private int PageSize = 15; // Number of items per page
    // private bool CanGoToPreviousPage => CurrentPage > 1;
    // private bool CanGoToNextPage => CurrentPage < TotalPages;

    public List<int> BusinessID = new List<int>();
    private string searchTerm;
    private string? InvoiceNumber;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool isPanelVisible = false;
    private bool isEdited = false;
    private bool RefreshLoader = false;
    private bool MarkLoader = false;
    private bool ShowCheckbox = false;
    private string selectedCategory;
    private string MarkingText;
    public Invoicing Invoicing = new Invoicing();
    private string PanelStyle => isPanelVisible ? "transform: translateX(0);" : "transform: translateX(100%);";
    private List<OCRData> selectedItems = new List<OCRData>(); // Replace ItemType with your item type

    private void ToggleCheckboxDisplay()
    {
        ShowCheckbox = !ShowCheckbox; // Assuming 'ShowCheckbox' is a property in your model to track checkbox visibility
        if (!ShowCheckbox) selectedItems = new List<OCRData>();
    }

    private void OnCheckboxChanged(OCRData item, ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            selectedItems.Add(item); // Add item to list when checkbox is checked
        }
        else
        {
            selectedItems.Remove(item); // Remove item if checkbox is unchecked
        }
    }
    public async void UpdateInvoiceGenerated()
    {
        MarkLoader = true;
        MarkingText = "Marking Data...";
        string connectionString = _configuration.GetConnectionString("Con");
        string query = "UPDATE tblExtracted_Data SET isInvoiceGenerated = @IsInvoiceGenerated WHERE ExtractedID = @ExtractedID";

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                command.Parameters.Add("@IsInvoiceGenerated", System.Data.SqlDbType.Bit).Value = true;
                command.Parameters.Add("@ExtractedID", System.Data.SqlDbType.Int);

                foreach (var id in selectedItems)
                {
                    command.Parameters["@ExtractedID"].Value = id.OCRID;
                    command.ExecuteNonQuery();
                }
            }
        }

        MarkingText = "Data Marked Refreshing list...";
        await LoadData();
        FilteredItems = new List<OCRData>();
        FilteredItems = obj;
        MarkLoader = false;
        ShowCheckbox = false;
        selectedItems = new List<OCRData>();
        StateHasChanged();

    }
    private void ToggleFilterPanel()
    {
        isPanelVisible = !isPanelVisible;
    }
    private async Task ExportToExcel()
    {
        // Convert the list to JSON
        var jsonData = System.Text.Json.JsonSerializer.Serialize(FilteredItems);

        // Call the JavaScript function
        await js.InvokeVoidAsync("exportTableToExcel", jsonData);
    }
    public async Task<Invoicing> GetAllInvoices(string InvoiceID)
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Invoice/GetInvoiceByID/{InvoiceID}");
            if (AvailDrafts != "")
            {
                return Invoicing = Newtonsoft.Json.JsonConvert.DeserializeObject<Invoicing>(AvailDrafts);
            }
            else
            {
                return null;
            }

        }
        catch (Exception ex)
        {
            return null;
        }
    }
    public List<OCRData> obj = new List<OCRData>();


    public string GetColorCode(bool isInvoiceGenerated, string Type)
    {
        string Color = "";

        if (isInvoiceGenerated && Type == "pk")
        {
            Color = "background:#DCDCDC";
        }
        else
        if (isInvoiceGenerated && Type == "sc")
        {
            Color = "background:#caf588;";
        }

        return Color;
    }



    public async Task ShowMessage2(OCRData objs)
    {
        try
        {



            string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
            string newLocation = objs.FileLocation.Replace(@"C:\ScannedDocs\", urlPrefix);
            if (objs.InvoiceType == "pk")
            {
                if (objs.isInvoiceGenerated)
                {
                    var Invoices = await GetAllInvoices(objs.STO);
                    if (Invoices != null)
                    {
                        Invoices.IsFromDisplay = true;
                        Invoices.IsView = "Update";
                        string jsonString = JsonSerializer.Serialize(Invoices);
                        string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));
                        string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

                        // NavigationManager.NavigateTo($"/Invoice?Edit={encodedJson}");
                        await js.InvokeVoidAsync("openInNewTab2", $"/invoice?Edit={encodedJson}");
                        //  var url = $"/invoicepanel?Edit={encodedJson}";
                        // await JSRuntime.InvokeVoidAsync("openInNewTab", url);
                    }

                    return;
                }

                Invoicing Invoice = new Invoicing();
                Invoice.Details.STONo = objs.STO;
                Invoice.Details.Product = objs.Product;
                Invoice.InvoiceFilePath = newLocation;
                Invoice.Details.TankLorryNO = objs.Vehicle;
                Invoice.Details.Date = objs.InvoiceDate ?? DateTime.MinValue;
                Invoice.Details.ReceivingLocation = TruncateString(objs.ReceivingLocation);
                Invoice.Details.SupplyPoint = TruncateString(objs.ShippingLocation);
                Invoice.Details.Contractor = "Shakoor & Co.";
                Invoice.IsOCR = true;
                Invoice.ExtarctedID = objs.OCRID;

                if (Invoice.Details != null)
                {
                    string jsonString = JsonSerializer.Serialize(Invoice);
                    string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));
                    string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

                    // NavigationManager.NavigateTo($"/Invoice?Edit={encodedJson}");
                    await js.InvokeVoidAsync("openInNewTab2", $"/invoice?OCR={encodedJson}");
                    //  var url = $"/invoicepanel?Edit={encodedJson}";
                    // await JSRuntime.InvokeVoidAsync("openInNewTab", url);
                }
            }
            else if (objs.InvoiceType == "sc")
            {
                await js.InvokeVoidAsync("openInNewTab2", $"/insertSec?View={objs.OCRID}");
            }
            else /* if (objs.InvoiceType=="sc") */
            {
                await js.InvokeVoidAsync("openInNewTab2", $"{newLocation}");
            }


            isEdited = true;
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex.Message}");
        }


    }
    public async Task<int> GetTotalChamberQtyAsync(string vehicleID)
    {
        int totalChamberQty = 0;
        string connectionString = _configuration.GetConnectionString("Con"); // Replace with your actual connection string

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            using (SqlCommand command = new SqlCommand("GetTotalChamberQtyByVehicleID", connection))
            {
                command.CommandType = CommandType.StoredProcedure;

                // Add the VehicleID parameter
                command.Parameters.AddWithValue("@VehicleID", vehicleID);

                // Define the output parameter
                SqlParameter outputParameter = new SqlParameter
                    {
                        ParameterName = "@TotalChamberQty",
                        SqlDbType = SqlDbType.Int,
                        Direction = ParameterDirection.Output
                    };
                command.Parameters.Add(outputParameter);

                // Execute the stored procedure
                await command.ExecuteNonQueryAsync();

                // Retrieve the output value
                totalChamberQty = (int)outputParameter.Value;
            }
        }

        return totalChamberQty;
    }
    public async Task<List<ChamberDto>> GetChambersByExtractedId(int extractedId, string STO)
    {
        var chambers = new List<ChamberDto>();
        string connectionString = _configuration.GetConnectionString("Con");

        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            using (var command = new SqlCommand("usp_GetChambersByExtractedIdAndSTO", connection))
            {
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("@ExtractedID", extractedId);
                command.Parameters.AddWithValue("@STONo", STO);

                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        var chamber = new ChamberDto
                            {
                                ExtractedID = extractedId,
                                ChamberNo = reader.IsDBNull(0) ? 0 : reader.GetInt32(0),
                                ChamberQtyR = reader.IsDBNull(1) ? 0 : reader.GetInt32(1),
                                ChamberQtyS = reader.IsDBNull(2) ? 0 : reader.GetInt32(2),
                                ChamberDipR = reader.IsDBNull(3) ? 0 : reader.GetInt32(3),
                                ChamberDipS = reader.IsDBNull(4) ? 0 : reader.GetInt32(4)
                            };
                        chambers.Add(chamber);
                    }
                }
            }
        }

        return chambers;
    }



    public class ChamberDto
    {
        public int ExtractedID { get; set; }
        public int ChamberQtyR { get; set; }
        public int ChamberQtyS { get; set; }
        public int ChamberDipR { get; set; }
        public int ChamberDipS { get; set; }
        public int ChamberNo { get; set; }
    }

    public async Task AddSecondary(OCRData objs)
    {
        try
        {

            if (objs.STO != "Not Found" && objs.STO != string.Empty && objs.STO != null &&
            objs.Vehicle != "" && objs.Vehicle != string.Empty && objs.Vehicle != null &&
           objs.InvoiceDate != null)
            {

                if (DoesStonoExistAsync(objs.STO))
                {
                    List<OCRSecDTO> secondaryInvoices = new List<OCRSecDTO>();

                    // Get total chamber quantity for the vehicle
                    var totalVehicleQuantity = await GetTotalChamberQtyAsync(objs.Vehicle);

                    // Get secondary records where InvoiceType is "sc" and filter by InvoiceDate and Vehicle
                    var validSecondaries = FilteredItems
                        .Where(p => p.InvoiceType == "sc" && p.Vehicle == objs.Vehicle && p.InvoiceDate >= objs.InvoiceDate)
                        .OrderBy(p => p.InvoiceDate) // Sort by InvoiceDate for finding min date
                        .GroupBy(p => p.InvoiceDate)
                        .FirstOrDefault(group => !FilteredItems
                            .Any(pk => pk.InvoiceType == "pk" && pk.Vehicle == objs.Vehicle
                                       && pk.InvoiceDate > objs.InvoiceDate && pk.InvoiceDate < group.Key)
                        )?.ToList();

                    // Check if there are valid secondary records and process them
                    if (validSecondaries != null)
                    {
                        int totalChamberQty = 0;

                        foreach (var item in validSecondaries)
                        {
                            // Initialize a new SecondaryInvoices instance
                            var secondaryInvoice = new OCRSecDTO
                                {
                                    ExtractedID = item.OCRID,
                                    FileLocation = item.FileLocation,
                                    FillingDate = item.InvoiceDate,
                                    ProductName = item.Product,
                                    RecievingLocation = item.ReceivingLocation,
                                    ShippingLocation = item.ShippingLocation,
                                    STONO = item.STO,
                                    VehicleNo = item.Vehicle,
                                    PrimaryInvoiceNumber = objs.STO,
                                    ChamberDetails = new List<ChamberDetailsDTO>(),
                                };

                            // Fetch chambers associated with the current OCRID
                            var chambers = await GetChambersByExtractedId(item.OCRID, objs.STO);

                            int currentChamberQty = 0; // Track the ChamberQty for the current secondary invoice

                            // Add chambers to the secondary invoice and accumulate ChamberQty sum
                            foreach (var chamber in chambers)
                            {
                                // Only add chamber if there's at least one value in ChamberQty or ChamberDip
                                if (chamber.ChamberQtyR != 0 || chamber.ChamberDipR != 0)
                                {
                                    secondaryInvoice.ChamberDetails.Add(new ChamberDetailsDTO
                                        {
                                            ChamberDip = chamber.ChamberDipR,
                                            ChamberNo = chamber.ChamberNo,
                                            ChamberQuantity = chamber.ChamberQtyR,
                                            ExtractedID = chamber.ExtractedID,
                                            STONO = item.STO,
                                            InvoiceLorryDip = chamber.ChamberDipR,
                                            InvoiceChamberQuantity = chamber.ChamberQtyR,
                                            ogra = chamber.ChamberDipS,
                                            CumulativeChamberQuantity = 0,
                                            TotalVehicleChamberQuantity = 0
                                        });

                                    // Sum the ChamberQty if it has a value for the current item
                                    if (chamber.ChamberQtyS != 0)
                                        currentChamberQty += chamber.ChamberQtyS;
                                }
                            }

                            // Check if the total chamber quantity of this item is within the allowed limit
                            if (totalChamberQty + currentChamberQty <= totalVehicleQuantity)
                            {
                                // Add currentChamberQty to totalChamberQty since it's being added to the list
                                totalChamberQty += currentChamberQty;
                                // Add the populated secondary invoice to the list
                                secondaryInvoices.Add(secondaryInvoice);
                            }
                        }

                    }


                    // Now totalChamberQty contains the sum of all ChamberQty from valid secondaries




                    if (secondaryInvoices.Count <= 0)
                    {
                        toastService.ShowError("No Secondaries found for this invoice");
                        return;
                    }

                    string jsonString = JsonSerializer.Serialize(secondaryInvoices);
                    string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));
                    string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

                    // NavigationManager.NavigateTo($"/Invoice?Edit={encodedJson}");
                    await js.InvokeVoidAsync("openInNewTab2", $"/insertSec?Edit={encodedJson}");
                    //  var url = $"/invoicepanel?Edit={encodedJson}";
                    // await JSRuntime.InvokeVoidAsync("openInNewTab", url);


                    return;
                }
                else
                {
                    toastService.ShowError("Please generate the primary invoice first");
                }

            }

            else /* if (objs.InvoiceType=="sc") */
            {
                toastService.ShowError($"Please fill this Primary Invoice first.");
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex.Message}");
        }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Attempt a simple JavaScript call to check if JS is ready
                await js.InvokeVoidAsync("console.log", "");
                BusinessID = await UserClaimsService.GetBusinessIdsAsync();
                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();
            }
            catch
            {
                // If JS isn't ready, handle it gracefully
                _isJsReady = false; // JavaScript is not yet ready
            }
        }
    }
    private List<OCRData> FilteredItems;

    private void SearchInComplete(bool isPrimary)
    {
        var rec = obj.Where(item =>
           (string.IsNullOrEmpty(item.Vehicle) || item.Vehicle.Length < 5 || item.Vehicle.Contains("Not Found")) ||  // Show if Vehicle is null, length < 5, or contains "Not Found"
           string.IsNullOrEmpty(item.BusinessName) || item.BusinessName.Contains("Not Found") ||  // Show if BusinessName is null, empty, or "Not Found"
           string.IsNullOrEmpty(item.Product) || item.Product.Contains("Not Found") ||  // Show if Product is null, empty, or "Not Found"
           string.IsNullOrEmpty(item.ReceivingLocation) || item.ReceivingLocation.Contains("Not Found") ||  // Show if ReceivingLocation is null, empty, or "Not Found"
           string.IsNullOrEmpty(item.ShippingLocation) || item.ShippingLocation.Contains("Not Found") ||  // Show if ShippingLocation is null, empty, or "Not Found"
           (string.IsNullOrEmpty(item.STO) || item.STO.Contains("Not Found") || item.STO.Contains("NOT_FOUND")) ||
           item.InvoiceDate == null || item.InvoiceDate == DateTime.MinValue
       ).ToList();

        if (isPrimary)
        {
            FilteredItems = rec.Where(p => p.InvoiceType == "pk").ToList();

        }
        else
        {
            FilteredItems = rec.Where(p => p.InvoiceType == "sc").ToList();

        }


    }



    private async void SearchRecords(string searchCriteria)
    {

        if (searchCriteria == null)
        {
            if (startDate.HasValue)
            {
                // Get the year and month from the selected date
                var selectedYear = startDate.Value.Year;
                var selectedMonth = startDate.Value.Month;

                FilteredItems = obj.Where(item =>
                    item.InvoiceDate.HasValue &&
                    item.InvoiceDate.Value.Year == selectedYear &&
                    item.InvoiceDate.Value.Month == selectedMonth
                ).ToList();
            }
            return;
        }


        searchCriteria = searchCriteria.Replace(" ", string.Empty).Trim();
        if (string.IsNullOrEmpty(searchCriteria))
        {
            // If no search criteria, reset to all items
            FilteredItems = obj;

        }
        else
        {
            // Example search logic based on `primaryreference` and `VehicleNo` fields
            FilteredItems = obj.Where(item =>
                (item.Vehicle != null && item.Vehicle.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase)) ||
                (item.InvoiceType != null && item.InvoiceType.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                || (item.BusinessName != null && item.BusinessName.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                || (item.Product != null && item.Product.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                  || (item.ReceivingLocation != null && item.ReceivingLocation.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                    || (item.ShippingLocation != null && item.ShippingLocation.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                    || (item.STO != null && item.STO.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
            ).ToList();

        }
        if (startDate.HasValue)
        {
            // Get the year and month from the selected date
            var selectedYear = startDate.Value.Year;
            var selectedMonth = startDate.Value.Month;

            FilteredItems = FilteredItems.Where(item =>
                item.InvoiceDate.HasValue &&
                item.InvoiceDate.Value.Year == selectedYear &&
                item.InvoiceDate.Value.Month == selectedMonth
            ).ToList();
        }

        // After filtering, reset the pagination
        // CurrentPage = 1;
        //   await LoadData();
    }
    private void Reset()
    {
        startDate = null;
        endDate = null;
        searchTerm = null;

        // Clear the existing FilteredItems instead of creating a new list
        FilteredItems.Clear();
        FilteredItems.AddRange(obj); // If obj is already the source of data
    }
    private async Task LoadData()
    {
        IsLoading = true;
        try
        {
            RefreshLoader = true;
            FilteredItems = new List<OCRData>();
            obj = new List<OCRData>();
            // Process each item as it is read
            await foreach (var item in LoadShortagereport())
            {
                FilteredItems.Add(item);
                await InvokeAsync(StateHasChanged); // Trigger UI update for each item added
                obj.Add(item);
            }

            // Filter the list after all items have been added
            FilteredItems = FilteredItems
                .Where(p => BusinessID.Contains(p.BusinessID))
                .OrderByDescending(p => p.InvoiceDate)
                .ToList();

            RefreshLoader = false;
            isEdited = false;
        }
        catch (Exception ex)
        {
            // Handle exceptions
        }
        finally
        {
            IsLoading = false;
        }
    }


    protected override async Task OnInitializedAsync()
    {


    }
    // private async Task LoadData()
    // {
    //     TotalItems = await GetTotalItemCountAsync();
    //     TotalPages = (int)Math.Ceiling((double)TotalItems / PageSize);
    //     FilteredItems = await GetItemsAsync(CurrentPage, PageSize);

    // }
    // private async Task PreviousPage()
    // {
    //     if (CanGoToPreviousPage)
    //     {
    //         CurrentPage--;
    //         await LoadData();
    //     }
    // }
    // public async Task<List<OCRData>> GetItemsAsync(int page, int pageSize)
    // {
    //     return obj.Skip((page - 1) * pageSize).Take(pageSize).ToList();
    // }

    // public async Task<int> GetTotalItemCountAsync()
    // {
    //     return obj.Count();
    // }
    // private async Task NextPage()
    // {
    //     if (CanGoToNextPage)
    //     {
    //         CurrentPage++;
    //         await LoadData();
    //     }
    // }
    // private async Task GoToFirstPage()
    // {
    //     if (CurrentPage != 1)
    //     {
    //         CurrentPage = 1;
    //         await LoadData();
    //     }
    // }
    // private async Task GoToLastPage()
    // {
    //     if (CurrentPage != TotalPages)
    //     {
    //         CurrentPage = TotalPages;
    //         await LoadData();
    //     }
    // }
    public string TruncateString(string input, int maxLength = 40)
    {
        if (string.IsNullOrEmpty(input)) return input;
        return input.Length > maxLength ? input.Substring(0, maxLength) : input;
    }


    public bool DoesStonoExistAsync(string stono)
    {
        // SQL query to check if STONO exists
        string query = "SELECT COUNT(1) FROM tblinvoices WHERE STONO = @stono";

        using (var connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            connection.Open();

            using (var command = new SqlCommand(query, connection))
            {
                // Add the parameter to the query
                command.Parameters.AddWithValue("@stono", stono);

                // Execute the query and get the result
                int count = (int)command.ExecuteScalar();

                // If the count is greater than 0, the STONO exists
                return count > 0;
            }
        }
    }



    private int TotalPages;
    public async IAsyncEnumerable<OCRData> LoadShortagereport()
    {
        string query = $@"
SELECT *
FROM vwGetExtractedData
ORDER BY BusinessID, FillingDate DESC, VehicleNo, CASE WHEN InvoiceType = 'pk' THEN 1 ELSE 2 END;
";

        var connectionString = _configuration.GetConnectionString("Con");

        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            using (var command = new SqlCommand(query, connection))
            using (var reader = await command.ExecuteReaderAsync())
            {
                while (await reader.ReadAsync())
                {
                    OCRData dv = new OCRData
                        {
                            InvoiceDate = reader.IsDBNull(reader.GetOrdinal("FillingDate"))
                                                                            ? (DateTime?)null
                                                                            : reader.GetDateTime(reader.GetOrdinal("FillingDate")),
                            STO = reader.IsDBNull(reader.GetOrdinal("STONO")) ? "" : reader.GetString(reader.GetOrdinal("STONO")),
                            BusinessName = reader.IsDBNull(reader.GetOrdinal("busdesc")) ? "" : reader.GetString(reader.GetOrdinal("busdesc")),
                            Vehicle = reader.IsDBNull(reader.GetOrdinal("VehicleNo")) ? "" : reader.GetString(reader.GetOrdinal("VehicleNo")),
                            BusinessID = reader.IsDBNull(reader.GetOrdinal("BusinessID")) ? 0 : reader.GetInt32(reader.GetOrdinal("BusinessID")),
                            OCRID = reader.IsDBNull(reader.GetOrdinal("ExtractedID")) ? 0 : reader.GetInt32(reader.GetOrdinal("ExtractedID")),
                            ShippingLocation = reader.IsDBNull(reader.GetOrdinal("ShippingLocation")) ? "" : reader.GetString(reader.GetOrdinal("ShippingLocation")),
                            ReceivingLocation = reader.IsDBNull(reader.GetOrdinal("RecievingLocation")) ? "" : reader.GetString(reader.GetOrdinal("RecievingLocation")),
                            InvoiceType = reader.IsDBNull(reader.GetOrdinal("InvoiceType")) ? "" : reader.GetString(reader.GetOrdinal("InvoiceType")),
                            Product = reader.IsDBNull(reader.GetOrdinal("ProductName")) ? "" : reader.GetString(reader.GetOrdinal("ProductName")),
                            FileLocation = reader.IsDBNull(reader.GetOrdinal("FileLocation")) ? "" : reader.GetString(reader.GetOrdinal("FileLocation")),
                            isInvoiceGenerated = reader.IsDBNull(reader.GetOrdinal("isInvoiceGenerated")) ? false : reader.GetBoolean(reader.GetOrdinal("isInvoiceGenerated")),
                        };

                    yield return dv; // Yield each OCRData object
                }
            }
        }
    }





}
