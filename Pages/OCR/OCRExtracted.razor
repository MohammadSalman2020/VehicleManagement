  @page "/OCRExtracted"
@using Microsoft.Data.SqlClient
@using System.Web
@using System.Text
@using System.Text.Json
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@inject IUserClaimsService UserClaimsService
@inject IToastService toastService
@inject IApiService API
  @inject IJSRuntime js
  @inject IConfiguration _configuration
<div class="container-fluid py-4">
    <div class="row">
        <AuthorizeView Roles="admin,FleetManager,SafetySupervisor">
            <Authorized Context="access">

                <div class="col-md-12">
                    <div class="">

                        <div class="">
                            <div class="row col-md-12">
                                <!-- Filter Button -->
                                <div class="col-md-6">
                                    <h4>OCR Extarcted Data</h4>
                                </div>
                                <div class="col-md-6" style="text-align:end;">
                                    <img style="cursor:pointer;" src="css/filter.png" @onclick="ToggleFilterPanel" />
                                </div>
                            </div>
                            <div class="row">

                                <div class="col-md-2">
                                    <!-- Filter Button -->
                                    <!-- Slider Panel -->
                                    <div class="filter-slider-panel" style="@PanelStyle">
                                        <div class="filter-header">
                                            <h4>Export</h4>
                                            <button class="close-btn" @onclick="ToggleFilterPanel">X</button>
                                        </div>
                                        <!-- Filter Options -->
                                        <div class="filter-content">
                                            <!-- Add your filter controls here -->
                                            <div class="row col-md-12">

                                                <div class="row filter-controls">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <input type="text" @bind="@searchTerm" class="form-control" id="searchInput" placeholder="STO/Vehicle/Business...">

                                                        </div>
                                                    </div>


                                                    @*    <div class="col-md-2" style="align-content: space-evenly;" title="Business/STO/Driver Name/Driver ID/Vehicle/Primary Reference">
                                                    <div class="form-group">
                                                    <img style="cursor:pointer;" src="css/search.png" @onclick="@(e => SearchRecords(searchTerm))">
                                                    </div>
                                                    </div> *@



                                                </div>


                                            </div>
                                            <!-- Date Filter -->
                                            <div class="row col-md-12">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <label for="startDate">Select Month:</label>
                                                        <input type="month" @bind="@startDate" class="form-control" id="startDate">
                                                    </div>
                                                </div>
                                                @*        <div class="col-md-6">
                                                <div class="form-group">
                                                <label for="endDate">End Date:</label>
                                                <input type="date" @bind="@endDate" class="form-control" id="endDate">
                                                </div>
                                                </div> *@
                                                <div class="col-md-12" style="text-align:center;">
                                                    <div class="form-group">
                                                        <button style="border: white;" class="btn-primary" @onclick="@(e => SearchRecords(searchTerm))">Search</button>
                                                        <button style="border: white;" class="btn-danger" @onclick="Reset">Reset</button>


                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row col-md-12">
                                                <div class="col-md-6" style="text-align:center;" title="Export All Data to Excel">
                                                    <div class="form-group">
                                                        <img style="cursor:pointer;" src="css/Excel Icon.png" @onclick="ExportToExcel" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6" style="text-align:center;" title="Copy Shown Data">

                                                    <div class="form-group">
                                                        <img style="cursor:pointer;" src="css/clipboard.png" onclick="copyTableToClipboard()" />
                                                    </div>
                                                </div>
                                                <!-- Add more filter options as needed -->
                                            </div>
                                        </div>

                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>
                    <br />

                    <div class="row" style="margin-top:10px;">

                        <div class="col-md-12 ">

                            <div class="">
                                <div class="table-responsive p-0">


                                    <table class="" id="invoiceTables" style="width:100%">
                                        <thead style="    background: black;">
                                            <tr>

                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    STO No
                                                </th>

                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Vehicle No
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Business
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Invoice Date
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Shipping Location
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Receiving Location
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Invoice Type
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Product
                                                </th>
                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">
                                                    Image
                                                </th>

                                                <th class="text-center font-colors text-uppercase text-xxs font-weight-bolder opacity-7"
                                                    style="position: sticky; top: 0; background-color: #ffffff; z-index: 1; border: #cccccc 1px solid;">

                                                </th>




                                            </tr>
                                        </thead>
                                        <tbody style="    background: white;">
                                            @if (!IsLoading)
                                            {
                                                @if (FilteredItems.Count > 0)
                                                {
                                                    foreach (var item in FilteredItems.OrderByDescending(p => p.InvoiceDate))
                                                    {

                                                        <tr class="tbl-accordion-header" style="@(item.isInvoiceGenerated?"background:#DCDCDC":"")">


                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.STO</span>
                                                            </td>

                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.Vehicle</span>
                                                            </td>

                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.BusinessName?.ToUpper()</span>
                                                            </td>
                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.InvoiceDate?.ToString("dd-MMMM-yy")</span>
                                                            </td>
                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">
                                                                    @TruncateString(@item.ShippingLocation)
                                                                </span>
                                                            </td>

                                                            <td class="align-middle text-center" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">
                                                                    @TruncateString(@item.ReceivingLocation)
                                                                </span>
                                                            </td>
                                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@(item.InvoiceType == "pk" ? "Primary" : item.InvoiceType=="Not Defined" ? "Unidentified" : "Secondary")</span>
                                                            </td>

                                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                <span style="@(item.isInvoiceGenerated?"color:black !important":"")" class="text-secondary text-xs font-weight-bold">@item.Product</span>
                                                            </td>
                                                            <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                <a class="text-secondary text-xs font-weight-bold" style="@(item.isInvoiceGenerated?"color:blue !important":"") ;cursor:pointer" @onclick="@(()=>ShowMessage2(item))">View</a>
                                                            </td>

                                                            @if (item.InvoiceType=="pk")
                                                            {
                                                                <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                    <a class="text-secondary text-xs font-weight-bold" style="@(item.isInvoiceGenerated?"color:blue !important":"") ;cursor:pointer" @onclick="@(()=>AddSecondary(item))">Add Secondary</a>
                                                                </td>
                                                            }
                                                            else
                                                            {
                                                                <td class="align-middle text-center text-sm" style="border: #cccccc 1px solid;">
                                                                </td>
                                                            }







                                                        </tr>

                                                    }
                                                }
                                            }
                                            else if (IsLoading)
                                            {
                                                <tr>
                                                    <td colspan="18">
                                                        <DataLoaderComponent IsLoading="@IsLoading" LoadingText="Loading Data..." />
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>


                                </div>
                            </div>
                        </div>

                    </div>

                    @*           <div class="col-md-12">
                    <div class="">
                    <div class="pagination">
                    <button class="btn btn-primary" @onclick="GoToFirstPage" disabled="@(!CanGoToPreviousPage)"><i style="font-size:24px" class="fa fa-angle-double-left"></i></button>
                    <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)"><i style="font-size:24px" class="fa fa-angle-left"></i></button>
                    <span>Page @CurrentPage of @TotalPages</span>
                    <button class="btn btn-primary" @onclick="NextPage" disabled="@(!CanGoToNextPage)"><i style="font-size:24px" class="fa fa-angle-right"></i></button>
                    <button class="btn btn-primary" @onclick="GoToLastPage" disabled="@(!CanGoToNextPage)"><i style="font-size:24px" class="fa fa-angle-double-right"></i></button>
                    </div>

                    </div>
                    </div> *@


                </div>

            </Authorized>
            <NotAuthorized>
                @if (_isJsReady)
                {
                    <_403 />

                }
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
@code {
    private bool _isJsReady = false;
    public bool IsLoading { get; set; }
    // private int TotalItems;
    // private int CurrentPage = 1;
    // private int PageSize = 15; // Number of items per page
    // private bool CanGoToPreviousPage => CurrentPage > 1;
    // private bool CanGoToNextPage => CurrentPage < TotalPages;

    public List<int> BusinessID = new List<int>();
    private string searchTerm;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool isPanelVisible = false;
    private string selectedCategory;
    public Invoicing Invoicing = new Invoicing();
    private string PanelStyle => isPanelVisible ? "transform: translateX(0);" : "transform: translateX(100%);";


    private void ToggleFilterPanel()
    {
        isPanelVisible = !isPanelVisible;
    }
    private async Task ExportToExcel()
    {
        // Convert the list to JSON
        var jsonData = System.Text.Json.JsonSerializer.Serialize(FilteredItems);

        // Call the JavaScript function
        await js.InvokeVoidAsync("exportTableToExcel", jsonData);
    }
    public async Task<Invoicing> GetAllInvoices(string InvoiceID)
    {

        try
        {

            var AvailDrafts = await API.GetRequest($"Invoice/GetInvoiceByID/{InvoiceID}");
            if (AvailDrafts != "")
            {
                return Invoicing = Newtonsoft.Json.JsonConvert.DeserializeObject<Invoicing>(AvailDrafts);
            }
            else
            {
                return null;
            }

        }
        catch (Exception ex)
        {
            return null;
        }
    }
    public List<OCRData> obj = new List<OCRData>();

    public async Task ShowMessage2(OCRData objs)
    {
        try
        {
            if (objs.isInvoiceGenerated)
            {
                var Invoice = await GetAllInvoices(objs.STO);
                if (Invoice != null)
                {
                    Invoice.IsFromDisplay = true;
                    Invoice.IsView = "Update";
                    string jsonString = JsonSerializer.Serialize(Invoice);
                    string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));
                    string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

                    // NavigationManager.NavigateTo($"/Invoice?Edit={encodedJson}");
                    await js.InvokeVoidAsync("openInNewTab2", $"/invoice?Edit={encodedJson}");
                    //  var url = $"/invoicepanel?Edit={encodedJson}";
                    // await JSRuntime.InvokeVoidAsync("openInNewTab", url);
                }

                return;
            }


            string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
            string newLocation = objs.FileLocation.Replace(@"C:\ScannedDocs\", urlPrefix);
            if (objs.InvoiceType=="pk")
            {

                Invoicing Invoice = new Invoicing();
                Invoice.Details.STONo = objs.STO;
                Invoice.Details.Product = objs.Product;
                Invoice.InvoiceFilePath =newLocation;
                Invoice.Details.TankLorryNO = objs.Vehicle;
                Invoice.Details.Date = objs.InvoiceDate??DateTime.Now;
                Invoice.Details.ReceivingLocation =TruncateString(objs.ReceivingLocation);
                Invoice.Details.SupplyPoint =TruncateString(objs.ShippingLocation);
                Invoice.Details.Contractor = "Shakoor & Co.";
                Invoice.IsOCR = true;
                Invoice.ExtarctedID = objs.OCRID;

                if (Invoice.Details != null)
                {
                    string jsonString = JsonSerializer.Serialize(Invoice);
                    string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));
                    string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

                    // NavigationManager.NavigateTo($"/Invoice?Edit={encodedJson}");
                    await js.InvokeVoidAsync("openInNewTab2", $"/invoice?OCR={encodedJson}");
                    //  var url = $"/invoicepanel?Edit={encodedJson}";
                    // await JSRuntime.InvokeVoidAsync("openInNewTab", url);
                }
            }
            else if (objs.InvoiceType=="sc")
            {
                await js.InvokeVoidAsync("openInNewTab2", $"/insertSec?View={objs.OCRID}");
            }
            else /* if (objs.InvoiceType=="sc") */
            {
                await js.InvokeVoidAsync("openInNewTab2", $"{newLocation}");
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex.Message}");
        }

    }
    public async Task AddSecondary(OCRData objs)
    {
        try
        {
            if (objs.STO!="Not Found" && objs.STO!=string.Empty&&objs.STO!=null&&
            objs.Vehicle!="" && objs.Vehicle!=string.Empty&&objs.Vehicle!=null&&
           objs.InvoiceDate!=null)
            {


                // NavigationManager.NavigateTo($"/Invoice?Edit={encodedJson}");
                await js.InvokeVoidAsync("openInNewTab2", $"/insertSec?Edit={objs.STO}");
                //  var url = $"/invoicepanel?Edit={encodedJson}";
                // await JSRuntime.InvokeVoidAsync("openInNewTab", url);


                return;
            }

            else /* if (objs.InvoiceType=="sc") */
            {
                toastService.ShowError($"Please fill this Primary Invoice first.");
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex.Message}");
        }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Attempt a simple JavaScript call to check if JS is ready
                await js.InvokeVoidAsync("addKeyboardShortcut");

                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();
            }
            catch
            {
                // If JS isn't ready, handle it gracefully
                _isJsReady = false; // JavaScript is not yet ready
            }
        }
    }
    private List<OCRData> FilteredItems;

    private async void SearchRecords(string searchCriteria)
    {

        if (searchCriteria==null)
        {
            if (startDate.HasValue)
            {
                // Get the year and month from the selected date
                var selectedYear = startDate.Value.Year;
                var selectedMonth = startDate.Value.Month;

                FilteredItems = obj.Where(item =>
                    item.InvoiceDate.HasValue &&
                    item.InvoiceDate.Value.Year == selectedYear &&
                    item.InvoiceDate.Value.Month == selectedMonth
                ).ToList();
            }
            return;
        }


        searchCriteria = searchCriteria.Replace(" ", string.Empty).Trim();
        if (string.IsNullOrEmpty(searchCriteria))
        {
            // If no search criteria, reset to all items
            FilteredItems = obj;

        }
        else
        {
            // Example search logic based on `primaryreference` and `VehicleNo` fields
            FilteredItems = obj.Where(item =>
                (item.Vehicle != null && item.Vehicle.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase)) ||
                (item.InvoiceType != null && item.InvoiceType.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                || (item.BusinessName != null && item.BusinessName.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                || (item.Product != null && item.Product.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                  || (item.ReceivingLocation != null && item.ReceivingLocation.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                    || (item.ShippingLocation != null && item.ShippingLocation.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
                    || (item.STO != null && item.STO.Contains(searchCriteria, StringComparison.OrdinalIgnoreCase))
            ).ToList();

        }
        if (startDate.HasValue)
        {
            // Get the year and month from the selected date
            var selectedYear = startDate.Value.Year;
            var selectedMonth = startDate.Value.Month;

            FilteredItems = FilteredItems.Where(item =>
                item.InvoiceDate.HasValue &&
                item.InvoiceDate.Value.Year == selectedYear &&
                item.InvoiceDate.Value.Month == selectedMonth
            ).ToList();
        }

        // After filtering, reset the pagination
        // CurrentPage = 1;
        //   await LoadData();
    }
    private void Reset()
    {
        startDate = null;
        endDate = null;
        searchTerm = null;
        FilteredItems = obj;
    }

    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;
        try
        {

            BusinessID = await UserClaimsService.GetBusinessIdsAsync();

            await LoadShortagereport();
            FilteredItems = obj;

            // await LoadData();

        }
        catch (Exception ex)
        {
            IsLoading = false;
        }
        IsLoading = false;
    }
    // private async Task LoadData()
    // {
    //     TotalItems = await GetTotalItemCountAsync();
    //     TotalPages = (int)Math.Ceiling((double)TotalItems / PageSize);
    //     FilteredItems = await GetItemsAsync(CurrentPage, PageSize);

    // }
    // private async Task PreviousPage()
    // {
    //     if (CanGoToPreviousPage)
    //     {
    //         CurrentPage--;
    //         await LoadData();
    //     }
    // }
    // public async Task<List<OCRData>> GetItemsAsync(int page, int pageSize)
    // {
    //     return obj.Skip((page - 1) * pageSize).Take(pageSize).ToList();
    // }

    // public async Task<int> GetTotalItemCountAsync()
    // {
    //     return obj.Count();
    // }
    // private async Task NextPage()
    // {
    //     if (CanGoToNextPage)
    //     {
    //         CurrentPage++;
    //         await LoadData();
    //     }
    // }
    // private async Task GoToFirstPage()
    // {
    //     if (CurrentPage != 1)
    //     {
    //         CurrentPage = 1;
    //         await LoadData();
    //     }
    // }
    // private async Task GoToLastPage()
    // {
    //     if (CurrentPage != TotalPages)
    //     {
    //         CurrentPage = TotalPages;
    //         await LoadData();
    //     }
    // }
    public string TruncateString(string input, int maxLength = 40)
    {
        if (string.IsNullOrEmpty(input)) return input;
        return input.Length > maxLength ? input.Substring(0, maxLength) : input;
    }
    private int TotalPages;
    public async Task LoadShortagereport()
    {
        try
        {
            string query = $@"
SELECT * FROM vwGetExtractedData";
            var connectionString = _configuration.GetConnectionString("Con");

            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();

                using (var command = new SqlCommand(query, connection))
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        OCRData dv = new OCRData();
                        dv = new OCRData
                            {
                                InvoiceDate = reader.IsDBNull(reader.GetOrdinal("FillingDate"))
                                                              ? (DateTime?)null
                                                                  : reader.GetDateTime(reader.GetOrdinal("FillingDate")),

                                STO = reader.IsDBNull(reader.GetOrdinal("STONO")) ? "" : reader.GetString(reader.GetOrdinal("STONO")),
                                BusinessName = reader.IsDBNull(reader.GetOrdinal("busdesc")) ? "" : reader.GetString(reader.GetOrdinal("busdesc")),
                                Vehicle = reader.IsDBNull(reader.GetOrdinal("VehicleNo")) ? "" : reader.GetString(reader.GetOrdinal("VehicleNo")),
                                BusinessID = reader.IsDBNull(reader.GetOrdinal("BusinessID")) ? 0 : reader.GetInt32(reader.GetOrdinal("BusinessID")),
                                OCRID = reader.IsDBNull(reader.GetOrdinal("ExtractedID")) ? 0 : reader.GetInt32(reader.GetOrdinal("ExtractedID")),

                                ShippingLocation = reader.IsDBNull(reader.GetOrdinal("ShippingLocation")) ? "" : reader.GetString(reader.GetOrdinal("ShippingLocation")),
                                ReceivingLocation = reader.IsDBNull(reader.GetOrdinal("RecievingLocation")) ? "" : reader.GetString(reader.GetOrdinal("RecievingLocation")),
                                InvoiceType = reader.IsDBNull(reader.GetOrdinal("InvoiceType")) ? "" : reader.GetString(reader.GetOrdinal("InvoiceType")),
                                Product = reader.IsDBNull(reader.GetOrdinal("ProductName")) ? "" : reader.GetString(reader.GetOrdinal("ProductName")),
                                FileLocation = reader.IsDBNull(reader.GetOrdinal("FileLocation")) ? "" : reader.GetString(reader.GetOrdinal("FileLocation")),
                                isInvoiceGenerated = reader.IsDBNull(reader.GetOrdinal("isInvoiceGenerated")) ? false : reader.GetBoolean(reader.GetOrdinal("isInvoiceGenerated")),

                            };
                        obj.Add(dv);




                    }
                }
            }

            obj = obj.Where(p => BusinessID.Contains(p.BusinessID)).OrderByDescending(p => p.InvoiceDate).ToList();

        }
        catch (Exception ex)
        {

        }
    }




}
