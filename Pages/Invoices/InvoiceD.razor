@page "/invoicedisplay"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities
@using System.Web
@using System.Text.Json
@using System.Text
@using Microsoft.Data.SqlClient
@using VehicleManagement.ApiService
@using VehicleManagement.Models.General
@using VehicleManagement.Pages.Redirects
@inject IToastService toastService
@inject IApiService API
@inject IJSRuntime js

  @inject IConfiguration _configuration
@inject AuthenticationStateProvider _authenticationStateProvider

<style>
    body {
        font-family: Arial, sans-serif;
    }

    .container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        /*   padding: 10px; */
    }

    .title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .details, .shipping, .receiving {
        font-weight: bold;
        font-size: x-small;
        color: black;
        width: 100%;
        border-collapse: collapse;
    }

        .details td, .shipping td, .receiving td {
            border: 1px solid black;
            padding: 4px;
            text-align: center;
        }

        .details td {
            width: 25%;
        }

        .details .header, .shipping .header, .receiving .header {
            color: white;
            font-weight: bold;
            background-color: #5e72e4;
        }


    .header-span {
        display: block;
        font-size: 16px;
        font-weight: bold;
        color: white;
        background-color: #5e72e4;
        text-align: center;
        padding: 5px;
        border: 1px solid black;
    }

    .footer {
        font-weight: bold;
        text-align: center;
        background-color: #d9d9d9;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    .col-lgg-6 {
        width: 100%;
        max-width: 50%;
        box-sizing: border-box;
        padding: 10px;
    }

    .table-responsive {
        overflow-x: auto;
    }

</style>

@if (Invoices != null)
{
    <div class="row">
        <div class="col-lgg-6">
            <div class="container">

                <table class="details">
                    <tr>
                        <td>Tank Lorry No</td>
                        <td>@Invoices.Details.TankLorryNO</td>
                        <td>Date</td>
                        <td>@Invoices.Details.Date.ToString("d/MMM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>STO NO</td>
                        <td>@Invoices.Details.STONo</td>
                        <td>Prepared By</td>
                        <td>@(Invoices.User ?? User)</td>
                    </tr>
                    <tr>
                        <td>Supply Point</td>
                        <td>@Invoices.Details.SupplyPoint</td>
                        <td>Receiving Location</td>
                        <td>@Invoices.Details.ReceivingLocation</td>
                    </tr>
                    <tr>
                        <td>Product</td>
                        <td>@Invoices.Details.Product</td>
                        <td>Contractor</td>
                        <td>@Invoices.Details.Contractor</td>
                    </tr>
                </table>

                <table class="shipping" style="margin-top:7px;">
                    <tr class="header">
                        <td>Chamber (Shipping)</td>
                        <td>1</td>
                        <td>2</td>
                        <td>3</td>
                        <td>4</td>
                        <td>5</td>
                    </tr>
                    <tr>
                        <td>Temp F</td>
                        <td colspan="5">@Invoices.ShippingDetail.TempF</td>
                    </tr>
                    <tr>
                        <td>S.G</td>
                        <td colspan="5">@Invoices.ShippingDetail.SG</td>
                    </tr>
                    <tr>
                        <td>Chamber Quantity</td>
                        <td>@Invoices.ShippingDetail.Chamber1.ChamberQuantity</td>
                        <td>@Invoices.ShippingDetail.Chamber2.ChamberQuantity</td>
                        <td>@Invoices.ShippingDetail.Chamber3.ChamberQuantity</td>
                        <td>@Invoices.ShippingDetail.Chamber4.ChamberQuantity</td>
                        <td>@Invoices.ShippingDetail.Chamber5.ChamberQuantity</td>
                    </tr>
                    <tr>
                        <td>Tank Lorry Product Dips(MM)</td>
                        <td>@Invoices.ShippingDetail.Chamber1.LorryDip</td>
                        <td>@Invoices.ShippingDetail.Chamber2.LorryDip</td>
                        <td>@Invoices.ShippingDetail.Chamber3.LorryDip</td>
                        <td>@Invoices.ShippingDetail.Chamber4.LorryDip</td>
                        <td>@Invoices.ShippingDetail.Chamber5.LorryDip</td>
                    </tr>
                    <tr>
                        <td>Quantity  85F</td>
                        <td>@Invoices.ShippingDetail.Chamber1.Quantity</td>
                        <td>@Invoices.ShippingDetail.Chamber2.Quantity</td>
                        <td>@Invoices.ShippingDetail.Chamber3.Quantity</td>
                        <td>@Invoices.ShippingDetail.Chamber4.Quantity</td>
                        <td>@Invoices.ShippingDetail.Chamber5.Quantity</td>
                    </tr>
                </table>

                <table class="receiving">
                    <tr class="header">
                        <td>Chamber (Receiving)</td>
                        <td>1</td>
                        <td>2</td>
                        <td>3</td>
                        <td>4</td>
                        <td>5</td>
                    </tr>
                    <tr>
                        <td>Temp F</td>
                        <td colspan="5">@Invoices.ReceivingDetail.TempF</td>
                    </tr>
                    <tr>
                        <td>S.G</td>
                        <td colspan="5">@Invoices.ReceivingDetail.SG</td>
                    </tr>
                    <tr>
                        <td>Chamber Quantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber1.ChamberQuantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber2.ChamberQuantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber3.ChamberQuantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber4.ChamberQuantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber5.ChamberQuantity</td>
                    </tr>
                    <tr>
                        <td>Tank Lorry Product Dips(MM)</td>
                        <td>@Invoices.ReceivingDetail.Chamber1.LorryDip</td>
                        <td>@Invoices.ReceivingDetail.Chamber2.LorryDip</td>
                        <td>@Invoices.ReceivingDetail.Chamber3.LorryDip</td>
                        <td>@Invoices.ReceivingDetail.Chamber4.LorryDip</td>
                        <td>@Invoices.ReceivingDetail.Chamber5.LorryDip</td>
                    </tr>
                    <tr>
                        <td>Quantity  85F</td>
                        <td>@Invoices.ReceivingDetail.Chamber1.Quantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber2.Quantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber3.Quantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber4.Quantity</td>
                        <td>@Invoices.ReceivingDetail.Chamber5.Quantity</td>
                    </tr>
                </table>

                <table class="receiving" style="margin-top:7px;">
                    <tr class="header">
                        <td>Chamber (Summary)</td>
                        <td>1</td>
                        <td>2</td>
                        <td>3</td>
                        <td>4</td>
                        <td>5</td>
                    </tr>
                    <tr>
                        <td>Shortage in MM</td>
                        <td>@Invoices.ShortageCalculation.Chamber1.ShortageMM</td>
                        <td>@Invoices.ShortageCalculation.Chamber2.ShortageMM</td>
                        <td>@Invoices.ShortageCalculation.Chamber3.ShortageMM</td>
                        <td>@Invoices.ShortageCalculation.Chamber4.ShortageMM</td>
                        <td>@Invoices.ShortageCalculation.Chamber5.ShortageMM</td>
                    </tr>
                    <tr>
                        <td>Total Shortage in Liters</td>
                        <td>@Invoices.ShortageCalculation.Chamber1.TotalShortageLtr</td>
                        <td>@Invoices.ShortageCalculation.Chamber2.TotalShortageLtr</td>
                        <td>@Invoices.ShortageCalculation.Chamber3.TotalShortageLtr</td>
                        <td>@Invoices.ShortageCalculation.Chamber4.TotalShortageLtr</td>
                        <td>@Invoices.ShortageCalculation.Chamber5.TotalShortageLtr</td>
                    </tr>
                </table>
                <table class="receiving">
                    <tr>
                        <td>Temp. Difference (Desp. vs Rec.)</td>
                        <td>@Invoices.CalculationDifference.TempDiff</td>
                        <td>Shortage  1°F Temp</td>
                        <td>@Invoices.CalculationDifference.Shortage1FTemp</td>
                        <td>Qty Should be Received</td>
                        <td>@Invoices.CalculationDifference.QtyShouldRecieved</td>
                    </tr>
                    <tr>
                        <td>Total Shortage in Liters By Dip</td>
                        <td>@Invoices.CalculationDifference.TotalShortageByDip</td>
                        <td>Short On Temperature (Exempted)</td>
                        <td>@Invoices.CalculationDifference.ShortOnTemp</td>
                        @if (@Invoices.CalculationDifference.Status == "Short")
                        {
                            <td>Shortage Charge to Contractor</td>
                            <td style="color:red;">@Invoices.CalculationDifference.ShortageCharge</td>
                        }
                        else if (@Invoices.CalculationDifference.Status == "Extra")
                        {
                            <td>Shortage Charge to Contractor</td>
                            <td style="color:blue;">@Invoices.CalculationDifference.ShortageCharge</td>
                        }
                        else
                        {
                            <td>Shortage Charge to Contractor</td>
                            <td>@Invoices.CalculationDifference.ShortageCharge</td>
                        }


                    </tr>
                    <tr>
                        <td colspan="3">Status</td>
                        <td colspan="6" style="color:@(Invoices.CalculationDifference.Status=="Extra"?"blue":"red")">@Invoices.CalculationDifference.Status</td>
                    </tr>
                </table>
                @if (IsView == "View")
                {
                    <div class="col-md-12" style="margin-top: 7px;">
                        <div class="row">


                            <div class="col-md-12">
                                <div class="form-group" style="text-align:center;">
                                    <button class="btn btn-warning btn-sm ms-auto" @onclick="EditButton">Edit</button>
                                    <button class="btn btn-primary btn-sm ms-auto" @onclick="Save">Submit</button>
                                </div>


                            </div>

                        </div>
                    </div>
                }
                else if (IsView == "Update")
                {
                    <div class="col-md-12" style="margin-top: 7px;">
                        <div class="row">


                            <div class="col-md-12">
                                <div class="form-group" style="text-align:center;">
                                    <button class="btn btn-warning btn-sm ms-auto" @onclick="EditButton">Edit</button>
                                    <button class="btn btn-primary btn-sm ms-auto" @onclick="Update">Update</button>
                                </div>


                            </div>

                        </div>
                    </div>
                }

            </div>
        </div>
        <div class="col-lgg-6">
            <div class="table-responsive inv-img">
                <img src="@Invoices.InvoiceFilePath" style="width:100%;" />
            </div>
        </div>
    </div>

}
<Loader isLoading="@IsLoading" IsMessage=true />


@code {
    private string? IsView { get; set; } = string.Empty;
    private string? User { get; set; } = string.Empty;
    public bool IsLoading { get; set; } = false;
    private Invoicing? Invoices { get; set; }
    private bool _isJsReady = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await js.InvokeVoidAsync("console.log", "");
                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();

            }
            catch (Exception ex)
            {
                _isJsReady = false; // JavaScript is not yet ready
                string e = ex.Message;
            }

        }

    }
    protected override async void OnInitialized()
    {
        try
        {

            // Retrieve the encoded JSON string from the query parameters if it exists
            string encodedJson = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;

            // Check if the "json" query parameter exists
            if (encodedJson.Contains("json="))
            {
                // Extract the value of the "json" query parameter
                encodedJson = encodedJson.Split("json=")[1];

                // Decode the URL-safe Base64 string
                string base64EncodedJson = HttpUtility.UrlDecode(encodedJson);

                // Convert the Base64 string back to UTF-8 encoded bytes
                byte[] base64EncodedBytes = Convert.FromBase64String(base64EncodedJson);

                // Decode the UTF-8 bytes back to the original JSON string
                string jsonString = Encoding.UTF8.GetString(base64EncodedBytes);

                // Deserialize the JSON string back into the Invoices object
                Invoices = Newtonsoft.Json.JsonConvert.DeserializeObject<Invoicing>(jsonString);
                IsView = Invoices.IsView;
             
                var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
                User = authState.User.Identity.Name;

                string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
                Invoices.InvoiceFilePath = Invoices.InvoiceFilePath.Replace(@"css/Development/HTL_Reports/", urlPrefix);

            }
            else if (encodedJson.Contains("InvoiceID="))
            {
                // Extract the value of the "json" query parameter
                encodedJson = encodedJson.Split("InvoiceID=")[1];

                // Decode the URL-safe Base64 string
                string base64EncodedJson = HttpUtility.UrlDecode(encodedJson);

                // Convert the Base64 string back to UTF-8 encoded bytes
                byte[] base64EncodedBytes = Convert.FromBase64String(base64EncodedJson);

                // Decode the UTF-8 bytes back to the original JSON string
                string jsonString = Encoding.UTF8.GetString(base64EncodedBytes);

                // Deserialize the JSON string back into the Invoices object
                Invoices = JsonSerializer.Deserialize<Invoicing>(jsonString);
                
                var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
                User = authState.User.Identity.Name;

                string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
                Invoices.InvoiceFilePath = Invoices.InvoiceFilePath.Replace(@"css/Development/HTL_Reports/", urlPrefix);
            }


        }
        catch (Exception ex)
        {

        }
    }
    private async Task Save()
    {
        IsLoading = true;
        try
        {
            Invoices.User = User;
            string jsonData = JsonSerializer.Serialize(Invoices);
            var AddUser = await API.PostRequest($"Invoice/AddInvoice", jsonData);
            string Result = JsonSerializer.Deserialize<string>(AddUser);
            if (Result == "200")
            {
                if (Invoices.IsOCR)
                {
                    // SQL operations (as before) to update the record and retrieve the file location
                    string connectionString = _configuration.GetConnectionString("Con");
                    string updateQuery = "UPDATE tblExtracted_Data SET IsInvoiceGenerated = 1,STONO =@STO,RecievingLocation=@RecievingLocation,ShippingLocation=@Ship,VehicleNo=@Vehicle, FillingDate=@Filling,ProductName= @Product WHERE ExtractedID = @ExtractedID";

                    using (SqlConnection connection = new SqlConnection(connectionString))
                    {
                        connection.Open();

                        // Update the record
                        using (SqlCommand updateCommand = new SqlCommand(updateQuery, connection))
                        {
                            updateCommand.Parameters.AddWithValue("@ExtractedID", Invoices.ExtarctedID);
                            updateCommand.Parameters.AddWithValue("@STO", Invoices.Details.STONo);
                            updateCommand.Parameters.AddWithValue("@Product", Invoices.Details.Product);
                            updateCommand.Parameters.AddWithValue("@Filling", Invoices.Details.Date);
                            updateCommand.Parameters.AddWithValue("@Vehicle", Invoices.Details.TankLorryNO);
                            updateCommand.Parameters.AddWithValue("@Ship", Invoices.Details.SupplyPoint);
                            updateCommand.Parameters.AddWithValue("@RecievingLocation", Invoices.Details.ReceivingLocation);
                            updateCommand.ExecuteNonQuery(); // Execute the update query
                        }
                    }
                }
                toastService.ShowSuccess("Invoice Added Success");
                IsLoading = false;
                NavigationManager.NavigateTo("/addinvoice");
            }
            else if (Result == "403")
            {
                toastService.ShowError("Empty STO No");
            }
            else if (Result == "504")
            {
                toastService.ShowError($"Invoice Already Exists: {Invoices.Details.STONo}");
            }
            else if (Result == "204")
            {
                toastService.ShowWarning($"Please Mark the Driver Attendance for Date {Invoices.Details.Date.ToString("MM-dd-yyyy")}");
            }
            else
            {
                toastService.ShowError("Error while adding invoice");
            }



            IsLoading = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            toastService.ShowError($"Error while adding invoice");
        }

        IsLoading = false;
    }
    private async Task Update()
    {
        IsLoading = true;
        try
        {
            Invoices.User = User;
            string jsonData = JsonSerializer.Serialize(Invoices);
            var AddUser = await API.PostRequest($"Invoice/EditInvoice", jsonData);
            string Result = JsonSerializer.Deserialize<string>(AddUser);
            if (Result == "200")
            {
                toastService.ShowSuccess("Invoice Update Success");
                IsLoading = false;
                NavigationManager.NavigateTo("/addinvoice");
            }
            else if (Result == "404")
            {
                toastService.ShowError("STO No is null or it cannot be edit");
            }
            else if (Result == "504")
            {
                toastService.ShowError($"Invoice Already Exists: {Invoices.Details.STONo}");
            }
            else if (Result == "204")
            {
                toastService.ShowWarning($"Please Mark the Driver Attendance for Date {Invoices.Details.Date.ToString("MM-dd-yyyy")}");
            }
            else
            {
                toastService.ShowError("Error while Updating invoice");
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            toastService.ShowError($"Error while Updating invoice");
        }

        IsLoading = false;
    }
    private async Task EditButton()
    {
        try
        {
            Invoices.IsFromDisplay = true;
            string jsonString = JsonSerializer.Serialize(Invoices);

            // Encode the JSON string as Base64 to make it URL-safe
            string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));

            // Encode the Base64 string to make it URL-safe
            string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

            // Navigate to the destination page with the encoded JSON string as a query parameter
            NavigationManager.NavigateTo($"/invoicepanel?Edit={encodedJson}");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error: {ex.Message}");
        }



    }
}
