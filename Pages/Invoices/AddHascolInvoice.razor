@page "/HascolInvoice"
@using Majorsoft.Blazor.Components.Tabs
@using System.Linq;
@using System.Text.Json
@using System.Web
@using System.Text
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Reflection
@using Microsoft.Data.SqlClient
@using Newtonsoft.Json
@using System.Data
@using System.Text.Json.Serialization
@using VehicleManagement.ApiService
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Login
@using VehicleManagement.Pages.Redirects;
@using static VehicleManagement.Pages.Invoices.ReceiveSecondary
@using static VehicleManagement.Pages.Invoices.AddSecondarInvoice
@inject IWebHostEnvironment Environment
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IApiService API
@inject IJSRuntime JS
@inject AuthenticationStateProvider _authenticationStateProvider
  @inject IConfiguration _configuration
<style>
    body {
        font-family: Arial, sans-serif;
    }

    .container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        /*   padding: 10px; */
    }

    .title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .details, .shipping, .receiving {
        font-weight: bold;
        font-size: x-small;
        color: black;
        width: 100%;
        border-collapse: collapse;
    }

        .details td, .shipping td, .receiving td {
            border: 1px solid black;
            padding: 4px;
            text-align: center;
        }

        .details td {
            width: 25%;
        }

        .details .header, .shipping .header, .receiving .header {
            color: white;
            font-weight: bold;
            background-color: #5e72e4;
        }


    .header-span {
        display: block;
        font-size: 16px;
        font-weight: bold;
        color: white;
        background-color: #5e72e4;
        text-align: center;
        padding: 5px;
        border: 1px solid black;
    }

    .footer {
        font-weight: bold;
        text-align: center;
        background-color: #d9d9d9;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    .col-lgg-6 {
        width: 100%;
        max-width: 50%;
        box-sizing: border-box;
        padding: 10px;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .dropzone {
        max-width: 600px;
        height: 600px;
        border: 2px dashed #3498db;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
        border-radius: 10px;
        color: #3498db;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

        .dropzone p {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            margin: 0;
            pointer-events: none;
        }

        .dropzone.hovered {
            border-color: #2ecc71;
            background-color: #ecf0f1;
        }

    .file-input {
        display: none;
    }

    .preview {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

        .preview img {
            max-width: 100%;
            max-height: 100%;
            display: none;
            border-radius: 10px;
        }



    .text-size {
        font-size: x-small;
        text-align: center;
    }
</style>
<AuthorizeView>
    <Authorized>
        <Nav PageName="@InvoiceType" />









        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="card-body px-0 pt-0 pb-2">


                            <div class="row">
                                <div class="col-lgg-6">
                                    <div class="container">

                                        <table class="details">
                                            <tr>
                                                <td>Tank Lorry No</td>
                                                <td> <input type="text" tabindex="1" id="vehicleID" required placeholder="Tank Lorry No" value="@Invoices.VehicleNo" class="form-control"></td>
                                                <td>Date</td>
                                                <td>  <input type="date" tabindex="2" placeholder="Date" @bind-value="@Invoices.InvoiceDate" class="form-control"></td>
                                            </tr>
                                            <tr>
                                                <td>STO NO</td>
                                                <td>   <input type="text" tabindex="3" placeholder="STO No" @bind-value="@Invoices.STONo" class="form-control"></td>
                                                <td>Shipping Location</td>
                                                <td>  <input type="text" tabindex="4" placeholder="Supply Point" @bind-value="@Invoices.ShippingLoc" class="form-control"></td>
                                            </tr>
                                            <tr>
                                                <td>User</td>
                                                <td> @Invoices.User</td>
                                                <td>Receiving Location</td>
                                                <td>   <input type="text" tabindex="5" placeholder="Receiving Location" @bind-value="@Invoices.ReceivingLoc" class="form-control"></td>
                                            </tr>
                                            <tr>
                                                <td>Product</td>
                                                <td>  <input type="text" tabindex="6" placeholder="Product" @bind-value="@Invoices.Product" class="form-control"></td>
                                                <td>Contractor</td>
                                                <td>  <input type="text" tabindex="7" placeholder="Contractor" @bind-value="@Invoices.Contractor" class="form-control"></td>
                                            </tr>
                                           
                                            @if (IsSecondary)
                                            {
                                                <tr>
                                                    <td>Enter Comma (,) Seprated Chambers</td>
                                                    <td>  <input type="text" tabindex="9" placeholder="Chambers 1,2,3,4,5" @bind-value="@Chamber" class="form-control"></td>
                                                    <td>Enter Comma (,) Seprated Shortage</td>
                                                    <td> <input type="text" tabindex="10" placeholder="Shortages" @bind-value="@Shortages" class="form-control"></td>
                                                </tr>
                                            }
                                            else
                                            {
                                                 <tr>
                                                <td>Shortage</td>
                                                <td>  <input type="text" tabindex="8" placeholder="Product" @bind-value="@Shortage" class="form-control"></td>
                                                <td>Status</td>
                                                <td style="color:@(Shortage<0?"Blue":"Red")">@Status</td>
                                            </tr>                                                
                                            }
                                            @if (IsSecondary)
                                            {
                                                <tr>
                                                    <td colspan="12" style="text-align:center; vertical-align:middle;">
                                                        <div class="form-group d-flex justify-content-center align-items-center" style="height:100%;">
                                                            <button class="btn btn-success btn-sm" @onclick="OpenModal">Link Primary</button>
                                                        </div>
                                                    </td>
                                                </tr>

                                                @if (PrimarySTO is not null)
                                                {
                                                    <tr>
                                                        <td colspan="12" style="text-align:center; vertical-align:middle;">
                                                            <div class="form-group d-flex justify-content-center align-items-center" style="height:100%;">
                                                                <label style="font-size:large;color:#5e72e4;">Primary Reference - @PrimarySTO</label>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }


                                            }
                                        </table>











                                        <div class="col-md-12" style="margin-top: 7px;">
                                            <div class="row">

                                                @if (Invoices != null)
                                                {
                                                    @if (Invoices.STONo != "" && Invoices.VehicleNo != "")
                                                    {
                                                        <div class="col-md-12">
                                                            <div class="form-group" style="text-align:center;">
                                                                @if (IsEdit)
                                                                {
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="Update">Update</button>

                                                                }
                                                                else
                                                                {
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="Save">Save</button>

                                                                }
                                                            </div>
                                                        </div>
                                                    }
                                                }



                                            </div>
                                        </div>




                                    </div>
                                </div>

                                <div class="col-lgg-6">
                                    <div class="table-responsive inv-img">
                                        <div class="image-container2">
                                            <img id="mainImage2"
                                                 src="@FileLocation"
                                                 alt="Zoomable Image" />
                                        </div>
                                    </div>
                                </div>



                            </div>



                        </div>
                    </div>
                </div>
            </div>
        </div>
        <Modal @ref="modal" Title="Primary Invoices">
            <Body>
                <div class="row">
                    <!-- Left Column: List of STO Numbers -->
                    <div class="col-md-4">
                        <div class="card" style="height: 410px; overflow-y: auto;">
                            <div class="card-body">
                                <h6 class="text-uppercase font-weight-bold">STO Numbers</h6>
                                <ul class="list-group">
                                    @foreach (var item in PrimaryInvoices)
                                    {
                                        bool isSelected = item.STO == PrimarySTO;
                                        string listItemClass = isSelected ? "list-group-item active" : "list-group-item";
                                        <li class="@listItemClass" style="cursor: pointer;"
                                            @onclick="() => SelectPrimarySTO(item.STO)">
                                            @item.STO
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Right Column: STO Details Card -->
                    <div class="col-md-8">
                        <div class="card" style="height: 410px;">
                            <div class="card-body">
                                @if (PrimarySTO != null && PrimarySTO != "None")
                                {
                                    var selectedInvoice = PrimaryInvoices.FirstOrDefault(i => i.STO == PrimarySTO);
                                    if (selectedInvoice != null)
                                    {
                                        <h5 class="card-title">Details for STO: @selectedInvoice.STO</h5>
                                        <p class="text-muted">Shipping Location: @selectedInvoice.ShippingLocation</p>
                                        <p class="text-muted">Receiving Location: @selectedInvoice.ReceivingLocation</p>
                                        <p class="text-muted">Vehicle #: @selectedInvoice.Vehicle</p>
                                        <p class="text-muted">Date: @selectedInvoice.InvoiceDate?.ToString("dd-MM-yyyy")</p>
                                        <p class="text-muted">Product: @selectedInvoice.Product</p>
                                        <button class="btn btn-danger" @onclick="RemoveSelection">Remove Selection</button>
                                    }
                                    else
                                    {
                                        if (PrimarySTO == "none")
                                        {
                                            <p class="text-xs font-weight-bold mb-0 text-center">
                                                Invoice Selected as Indiviual
                                                <br />
                                                <a style="text-decoration:underline;color:black;cursor:pointer;font-weight:bolder;" @onclick="RemoveNone">Remove?</a>

                                            </p>
                                        }
                                        else
                                        {
                                            <p class="text-xs font-weight-bold mb-0 text-center">
                                                No Primary Invoice for this Secondary <br> Do you want to Mark this as
                                                <a style="text-decoration:underline;color:black;cursor:pointer;" @onclick="AddNone"> Indiviual?</a>
                                            </p>
                                        }
                                    }
                                }
                                else
                                {
                                    if (PrimarySTO == "none")
                                    {
                                        <p class="text-xs font-weight-bold mb-0 text-center">
                                            Invoice Selected as Indiviual
                                            <br />
                                            <a style="text-decoration:underline;color:black;cursor:pointer;font-weight:bolder;" @onclick="RemoveNone">Remove?</a>

                                        </p>
                                    }
                                    else
                                    {
                                        <p class="text-xs font-weight-bold mb-0 text-center">
                                            No Primary Invoice for this Secondary <br> Do you want to Mark this as
                                            <a style="text-decoration:underline;color:black;cursor:pointer;" @onclick="AddNone"> Indiviual?</a>
                                        </p>
                                    }

                                }
                            </div>
                        </div>
                    </div>
                </div>
            </Body>
        </Modal>


    </Authorized>
    <NotAuthorized>
        @if (_isJsReady)
        {
            <_403 />
        }
        else
        {
            <Loader isLoading="true" />
        }

    </NotAuthorized>
</AuthorizeView>


@code {
    private Modal modal;

    private bool _isJsReady = false;
    private string FileLocation = string.Empty;
    private string InvoiceType = string.Empty;
    private bool AddChamber = false;
    private bool IsEdit = false;
    private bool IsSecondary = false;
    private bool isChambersAvailable = false;
    private string? PrimarySTO; // Variable to store the selected STO
    private string? Chamber; // Variable to store the selected STO
    private string? Shortages; // Variable to store the selected STO
    private string? Status => Shortage < 0 ? "Extra" : "Short";
    private double Shortage; // Variable to store the selected STO
    private async void SelectPrimarySTO(string sto)
    {
        if (PrimarySTO == sto)
        {
            return;
        }

        int ID = GetInvoiceID(sto);
        if (ID != 0)
        {
            PrimarySTO = sto;
        }
        else
        {
            modal.CloseModal();
            toastService.ShowError("Add this primary invoice first");
            await JS.InvokeVoidAsync("OpenEuroPrimaryInvoice", sto);
        }


    }
    private void RemoveSelection()
    {
        PrimarySTO = null;
    }
    private void AddNone()
    {
        PrimarySTO = "none";
    }
    private void RemoveNone()
    {
        PrimarySTO = null;
    }
    public EuroCal Invoices { get; set; } = new EuroCal();
    public List<OCRData> PrimaryInvoices { get; set; } = new List<OCRData>();

    private void OpenModal()
    {
        modal.Show();
    }



    public async Task<List<OCRData>> GetPrimary(int ExtID)
    {
        string connectionString = _configuration.GetConnectionString("Con"); // Replace with your actual connection string
        List<OCRData> result = new List<OCRData>();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            using (SqlCommand command = new SqlCommand("GetPrimaryInvoicesForSC", connection))
            {
                command.CommandType = CommandType.StoredProcedure;

                // Add the VehicleID parameter
                command.Parameters.AddWithValue("@scExtractedID", ExtID);

                // Execute the stored procedure and read the result
                using (SqlDataReader reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        OCRData data = new OCRData
                            {
                                InvoiceDate = reader.IsDBNull(reader.GetOrdinal("FillingDate"))
                                                                                                                                                                                    ? (DateTime?)null
                                                                                                                                                                                    : reader.GetDateTime(reader.GetOrdinal("FillingDate")),
                                STO = reader.IsDBNull(reader.GetOrdinal("STONO")) ? "" : reader.GetString(reader.GetOrdinal("STONO")),
                                Vehicle = reader.IsDBNull(reader.GetOrdinal("VehicleNo")) ? "" : reader.GetString(reader.GetOrdinal("VehicleNo")),
                                BusinessID = reader.IsDBNull(reader.GetOrdinal("BusinessID")) ? 0 : reader.GetInt32(reader.GetOrdinal("BusinessID")),
                                OCRID = reader.IsDBNull(reader.GetOrdinal("ExtractedID")) ? 0 : reader.GetInt32(reader.GetOrdinal("ExtractedID")),
                                ShippingLocation = reader.IsDBNull(reader.GetOrdinal("ShippingLocation")) ? "" : reader.GetString(reader.GetOrdinal("ShippingLocation")),
                                ReceivingLocation = reader.IsDBNull(reader.GetOrdinal("RecievingLocation")) ? "" : reader.GetString(reader.GetOrdinal("RecievingLocation")),
                                InvoiceType = reader.IsDBNull(reader.GetOrdinal("InvoiceType")) ? "" : reader.GetString(reader.GetOrdinal("InvoiceType")),
                                Product = reader.IsDBNull(reader.GetOrdinal("ProductName")) ? "" : reader.GetString(reader.GetOrdinal("ProductName")),
                                FileLocation = reader.IsDBNull(reader.GetOrdinal("FileLocation")) ? "" : reader.GetString(reader.GetOrdinal("FileLocation")),
                                isInvoiceGenerated = reader.IsDBNull(reader.GetOrdinal("isInvoiceGenerated")) ? false : reader.GetBoolean(reader.GetOrdinal("isInvoiceGenerated"))
                            };

                        result.Add(data);
                    }
                }
            }
        }

        return result;
    }
    public bool UpdateExtractedData(OCRSecData invoiceData)
    {
        try
        {
            // SQL update query for tblExtracted_Data
            string sqlUpdateQuery = @"
        UPDATE tblExtracted_Data
        SET
            STONO = @STONO,
            RecievingLocation = @RecievingLocation,
            ShippingLocation = @ShippingLocation,
            VehicleNo = @VehicleNo,
            FillingDate = @FillingDate,
IsInvoiceGenerated='True',
ProductName=@ProductName
        WHERE ExtractedID = @ExtractedID";

            using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
            {
                connection.Open();

                // Update tblExtracted_Data
                using (SqlCommand command = new SqlCommand(sqlUpdateQuery, connection))
                {
                    command.Parameters.AddWithValue("@STONO", invoiceData.StoNo);
                    command.Parameters.AddWithValue("@RecievingLocation", invoiceData.RecievingLocation);
                    command.Parameters.AddWithValue("@ShippingLocation", invoiceData.ShippingLocation);
                    command.Parameters.AddWithValue("@VehicleNo", invoiceData.VehicleNo);
                    command.Parameters.AddWithValue("@FillingDate", invoiceData.FillingDate);
                    command.Parameters.AddWithValue("@ExtractedID", invoiceData.ExtractedID);
                    command.Parameters.AddWithValue("@ProductName", invoiceData.Product);

                    int rowsAffected = command.ExecuteNonQuery();
                    if (rowsAffected <= 0)
                    {
                        return false; // No rows updated in tblExtracted_Data
                    }
                }
            }

            return true; // Update and insert successful
        }
        catch (Exception ex)
        {
            // Handle or log the exception as necessary
            return false;
        }
    }
    public async Task Update()
    {
        try
        {
            if (Invoices.InvoiceType == "pk")
            {
                var rec = MapInvoicing();


                string jsonData = Newtonsoft.Json.JsonConvert.SerializeObject(rec);
                var AddUser = await API.PostRequest($"Invoice/EditInvoice", jsonData);
                string Result = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(AddUser);
                if (Result == "200")
                {
                    toastService.ShowSuccess("Invoice Update Success");
                    NavigationManager.NavigateTo("/addinvoice");
                }
                else if (Result == "404")
                {
                    toastService.ShowError("STO No is null or it cannot be edit");
                }
                else if (Result == "504")
                {
                    toastService.ShowError($"Invoice Already Exists: {Invoices.STONo}");
                }
                else if (Result == "204")
                {
                    toastService.ShowWarning($"Please Mark the Driver Attendance for Date {Invoices.InvoiceDate.ToString("MM-dd-yyyy")}");
                }
                else
                {
                    toastService.ShowError("Error while Updating invoice");
                }
            }
            else if (Invoices.InvoiceType == "sc")
            {
                await AddInd();
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error while Updating invoice");
        }
    }
    private void MapChamberData(ChamberData source, ShippingDetails shippingDetails, ReceivingDetail receivingDetails, ShortageCalculation shortageCalculation, int chamberNumber)
    {
        // Access shipping chamber properties dynamically
        var shippingChamber = shippingDetails.GetType().GetProperty($"Chamber{chamberNumber}");
        var receivingChamber = receivingDetails.GetType().GetProperty($"Chamber{chamberNumber}");
        var shortageChamber = shortageCalculation.GetType().GetProperty($"Chamber{chamberNumber}");

        if (shippingChamber != null && receivingChamber != null && shortageChamber != null)
        {
            // Map shipping data
            var shippingInstance = shippingChamber.GetValue(shippingDetails);
            shippingInstance.GetType().GetProperty("ChamberQuantity")?.SetValue(shippingInstance, source.Capacity);
            shippingInstance.GetType().GetProperty("LorryDip")?.SetValue(shippingInstance, source.DispatchDips);
            shippingInstance.GetType().GetProperty("Quantity")?.SetValue(shippingInstance, 0);

            // Map receiving data
            var receivingInstance = receivingChamber.GetValue(receivingDetails);
            receivingInstance.GetType().GetProperty("ChamberQuantity")?.SetValue(receivingInstance, (int)source.ReceivedQuantity);
            receivingInstance.GetType().GetProperty("LorryDip")?.SetValue(receivingInstance, source.ReceivingDips);
            receivingInstance.GetType().GetProperty("Quantity")?.SetValue(receivingInstance, 0);

            // Map shortage data
            var shortageInstance = shortageChamber.GetValue(shortageCalculation);
            shortageInstance.GetType().GetProperty("ShortageMM")?.SetValue(shortageInstance, (int)source.DiffInDipsMm);
            shortageInstance.GetType().GetProperty("TotalShortageLtr")?.SetValue(shortageInstance, (int)source.ShortByDipLiters);
        }
    }

    public Invoicing MapInvoicing()
    {
        Invoicing objs = new Invoicing();

        // Map GeneralDetails
        objs.Details = new GeneralDetails
            {
                Product = Invoices.Product,
                TankLorryNO = Invoices.VehicleNo,
                Contractor = Invoices.Contractor,
                Date = Invoices.InvoiceDate,
                ReceivingLocation = Invoices.ReceivingLoc,
                STONo = Invoices.STONo,
                SupplyPoint = Invoices.ShippingLoc
            };

        // Map general properties
        objs.User = Invoices.User;
        objs.ExtarctedID = Invoices.ExtractedID;
        objs.InvoiceFilePath = Invoices.FileLocation;
        objs.invoiceType = Invoices.InvoiceType;

        // Map Shipping and Receiving details
        objs.ShippingDetail = new ShippingDetails
            {
                TempF = (float)Invoices.SummaryDetails.DispatchTemperature,
                SG = (float)Invoices.SummaryDetails.DispatchSG
            };
        objs.ReceivingDetail = new ReceivingDetail
            {
                TempF = (float)Invoices.SummaryDetails.ReceivingTemperature,
                SG = (float)Invoices.SummaryDetails.ReceivingSG
            };

        foreach (var chamber in Invoices.Chambers)
        {
            MapChamberData(chamber, objs.ShippingDetail, objs.ReceivingDetail, objs.ShortageCalculation, chamber.ChamberNumber);
        }


        // Map Summary Data
        objs.CalculationDifference = new CalculationDiff
            {
                TempDiff = (float)Math.Round(Invoices.SummaryDetails.TempDifference),
                Shortage1FTemp = (float)Math.Round(Invoices.SummaryDetails.Short1FTemp),
                QtyShouldRecieved = (float)Math.Round(Invoices.TotalReceivedQty),
                TotalShortageByDip = (float)Math.Round(Invoices.TotalShortByDipLiters),
                ShortOnTemp = 0,
                ShortageCharge = (float)Shortage,
                Status = Status ?? "-",
            };

        // Mark the object as not viewable
        objs.IsView = "false";


        return objs;

    }

    public async Task Save()
    {
        try
        {
            if (Invoices == null)
            {
                toastService.ShowError("Data is null");
                return;
            }

            OCRSecData obj = new OCRSecData
                {
                    ExtractedID = Invoices.ExtractedID,
                    Product = Invoices.Product,
                    StoNo = Invoices.STONo,
                    ShippingLocation = Invoices.ShippingLoc,
                    FileLocation = Invoices.FileLocation?.Replace("191.96.196.61", "www.shakoorfms.com/imgs"),
                    FillingDate = Invoices.InvoiceDate,
                    RecievingLocation = Invoices.ReceivingLoc,
                    VehicleNo = Invoices.VehicleNo,
                    User = Invoices.User
                };

            if (Invoices.InvoiceType == "pk")
            {
                var rec = MapInvoicing();
                JsonSerializerOptions options = new JsonSerializerOptions
                    {
                        WriteIndented = true,
                        ReferenceHandler = null,
                        NumberHandling = JsonNumberHandling.AllowNamedFloatingPointLiterals

                    };
                string jsonData = System.Text.Json.JsonSerializer.Serialize(rec, options);

                // API request to add the invoice
                var addUserResponse = await API.PostRequest("Invoice/AddInvoice", jsonData);
                string result = JsonConvert.DeserializeObject<string>(addUserResponse);

                // Handle API response
                switch (result)
                {
                    case "200":
                        if (!UpdateExtractedData(obj))
                        {
                            toastService.ShowError("Invoice is added but OCR data is not updated");
                            NavigationManager.NavigateTo("/addinvoice");
                            return;
                        }
                        toastService.ShowSuccess("Invoice added successfully");
                        NavigationManager.NavigateTo("/addinvoice");
                        break;

                    case "403":
                        toastService.ShowError("Empty STO No");
                        break;

                    case "504":
                        toastService.ShowError($"Invoice already exists: {Invoices.STONo}");
                        break;

                    case "204":
                        toastService.ShowWarning($"Please mark the driver attendance for {Invoices.InvoiceDate:MM-dd-yyyy}");
                        break;

                    default:
                        toastService.ShowError("Error while adding invoice");
                        break;
                }
            }
            else if (Invoices.InvoiceType == "sc")
            {
                await AddInd();
            }
        }
        catch (Exception ex)
        {
            // Log the exception or handle it appropriately
            toastService.ShowError("An unexpected error occurred");
        }


    }
    public async Task AddInd()
    {

        if (PrimarySTO == null)
        {
            toastService.ShowError("Please Add any reference of this invoice Primary or None");
            return;
        }
        List<int> ChamberNos = new List<int>();
        if (!string.IsNullOrWhiteSpace(Chamber))
        {
            ChamberNos.AddRange(Chamber.Split(',')
                                       .Where(s => int.TryParse(s.Trim(), out _)) // Ensure valid numbers
                                       .Select(s => int.Parse(s.Trim())));
        }

        List<double> ChamberShortages = new List<double>();
        if (!string.IsNullOrWhiteSpace(Shortages))
        {
            ChamberShortages.AddRange(Shortages.Split(',')
                                               .Where(s => double.TryParse(s.Trim(), out _)) // Ensure valid numbers
                                               .Select(s => double.Parse(s.Trim())));
        }

        OCRSecDTO objj = new OCRSecDTO();
        objj.ProductName = Invoices.Product;
        objj.PrimaryInvoiceNumber = PrimarySTO;
        objj.ShippingLocation = Invoices.ShippingLoc;
        objj.RecievingLocation = Invoices.ReceivingLoc;
        objj.FileLocation = Invoices.FileLocation;
        objj.STONO = Invoices.STONo;
        objj.VehicleNo = Invoices.VehicleNo;
        objj.ExtractedID = Invoices.ExtractedID;
        objj.FillingDate = Invoices.InvoiceDate;
        objj.ChamberDetails = new List<ChamberDetailsDTO>();
        int count = 0;
        //  Invoices.Chambers = new List<ChambersDetailsSec>();
        foreach (var chamber in ChamberNos)
        {
            objj.ChamberDetails.Add(new ChamberDetailsDTO
                {
                    ChamberDip = 0,
                    ChamberNo = chamber,
                    ChamberQuantity = 0,
                    RecDip =0,
                    RecLiters =0,
                    ogra = 0,
                    rec_dip = 0,
                    ShortExcess = Math.Round((double)ChamberShortages[count]),

                });
                count++;
        }
        count = 0;
        // Continue with further logic if no zero RecDip is found

        bool isRecordUpdated = UpdateExtractedAddSecData(objj);
        await DeleteInvoiceRecordsAsync(objj.STONO);
        List<string> chambers = new List<string>();
        @foreach (var item2 in objj.ChamberDetails)
        {
            if (item2.ChamberNo == 1)
            {
                chambers.Add("chamber1");
            }
            if (item2.ChamberNo == 2)
            {
                chambers.Add("chamber2");
            }
            if (item2.ChamberNo == 3)
            {
                chambers.Add("chamber3");
            }
            if (item2.ChamberNo == 4)
            {
                chambers.Add("chamber4");
            }
            if (item2.ChamberNo == 5)
            {
                chambers.Add("chamber5");
            }
        }

        var obj = new SecondaryInvoice
            {
                primaryreference = PrimarySTO,
                vehicle = objj.VehicleNo,
                scondaryinvoice = objj.STONO,
                _date = objj.FillingDate.Value.Date,
                supplypoint = objj.ShippingLocation,
                product = objj.ProductName,
                receiivingpoint = objj.RecievingLocation,
                contractor = "Shakoor & Co.",
                chambers = chambers,
                user = Invoices.User
            };
        JsonSerializerOptions options = new JsonSerializerOptions
            {
                WriteIndented = true,
                ReferenceHandler = null
            };
        string jsonData = System.Text.Json.JsonSerializer.Serialize(obj, options);

        var scinvoice = await API.PostRequest($"Invoice/SaveSecondaryInvoice", jsonData);
        string Result = System.Text.Json.JsonSerializer.Deserialize<string>(scinvoice);
        if (Result == "200")
        {
            int InvoiceID = GetInvoiceID(objj.STONO);

            List<RecInv> receivingChambers = new List<RecInv>();
            foreach (var x in objj.ChamberDetails)
            {
                receivingChambers.Add(new RecInv
                    {
                        ch_no = x.ChamberNo,
                        disp_dip = x.ChamberQuantity,
                        dis_liters = x.ChamberDip,
                        invoiceno = InvoiceID,
                        InvoicePath = objj.FileLocation,
                        primarySTO = PrimarySTO,
                        RecDip = x.RecDip,
                        RecLiters = Math.Round(x.RecLiters),
                        rec_dip = x.rec_dip,
                        ShortExcess = Math.Round(x.ShortExcess),
                        ogra = x.ogra,
                    });
            }
            JsonSerializerOptions options2 = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData2 = System.Text.Json.JsonSerializer.Serialize(receivingChambers, options2);

            var scinvoice2 = await API.PostRequest($"Invoice/SaveSecondaryWithImage", jsonData2);
            string Result2 = System.Text.Json.JsonSerializer.Deserialize<string>(scinvoice);
            var pointDetailsList = new List<PointDetails>
{
    new PointDetails { InvoiceID = InvoiceID, TempF = Invoices.SummaryDetails.DispatchTemperature, SG =  Invoices.SummaryDetails.DispatchSG, Point = "S" },
    new PointDetails { InvoiceID = InvoiceID, TempF =  Invoices.SummaryDetails.ReceivingTemperature, SG =  Invoices.SummaryDetails.ReceivingSG, Point = "R" }
};

            InsertPointDetails(pointDetailsList);

            await JS.InvokeVoidAsync("closeCurrentTab");
        }

    }
    public void InsertPointDetails(List<PointDetails> pointDetailsList)
    {
        // SQL query template
        string query = @"
        INSERT INTO tblPointDetails (InvoiceID, TempF, SG, Point)
        VALUES (@invoiceID, @tempF, @sg, @point);";

        using (var connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            connection.Open();

            using (var transaction = connection.BeginTransaction())
            {
                try
                {
                    // Prepare a single command object
                    using (var command = new SqlCommand(query, connection, transaction))
                    {
                        // Add parameters (reuse them)
                        command.Parameters.Add("@invoiceID", SqlDbType.Int);
                        command.Parameters.Add("@tempF", SqlDbType.Float);
                        command.Parameters.Add("@sg", SqlDbType.Float);
                        command.Parameters.Add("@point", SqlDbType.NVarChar);

                        // Iterate over the list and add records
                        foreach (var pointDetails in pointDetailsList)
                        {
                            command.Parameters["@invoiceID"].Value = pointDetails.InvoiceID;
                            command.Parameters["@tempF"].Value = pointDetails.TempF;
                            command.Parameters["@sg"].Value = pointDetails.SG;
                            command.Parameters["@point"].Value = pointDetails.Point;

                            // Execute the insert for this record
                            command.ExecuteNonQuery();
                        }
                    }

                    // Commit transaction after all inserts
                    transaction.Commit();
                }
                catch (Exception)
                {
                    // Rollback transaction if any issue occurs
                    transaction.Rollback();
                    throw; // Re-throw the exception to handle it outside
                }
            }
        }
    }

    public class PointDetails
    {
        public int PointDetailID { get; set; } // Not used during insert, auto-generated
        public int InvoiceID { get; set; }
        public double TempF { get; set; }
        public double SG { get; set; }
        public string Point { get; set; }
    }

    public int GetInvoiceID(string stono)
    {
        // SQL query to check if STONO exists
        string query = "SELECT invoiceid FROM tblinvoices WHERE STONO = @stono";

        using (var connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            connection.Open();

            using (var command = new SqlCommand(query, connection))
            {
                // Add the parameter to the query
                command.Parameters.AddWithValue("@stono", stono);

                // Execute the query and get the result
                int count = Convert.ToInt32(command.ExecuteScalar() ?? 0);

                // If the count is greater than 0, the STONO exists
                return count;
            }
        }
    }
    public string GetInvoiceprimaryRef(string stono)
    {
        // SQL query to check if STONO exists
        string query = "SELECT primaryReference FROM tblinvoices WHERE STONO = @stono";

        using (var connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            connection.Open();

            using (var command = new SqlCommand(query, connection))
            {
                // Add the parameter to the query
                command.Parameters.AddWithValue("@stono", stono);

                // Execute the query and get the result
                object result = command.ExecuteScalar();

                // If result is null, return an empty string or handle accordingly
                return result?.ToString() ?? string.Empty;
            }
        }
    }


    public async Task DeleteInvoiceRecordsAsync(string secondaryInvoiceNo)
    {
        using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            await connection.OpenAsync();

            string query = @"
       DECLARE @SecondaryInvoiceNo NVARCHAR(50) = @InvoiceNo;
DECLARE @InvoiceID INT;

DECLARE InvoiceCursor CURSOR FOR
SELECT InvoiceID FROM tblInvoices WHERE STONo = @SecondaryInvoiceNo;

OPEN InvoiceCursor;

FETCH NEXT FROM InvoiceCursor INTO @InvoiceID;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Delete related records in other tables for the current InvoiceID
    DELETE FROM tblSecondaryTrips WHERE PrimaryReference = @SecondaryInvoiceNo;
    DELETE FROM tblInvoiceDetails WHERE InvoiceID = @InvoiceID;
    DELETE FROM tblDriverShortageLedger WHERE InvoiceNumber = @SecondaryInvoiceNo;

    -- Delete the record in tblInvoices for the current InvoiceID
    DELETE FROM tblInvoices WHERE InvoiceID = @InvoiceID;

    FETCH NEXT FROM InvoiceCursor INTO @InvoiceID;
END

CLOSE InvoiceCursor;
DEALLOCATE InvoiceCursor;

        ";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@InvoiceNo", secondaryInvoiceNo);

                await command.ExecuteNonQueryAsync();
            }
        }
    }

    public bool UpdateExtractedAddSecData(OCRSecDTO invoiceData)
    {
        try
        {
            // SQL update query for tblExtracted_Data
            string sqlUpdateQuery = @"
        UPDATE tblExtracted_Data
        SET
            STONO = @STONO,
            RecievingLocation = @RecievingLocation,
            ShippingLocation = @ShippingLocation,
            VehicleNo = @VehicleNo,
            FillingDate = @FillingDate,
IsInvoiceGenerated='True',
ProductName=@ProductName
        WHERE ExtractedID = @ExtractedID";

            using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
            {
                connection.Open();

                // Update tblExtracted_Data
                using (SqlCommand command = new SqlCommand(sqlUpdateQuery, connection))
                {
                    command.Parameters.AddWithValue("@STONO", invoiceData.STONO);
                    command.Parameters.AddWithValue("@RecievingLocation", invoiceData.RecievingLocation);
                    command.Parameters.AddWithValue("@ShippingLocation", invoiceData.ShippingLocation);
                    command.Parameters.AddWithValue("@VehicleNo", invoiceData.VehicleNo);
                    command.Parameters.AddWithValue("@FillingDate", invoiceData.FillingDate);
                    command.Parameters.AddWithValue("@ExtractedID", invoiceData.ExtractedID);
                    command.Parameters.AddWithValue("@ProductName", invoiceData.ProductName);

                    int rowsAffected = command.ExecuteNonQuery();
                    if (rowsAffected <= 0)
                    {
                        return false; // No rows updated in tblExtracted_Data
                    }
                }
            }

            return true; // Update and insert successful
        }
        catch (Exception ex)
        {
            // Handle or log the exception as necessary
            return false;
        }
    }


    string FormatValueWithColor(double value, out string color)
    {
        if (value < 0)
        {
            color = "red";
            value = Math.Round(value);
            return Math.Abs(value).ToString();
        }
        else
        {
            color = "blue";
            return value.ToString();
        }
    }
    string FormatShareWithColor(double value, out string color)
    {
        if (value > 0)
        {
            color = "red";
            value = Math.Round(value);
            return Math.Abs(value).ToString();
        }
        else
        {
            color = "black";
            return Math.Abs(value).ToString("0.00");
        }
    }

    string FormatPerWithColor(double value, out string color)
    {
        if (value < 0)
        {
            color = "red";
            return Math.Abs(value).ToString("0.00") + "%";
        }
        else
        {
            color = "blue";
            return value.ToString();
        }
    }

    public async Task<int> GetShippingChamberDetails(string VehicleID)
    {

        try
        {


            var VehicleIDs = await API.GetRequest($"Invoice/GetEuroChamber/{VehicleID}");
            if (VehicleIDs != "[]")
            {
                Invoices.Chambers = new List<ChamberData>();
                Invoices.SummaryDetails = new SummaryData();
                Invoices.Chambers = JsonConvert.DeserializeObject<List<ChamberData>>(VehicleIDs);

                return 200;
            }
            else
            {
                return 404;
            }
        }
        catch (Exception ex)
        {
            return 404;
            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("console.log", "");
                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();
                // await JS.InvokeVoidAsync("initializeDropzone");


            }
            catch (Exception ex)
            {
                _isJsReady = false; // JavaScript is not yet ready
                string e = ex.Message;
            }

        }
        else
        {

        }
    }


    protected override async void OnInitialized()
    {
        string encodedJson = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;

        if (encodedJson.Contains("OCR=") || encodedJson.Contains("Edit="))
        {
            // Determine the query type and decode the Base64 string
            string queryKey = encodedJson.Contains("OCR=") ? "OCR=" : "Edit=";
            encodedJson = encodedJson.Split(queryKey)[1];
            string base64EncodedJson = HttpUtility.UrlDecode(encodedJson);
            byte[] base64EncodedBytes = Convert.FromBase64String(base64EncodedJson);
            string jsonString = Encoding.UTF8.GetString(base64EncodedBytes);

            if (queryKey == "OCR=")
            {
                // Deserialize the JSON string into EuroCal
                Invoices = JsonConvert.DeserializeObject<EuroCal>(jsonString);

                if (!string.IsNullOrWhiteSpace(Invoices?.VehicleNo))
                {
                    isChambersAvailable = true;
                    int chamberStatus = await GetShippingChamberDetails(Invoices.VehicleNo);
                    if (chamberStatus == 404)
                    {
                        AddChamber = true;
                        toastService.ShowError($"No Chamber Details for Vehicle {Invoices.VehicleNo}");
                    }
                    isChambersAvailable = false;

                }
                else
                {
                    toastService.ShowError($"No Vehicle..");

                }

                // Handle file location
                if (!string.IsNullOrEmpty(Invoices?.FileLocation))
                {
                    FileLocation = Invoices.FileLocation.Replace("191.96.196.61", "www.shakoorfms.com/imgs");
                }
            }
            else if (queryKey == "Edit=")
            {
                // Deserialize the JSON string into Invoicing
                var rec = JsonConvert.DeserializeObject<Invoicing>(jsonString);
                if (rec != null)
                {
                    Invoices = MapInvoice(rec);
                    if (rec.Details.STONo != null)
                    {
                        PrimarySTO = GetInvoiceprimaryRef(rec.Details.STONo);
                    }
                    Shortage = rec.CalculationDifference.ShortageCharge;
                    IsEdit = true;



                  
                }

              

            }

            // Determine InvoiceType
            IsSecondary = Invoices?.InvoiceType == "sc";
            InvoiceType = Invoices?.InvoiceType == "pk"
                ? "Add Hascol Primary Invoice"
                : "Add Hascol Secondary Invoice";

            // Set the user
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            Invoices.User = authState.User.Identity.Name ?? "";
            PrimaryInvoices = await GetPrimary(Invoices.ExtractedID);

            StateHasChanged();
        }

    }
    private int GetChamberCapacity(int chamberNumber, ShippingDetails shippingDetail)
    {
        switch (chamberNumber)
        {
            case 1: return shippingDetail.Chamber1?.ChamberQuantity ?? 0;
            case 2: return shippingDetail.Chamber2?.ChamberQuantity ?? 0;
            case 3: return shippingDetail.Chamber3?.ChamberQuantity ?? 0;
            case 4: return shippingDetail.Chamber4?.ChamberQuantity ?? 0;
            case 5: return shippingDetail.Chamber5?.ChamberQuantity ?? 0;
            default: return 0;
        }
    }

    private int GetChamberDispatchDips(int chamberNumber, ShippingDetails shippingDetail)
    {
        switch (chamberNumber)
        {
            case 1: return shippingDetail.Chamber1?.LorryDip ?? 0;
            case 2: return shippingDetail.Chamber2?.LorryDip ?? 0;
            case 3: return shippingDetail.Chamber3?.LorryDip ?? 0;
            case 4: return shippingDetail.Chamber4?.LorryDip ?? 0;
            case 5: return shippingDetail.Chamber5?.LorryDip ?? 0;
            default: return 0;
        }
    }

    private int GetChamberReceivingDips(int chamberNumber, ReceivingDetail receivingDetail)
    {
        switch (chamberNumber)
        {
            case 1: return receivingDetail.Chamber1?.LorryDip ?? 0;
            case 2: return receivingDetail.Chamber2?.LorryDip ?? 0;
            case 3: return receivingDetail.Chamber3?.LorryDip ?? 0;
            case 4: return receivingDetail.Chamber4?.LorryDip ?? 0;
            case 5: return receivingDetail.Chamber5?.LorryDip ?? 0;
            default: return 0;
        }
    }

    private ShortageChamber? GetChamberShortage(int chamberNumber, ShortageCalculation shortageCalculation)
    {
        switch (chamberNumber)
        {
            case 1: return shortageCalculation.Chamber1;
            case 2: return shortageCalculation.Chamber2;
            case 3: return shortageCalculation.Chamber3;
            case 4: return shortageCalculation.Chamber4;
            case 5: return shortageCalculation.Chamber5;
            default: return null;
        }
    }

    private double CalculatePercentage(double carriageShortage, double dispatchAt85F)
    {
        return (carriageShortage / dispatchAt85F) * 100;
    }
    public EuroCal MapInvoice(Invoicing rec)
    {
        EuroCal objs = new EuroCal();

        // Map GeneralDetails
        objs.Product = rec.Details.Product;
        objs.VehicleNo = rec.Details.TankLorryNO;
        objs.Contractor = rec.Details.Contractor;
        objs.InvoiceDate = rec.Details.Date;
        objs.ReceivingLoc = rec.Details.ReceivingLocation;
        objs.STONo = rec.Details.STONo;
        objs.ShippingLoc = rec.Details.SupplyPoint;
        objs.FileLocation = rec.InvoiceFilePath;
        objs.InvoiceType = rec.invoiceType;
        objs.ExtractedID = rec.ExtarctedID;
        // Map general properties
        objs.User = rec.User;
        objs.ExtractedID = rec.ExtarctedID;
        objs.FileLocation = rec.InvoiceFilePath;
        objs.SummaryDetails = new SummaryData();
        // Map SummaryData (dispatch and receiving details)
        objs.SummaryDetails.DispatchTemperature = (double)rec.ShippingDetail.TempF;
        objs.SummaryDetails.DispatchSG = Math.Round(rec.ShippingDetail.SG, 3);
        objs.SummaryDetails.ReceivingSG = Math.Round(rec.ReceivingDetail.SG, 3);
        objs.SummaryDetails.ReceivingTemperature = (double)rec.ReceivingDetail.TempF;
        FileLocation = objs.FileLocation;

        // Populate the Chambers list by mapping each chamber from ShippingDetails, ReceivingDetail, and ShortageCalculation
        objs.Chambers = new List<ChamberData>();

        // Map each chamber's data from ShippingDetail, ReceivingDetail, and ShortageCalculation
        for (int i = 1; i <= 5; i++)
        {
            var chamber = new ChamberData
                {
                    ChamberNumber = i,
                    Capacity = GetChamberCapacity(i, rec.ShippingDetail),
                    DispatchDips = GetChamberDispatchDips(i, rec.ShippingDetail),
                    ReceivingDips = GetChamberReceivingDips(i, rec.ReceivingDetail),
                };

            // Shortage calculation
            var shortageChamber = GetChamberShortage(i, rec.ShortageCalculation);

            // Add chamber only if DispatchDips and ReceivingDips are non-zero
            if (chamber.DispatchDips != 0 && chamber.ReceivingDips != 0)
            {
                objs.Chambers.Add(chamber);
            }
        }


        // You may also need to add some additional calculations based on the calculated data
        // For example, if there's any logic related to the CarriageShortage, or the final percentage.

        objs.SummaryDetails.Percentage = CalculatePercentage(objs.SummaryDetails.CarriageShortage, objs.SummaryDetails.DispatchAt85F);


        return objs;
    }


    public async Task Navigate()
    {
        await JS.InvokeVoidAsync("openInNewTab2", $"/vehicles");

    }



}

