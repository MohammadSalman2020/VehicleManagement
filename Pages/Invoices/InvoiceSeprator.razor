@using VehicleManagement.Models.General
@inject IToastService toastService
@using VehicleManagement.Models.DB
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@* <div class="col-md-12">
    <div class="card">

        <div class="card-body">

            <div class="row">
                <div class="col-md-8">
                    <div class="form-group">
                        <label for="example-text-input" class="form-control-label">Paste here</label>
                        <textarea class="form-control" @bind="@clipboardText"></textarea>

                    </div>
                </div>
                <div class="col-md-4" style="padding-top: 40px;text-align:center;">
                    <div class="form-group">
                        <button class="btn btn-primary btn-sm ms-auto" @onclick="GetExcelFormat">Submit</button>

                    </div>
                </div>

            </div>

        </div>
    </div>
</div> *@

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header pb-0">
                    <h6>Invoice Details</h6>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                        <table class="table align-items-center mb-0">
                            <thead>
                                <tr>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Invoice #</th>
                                    <th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">Filling Date</th>
                                    <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Vehicle Number</th>
                                    <th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">Decenting Point</th>
                                    <th class="text-secondary opacity-7"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_InvoiceList.Count > 0)
                                {
                                    @foreach (var item in _InvoiceList)
                                    {


                                        <tr>
                                            <td>
                                                <div class="d-flex px-2 py-1">
                                                    <div>
                                                        <img src="css/assets/Truck.jpg" class="avatar avatar-sm me-3" alt="user1">
                                                    </div>
                                                    <div class="d-flex flex-column justify-content-center">
                                                        <h6 class="mb-0 text-sm">@item.InvoiceNo</h6>

                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <p class="text-xs font-weight-bold mb-0">@item.FillingDate</p>

                                            </td>
                                            <td class="align-middle text-center">
                                                <span class="text-secondary text-xs font-weight-bold">@item.VehicleNumber</span>
                                            </td>
                                            <td class="align-middle text-center">
                                                <span class="text-secondary text-xs font-weight-bold">@item.DecentingPoint</span>
                                            </td>
                                            <td class="align-middle">
                                                <a @onclick="ShowMessage" class="text-secondary font-weight-bold text-xs cursor-pointer">
                                                    View
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


</div>

@code {

    private string? clipboardText;

    public List<InvoiceList> _InvoiceList { get; set; }


    protected override async Task OnInitializedAsync()
    {
        LoadData();
    }
    public async Task ShowMessage()
    {
        NavigationManager.NavigateTo("/invoicedisplay");
        // toastService.ShowInfo("In-Progress");
    }
    public async Task LoadData()
    {
        _InvoiceList = new List<InvoiceList>();
        var rec = (from a in DbContext.tblInvoice
                   select new
                   {
                       a.InvoiceNo,
                       a.FillingDate,
                       a.DecentingPoint,
                       a.VehicleNumber
                   }).ToList();
        if (rec.Count > 0)
        {

            foreach (var item in rec)
            {

                _InvoiceList.Add(new InvoiceList
                    {
                        DecentingPoint = item.DecentingPoint,
                        FillingDate = item.FillingDate,
                        InvoiceNo = item.InvoiceNo,
                        VehicleNumber = item.VehicleNumber
                    });
            }
        }
    }
    public async Task GetExcelFormat()
    {
        try
        {
            StockTransfer stock = new StockTransfer();

            if (clipboardText != null || clipboardText != "")
            {


                string[] dataLines = clipboardText.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                DispatchSummary summary = new DispatchSummary();
                ReceivingDispatchSummary R_Summary = new ReceivingDispatchSummary();

                if (dataLines[0].Contains("Hi-Tech Lubricants Limited"))
                {
                    for (int i = 0; i < dataLines.Length; i++)

                    {

                        // Split each line into field and value
                        string[] parts = dataLines[i].Split(new[] { '\t' }, StringSplitOptions.RemoveEmptyEntries);
                        if (parts.Length != 0)
                        {
                            #region General Details

                            if (i == 4)
                            {
                                stock.STONumber = parts[1];
                                stock.FillingDate = Convert.ToDateTime(parts[3]);
                            }
                            else if (i == 5)
                            {
                                stock.ShippingLocation = parts[1];
                                stock.ReceivingLocation = parts[3];
                            }
                            else if (i == 6)
                            {
                                stock.VehicleNumber = parts[1];
                                stock.CarriageContractor = parts[3];
                            }
                            else if (i == 7)
                            {
                                stock.DispatchDateTime = parts[1];
                                stock.TotalCapacity = parts[3];
                            }
                            else if (i == 8)
                            {

                                if (parts[0] == "Product Name")
                                {
                                    stock.ProductName = parts[1];
                                    stock.DriverNameContact = parts[3];
                                }


                            }

                            #endregion

                            #region Disptach Details
                            else if (i == 12)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 13; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;

                                    switch (chamberIndex)
                                    {
                                        case 0:
                                            stock.Chamber1.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 1:
                                            stock.Chamber2.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.Chamber3.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 3:
                                            stock.Chamber4.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 4:
                                            stock.Chamber5.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;
                                    }
                                }





                            }
                            else if (i == 13)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 13; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;

                                    switch (chamberIndex)
                                    {
                                        case 0:
                                            stock.Chamber1.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 1:
                                            stock.Chamber2.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.Chamber3.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 3:
                                            stock.Chamber4.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 4:
                                            stock.Chamber5.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;
                                    }
                                }



                            }

                            else if (i == 14)
                            {

                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 13; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;

                                    switch (chamberIndex)
                                    {
                                        case 0:
                                            stock.Chamber1.RefDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 1:
                                            stock.Chamber2.RefDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.Chamber3.RefDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 3:
                                            stock.Chamber4.RefDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 4:
                                            stock.Chamber5.RefDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;
                                    }
                                }



                            }
                            else if (i == 16)
                            {
                                stock.SealNo = parts[1];
                                stock.TotalSeals = parts[3];

                            }

                            #endregion

                            #region Dispatch Summary

                            else if (i == 20)
                            {

                                summary.Product = parts[0];
                                summary.QuantityNat = parts[1];
                                summary.QuantityL85 = parts[2];
                                summary.Temp = parts[3];
                                summary.SG = parts[4];



                            }

                            #endregion

                            #region Receiving Details
                            else if (i == 24)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 13; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;

                                    switch (chamberIndex)
                                    {
                                        case 0:
                                            stock.R_Chamber1.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 1:
                                            stock.R_Chamber2.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.R_Chamber3.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 3:
                                            stock.R_Chamber4.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 4:
                                            stock.R_Chamber5.ProductVolume = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;
                                    }
                                }

                            }

                            else if (i == 25)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 13; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;

                                    switch (chamberIndex)
                                    {
                                        case 0:
                                            stock.R_Chamber1.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 1:
                                            stock.R_Chamber2.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.R_Chamber3.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 3:
                                            stock.R_Chamber4.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 4:
                                            stock.R_Chamber5.ProductDip = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;
                                    }
                                }

                            }

                            else if (i == 26)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 13; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;

                                    switch (chamberIndex)
                                    {
                                        case 0:
                                            stock.R_Chamber1.Product_Diff_MM = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 1:
                                            stock.R_Chamber2.Product_Diff_MM = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.R_Chamber3.Product_Diff_MM = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 3:
                                            stock.R_Chamber4.Product_Diff_MM = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 4:
                                            stock.R_Chamber5.Product_Diff_MM = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;
                                    }
                                }

                            }
                            else if (i == 27)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 13; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;

                                    switch (chamberIndex)
                                    {
                                        case 0:
                                            stock.R_Chamber1.Product_Diff_LTR = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 1:
                                            stock.R_Chamber2.Product_Diff_LTR = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.R_Chamber3.Product_Diff_LTR = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 3:
                                            stock.R_Chamber4.Product_Diff_LTR = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 4:
                                            stock.R_Chamber5.Product_Diff_LTR = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;
                                    }
                                }

                            }
                            #endregion

                            #region Receiving Summary

                            else if (i == 31)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 13; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;
                                    R_Summary.Product = rowData[0];
                                    switch (chamberIndex)
                                    {
                                        case 1:
                                            R_Summary.QuantityNat = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            R_Summary.QuantityL85 = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 3:
                                            R_Summary.Temp = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 4:
                                            R_Summary.SG = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;
                                    }
                                }


                            }
                            #endregion

                            #region Shortage Calculation
                            else if (i == 35)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 7; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;
                                    R_Summary.Product = rowData[0];
                                    switch (chamberIndex)
                                    {
                                        case 1:
                                            stock.DisQty.Natural = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.DisQty.F85 = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;


                                    }
                                }


                            }
                            else if (i == 36)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 7; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;
                                    R_Summary.Product = rowData[0];
                                    switch (chamberIndex)
                                    {
                                        case 1:
                                            stock.R_Qty.Natural = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.R_Qty.F85 = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;


                                    }
                                }


                            }
                            else if (i == 37)
                            {
                                string[] rowData = dataLines[i].Split('\t');

                                for (int col = 1; col < rowData.Length && col <= 7; col += 3)
                                {
                                    int chamberIndex = (col - 1) / 3;
                                    R_Summary.Product = rowData[0];
                                    switch (chamberIndex)
                                    {
                                        case 1:
                                            stock.ShortageLtrs.Natural = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;

                                        case 2:
                                            stock.ShortageLtrs.F85 = string.IsNullOrEmpty(rowData[col]) ? "0" : rowData[col];
                                            break;


                                    }
                                }


                            }
                            else if (i == 38 && parts.Length > 1)
                            {
                                stock.ShortageMM = parts[1];
                            }
                            else if (i == 39 && parts.Length > 1)
                            {
                                stock.ShortageExempt = parts[1];
                            }
                            else if (i == 40 && parts.Length > 1)
                            {
                                stock.ShortageCharge = parts[1];
                            }
                            else if (i == 41 && parts.Length > 1)
                            {
                                stock.OtherShortage = parts[1];
                            }
                            else if (i == 42 && parts.Length > 1)
                            {
                                stock.TotalShortage = parts[1];
                            }
                            else if (i == 54)
                            {
                                stock.ShippingAddress = parts[0];
                            }
                            #endregion

                             

                        }

                    }
                    tblInvoice obj = new tblInvoice();
                    obj.DecentingPoint = stock.ReceivingLocation;
                    obj.InvoiceNo = stock.STONumber;
                    obj.VehicleNumber = stock.VehicleNumber;
                    obj.FillingDate = stock.FillingDate.ToShortDateString();

                    DbContext.tblInvoice.Add(obj);

                    await DbContext.SaveChangesAsync();
                    toastService.ShowSuccess("Invoice Added Success");
                    await LoadData();
                    clipboardText = string.Empty;
                }
                else
                {
                    toastService.ShowError("Please copy the correct format");

                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Internal Error While Mapping");
        }

    }

}
