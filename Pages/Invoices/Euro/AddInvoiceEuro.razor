@page "/AddEuroInvoice"
@using Majorsoft.Blazor.Components.Tabs
@using System.Linq;
@using System.Text.Json
@using System.Web
@using System.Text
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Reflection
@using Microsoft.Data.SqlClient
@using Newtonsoft.Json
@using System.Data
@using System.Text.Json.Serialization
@using VehicleManagement.ApiService
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Login
@using VehicleManagement.Pages.Redirects;
@using static VehicleManagement.Pages.Invoices.ReceiveSecondary
@using static VehicleManagement.Pages.Invoices.AddSecondarInvoice
@inject IWebHostEnvironment Environment
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IApiService API
@inject IJSRuntime JS
@inject AuthenticationStateProvider _authenticationStateProvider
  @inject IConfiguration _configuration
<style>
    body {
        font-family: Arial, sans-serif;
    }

    .container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        /*   padding: 10px; */
    }

    .title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .details, .shipping, .receiving {
        font-weight: bold;
        font-size: x-small;
        color: black;
        width: 100%;
        border-collapse: collapse;
    }

        .details td, .shipping td, .receiving td {
            border: 1px solid black;
            padding: 4px;
            text-align: center;
        }

        .details td {
            width: 25%;
        }

        .details .header, .shipping .header, .receiving .header {
            color: white;
            font-weight: bold;
            background-color: #5e72e4;
        }


    .header-span {
        display: block;
        font-size: 16px;
        font-weight: bold;
        color: white;
        background-color: #5e72e4;
        text-align: center;
        padding: 5px;
        border: 1px solid black;
    }

    .footer {
        font-weight: bold;
        text-align: center;
        background-color: #d9d9d9;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    .col-lgg-6 {
        width: 100%;
        max-width: 50%;
        box-sizing: border-box;
        padding: 10px;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .dropzone {
        max-width: 600px;
        height: 600px;
        border: 2px dashed #3498db;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
        border-radius: 10px;
        color: #3498db;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

        .dropzone p {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            margin: 0;
            pointer-events: none;
        }

        .dropzone.hovered {
            border-color: #2ecc71;
            background-color: #ecf0f1;
        }

    .file-input {
        display: none;
    }

    .preview {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

        .preview img {
            max-width: 100%;
            max-height: 100%;
            display: none;
            border-radius: 10px;
        }



    .text-size {
        font-size: x-small;
        text-align: center;
    }
</style>
<AuthorizeView>
    <Authorized>
        <Nav PageName="@InvoiceType" />









        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="card-body px-0 pt-0 pb-2">


                            <div class="row">
                                <div class="col-lgg-6">
                                    <div class="container">

                                        <table class="details">
                                            <tr>
                                                <td>Tank Lorry No</td>
                                                <td> <input type="text" tabindex="1" id="vehicleID" required placeholder="Tank Lorry No" @onchange="GetChambersQuantity" onkeyup="altercolspan()" value="@Invoices.VehicleNo" class="form-control"></td>
                                                <td>Date</td>
                                                <td>  <input type="date" tabindex="2" placeholder="Date" @bind-value="@Invoices.InvoiceDate" class="form-control"></td>
                                            </tr>
                                            <tr>
                                                <td>STO NO</td>
                                                <td>   <input type="text" tabindex="3" placeholder="STO No" @bind-value="@Invoices.STONo" class="form-control"></td>
                                                <td>Shipping Location</td>
                                                <td>  <input type="text" tabindex="4" placeholder="Supply Point" @bind-value="@Invoices.ShippingLoc" class="form-control"></td>
                                            </tr>
                                            <tr>
                                                <td>User</td>
                                                <td> @Invoices.User</td>
                                                <td>Receiving Location</td>
                                                <td>   <input type="text" tabindex="5" placeholder="Receiving Location" @bind-value="@Invoices.ReceivingLoc" class="form-control"></td>
                                            </tr>
                                            <tr>
                                                <td>Product</td>
                                                <td>  <input type="text" tabindex="6" placeholder="Product" @bind-value="@Invoices.Product" class="form-control"></td>
                                                <td>Contractor</td>
                                                <td>  <input type="text" tabindex="7" placeholder="Contractor" @bind-value="@Invoices.Contractor" class="form-control"></td>
                                            </tr>
                                            @if (IsSecondary)
                                            {
                                                <tr>
                                                    <td colspan="12" style="text-align:center; vertical-align:middle;">
                                                        <div class="form-group d-flex justify-content-center align-items-center" style="height:100%;">
                                                            <button class="btn btn-success btn-sm" @onclick="OpenModal">Link Primary</button>
                                                        </div>
                                                    </td>
                                                </tr>

                                                @if(PrimarySTO is not null)
                                                {
                                                    <tr>
                                                        <td colspan="12" style="text-align:center; vertical-align:middle;">
                                                            <div class="form-group d-flex justify-content-center align-items-center" style="height:100%;">
                                                                <label style="font-size:large;color:#5e72e4;">Primary Reference - @PrimarySTO</label>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                         

                                            }
                                        </table>



                                        @if (Invoices.Chambers!=null)
                                        {
                                            @if (Invoices.Chambers.Count>0)
                                            {
                                                <table class="shipping" style="margin-top:7px;">
                                                    <tr class="header">
                                                        <td>Chamber (Shipping)</td>
                                                        @foreach (var item in Invoices.Chambers)
                                                        {
                                                            <td>
                                                                @item.ChamberNumber

                                                                <img style="height:20px;cursor:pointer;" @onclick="@(()=>RemoveChamber(item))" src="css/minus.png" />
                                                            </td>
                                                        }
                                                        @if (Invoices.Chambers.Count!=5)
                                                        {
                                                            <td>
                                                                <img style="height:20px;cursor:pointer;" @onclick="AddNewChamber" src="css/plus.png" />
                                                            </td>
                                                        }
                                                    </tr>

                                                    <tr>
                                                        <td>Temp F</td>
                                                        <td colspan="5">  <input type="number" tabindex="8" placeholder="Temp F" @bind-value="Invoices.SummaryDetails.DispatchTemperature" class="form-control" id="TempD" onfocus="selectAllInputValue('TempD')"></td>
                                                    </tr>
                                                    <tr>
                                                        <td>S.G</td>
                                                        <td colspan="5"><input step="0.01" type="number" tabindex="9" placeholder="Gravity" @bind-value="Invoices.SummaryDetails.DispatchSG" class="form-control" id="SGD" onfocus="selectAllInputValue('SGD')"></td>
                                                    </tr>

                                                    <tr>
                                                        <td>Chamber Quantity</td>
                                                        @foreach (var item in Invoices.Chambers.Select((value, index) => new { value, index }))
                                                        {
                                                            @if (item.index == Invoices.Chambers.Count() - 1)
                                                            {
                                                                @*      @if (item.value.Capacity == 0)
                                                { *@
                                                                <td colspan="5">
                                                                    <input type="number" placeholder="Chamber Qty" id="@item.value.ChamberNumber" onfocus="selectAllInputValue(@item.value.ChamberNumber)" @bind-value="@item.value.Capacity" class="form-control">
                                                                </td>
                                                                @*    }
                                                else
                                                {
                                                <td colspan="5">
                                                @item.value.Capacity
                                                </td>
                                                } *@
                                                            }
                                                            else
                                                            {
                                                                @*   @if (item.value.Capacity == 0)
                                                { *@
                                                                <td>
                                                                    <input type="number" placeholder="Chamber Qty" @bind-value="@item.value.Capacity" class="form-control" id="@item.value.ChamberNumber" onfocus="selectAllInputValue(@item.value.ChamberNumber)">
                                                                </td>
                                                                @*    }
                                                else
                                                {
                                                <td>
                                                @item.value.Capacity
                                                </td>
                                                } *@
                                                            }
                                                        }



                                                    </tr>
                                                    <tr>
                                                        <td>Tank Lorry Product Dips(MM)</td>
                                                        @foreach (var item in Invoices.Chambers.Select((value, index) => new { value, index }))
                                                        {
                                                            if (item.index == Invoices.Chambers.Count() - 1)
                                                            {
                                                                @*   if (item.value.DispatchDips == 0)
                                                { *@
                                                                <td colspan="5">
                                                                    <input type="number" placeholder="Chamber Qty" @bind-value="@item.value.DispatchDips" class="form-control" id="@item.value.DispatchDips" onfocus="selectAllInputValue(@item.value.DispatchDips)">
                                                                </td>
                                                                @*   }
                                                else
                                                {
                                                <td colspan="5">
                                                @item.value.DispatchDips
                                                </td>
                                                } *@
                                                            }
                                                            else
                                                            {
                                                                @*    if (item.value.DispatchDips == 0)
                                                { *@
                                                                <td>
                                                                    <input type="number" placeholder="Chamber Qty" @bind-value="@item.value.DispatchDips" id="@item.value.DispatchDips" onfocus="selectAllInputValue(@item.value.DispatchDips)" class="form-control">
                                                                </td>
                                                                @*    }
                                                else
                                                {
                                                <td>
                                                @item.value.DispatchDips
                                                </td>
                                                } *@
                                                            }
                                                        }



                                                    </tr>
                                                </table>

                                                <table class="receiving">
                                                    <tr class="header">
                                                        <td>Chamber (Receiving)</td>
                                                        @foreach (var item in Invoices.Chambers)
                                                        {
                                                            <td>@item.ChamberNumber</td>
                                                        }
                                                    </tr>
                                                    <tr>
                                                        <td>Temp F</td>
                                                        <td colspan="5">
                                                            <input type="number" tabindex="20" placeholder="Tempreture F" @bind-value="Invoices.SummaryDetails.ReceivingTemperature" id="TempR" onfocus="selectAllInputValue('TempR')" class="form-control">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>S.G</td>
                                                        <td colspan="5">
                                                            <input type="number" tabindex="21" placeholder="Gravity" @bind-value="Invoices.SummaryDetails.ReceivingSG" id="SGR" onfocus="selectAllInputValue('SGR')" class="form-control">
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>Chamber Quantity</td>
                                                        @foreach (var item in Invoices.Chambers)
                                                        {
                                                            <td>
                                                                @Math.Round(item.ReceivedQuantity)
                                                            </td>
                                                        }
                                                    </tr>
                                                    <tr>
                                                        <td>Tank Lorry Product Dips(MM)</td>

                                                        @foreach (var item in Invoices.Chambers)
                                                        {
                                                            <td>
                                                                <input type="number" tabindex="22" placeholder=" Tank Lorry Product Dips(MM)" @bind-value="item.ReceivingDips" class="form-control" id="@item.ReceivingDips" onfocus="selectAllInputValue(@item.ReceivingDips)">
                                                            </td>
                                                        }
                                                    </tr>
                                                </table>


                                                <table class="receiving">
                                                    <tr>

                                                        <td>Temp. Difference (Desp. vs Rec.)</td>
                                                        @{
                                                            string color4;
                                                            string value4 = FormatValueWithColor(Invoices.SummaryDetails.TempDifference, out color4);
                                                        }
                                                        <td style="color: @color4;">@value4</td>
                                                        <td>Dispatch 85</td>
                                                        <td>@Invoices.SummaryDetails.DispatchAt85F</td>
                                                        <td>Recieve 85</td>
                                                        <td>@Invoices.SummaryDetails.ReceivedAt85F</td>
                                                    </tr>
                                                    <tr>
                                                        <td>Company Share On Shortage</td>
                                                        @{
                                                            string color1;
                                                            string value1 = FormatShareWithColor(Invoices.SummaryDetails.CompanyShareOnShortage, out color1);
                                                        }
                                                        <td style="color: @color1;">@value1</td>
                                                        <td>Percentage</td>
                                                        @{
                                                            string color2;
                                                            string value2 = FormatPerWithColor(Invoices.SummaryDetails.Percentage, out color2);
                                                        }
                                                        <td style="color: @color2;">@value2</td>



                                                        <td>Carriage Shortage</td>
                                                        @{
                                                            string color3;
                                                            string value3 = FormatValueWithColor(Invoices.SummaryDetails.CarriageShortage, out color3);
                                                        }
                                                        <td style="color: @color3;">@value3</td>



                                                    </tr>
                                                    <tr>
                                                        <td colspan="3">Status</td>
                                                        <td colspan="3" style="color:@(Invoices.SummaryDetails.CarriageShortage<0?"Red":"Blue")">@Invoices.SummaryDetails.Status</td>
                                                    </tr>
                                                </table>
                                            }
                                        }
                                        else
                                        {
                                            <br />
                                            <DataLoaderComponent IsLoading="@isChambersAvailable" LoadingText="Loading Chambers..." />
                                        }







                                        <div class="col-md-12" style="margin-top: 7px;">
                                            <div class="row">

                                                @if (Invoices!=null&&Invoices.Chambers!=null)
                                                {
                                                    @if (Invoices.STONo!="" && Invoices.VehicleNo!="" && Invoices.Chambers.Count>0)
                                                    {
                                                        <div class="col-md-12">
                                                            <div class="form-group" style="text-align:center;">
                                                                @if (IsEdit)
                                                                {
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="Update">Update</button>

                                                                }
                                                                else
                                                                {
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="Save">Save</button>

                                                                }
                                                                <button class="btn btn-warning btn-sm ms-auto" @onclick="Cal">Refresh Calculation</button>
                                                            </div>
                                                        </div>
                                                    }
                                                }


                                                @if (AddChamber)
                                                {
                                                    <div class="col-md-12">
                                                        <div class="form-group" style="text-align:center;">


                                                            <button class="btn btn-info btn-sm ms-auto" @onclick="Navigate">Add Chamber</button>

                                                        </div>
                                                    </div>

                                                }
                                            </div>
                                        </div>




                                    </div>
                                </div>

                                <div class="col-lgg-6">
                                    <div class="table-responsive inv-img">
                                        <div class="image-container2">
                                            <img id="mainImage2"
                                                 src="@FileLocation"
                                                 alt="Zoomable Image" />
                                        </div>
                                    </div>
                                </div>



                            </div>



                        </div>
                    </div>
                </div>
            </div>
        </div>
        <Modal @ref="modal" Title="Primary Invoices">
            <Body>
                <div class="col-md-12">
                    <div class="card" style="height:410px;overflow-x:scroll;">

                        <div class="card-body">
                            <div class="row">
                                <div class="card-body px-0 pt-0 pb-2">
                                    <div class="table-responsive p-0">
                                        <table class="table align-items-center mb-0" id="GetPrimariesTable">

                                            <thead>
                                                <tr>
                                                    <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center"></th>

                                                    <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">STO No</th>
                                                    <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Shipping Location</th>
                                                    <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Receiving Location</th>
                                                    <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Vehicle #</th>
                                                    <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Date</th>
                                                    <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Product</th>

                                                </tr>
                                            </thead>


                                            <tbody>
                                                @if (PrimaryInvoices.Count>0)
                                                {


                                                    @foreach (var item in PrimaryInvoices)
                                                    {
                                                        // Check if the current STO is the selected one
                                                        bool isSelected = item.STO == PrimarySTO;
                                                        string rowClass = isSelected ? "text-white" : "";
                                                        string rostyle = isSelected ? "background:#2196F3 !important;" : "";

                                                        <tr class="@rowClass" style="@rostyle">
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0 text-center" style="cursor:pointer;color:black;" @onclick="() => SelectPrimarySTO(item.STO)">@(isSelected ? "Remove" : "Select")</p>
                                                            </td>
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">@item.STO</p>
                                                            </td>
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">@item.ShippingLocation</p>
                                                            </td>
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">@item.ReceivingLocation</p>
                                                            </td>
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">@item.Vehicle</p>
                                                            </td>
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">@item.InvoiceDate?.ToString("dd-MM-yyyy")</p>
                                                            </td>
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">@item.Product</p>
                                                            </td>
                                                        </tr>
                                                    }
                                                    @if (PrimarySTO==null || PrimarySTO!="none")
                                                    {
                                                        <tr style="background:red;color:white;">
                                                            <td class="align-middle text-center" style="text-align:center;" colspan="12">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">
                                                                    Do you want to Mark this as
                                                                    <a style="text-decoration:underline;color:black;cursor:pointer;" @onclick="AddNone">  Indiviual?</a>
                                                                </p>
                                                            </td>
                                                        </tr>
                                                    }
                                                    else if (PrimarySTO=="none")
                                                    {
                                                        <tr style="background:blue;color:white;">
                                                            <td class="align-middle text-center" style="text-align:center;" colspan="12">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">
                                                                    Invoice Selected as Indiviual

                                                                </p>
                                                            </td>
                                                        </tr>
                                                    }

                                                }
                                                else
                                                {
                                                    if (PrimarySTO=="none")
                                                    {
                                                        <tr style="background:blue;color:white;">
                                                            <td class="align-middle text-center" style="text-align:center;" colspan="12">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">
                                                                    Invoice Selected as Indiviual
                                                                    <br />
                                                                    <a style="text-decoration:underline;color:black;cursor:pointer;font-weight:bolder;" @onclick="RemoveNone">Remove?</a>

                                                                </p>
                                                            </td>
                                                        </tr>
                                                    }
                                                    else
                                                    {
                                                        <tr style="background:red;color:white;">
                                                            <td class="align-middle text-center" style="text-align:center;" colspan="12">
                                                                <p class="text-xs font-weight-bold mb-0 text-center">
                                                                    No Primary Invoice for this Secondary <br> Do you want to Mark this as
                                                                    <a style="text-decoration:underline;color:black;cursor:pointer;" @onclick="AddNone"> Indiviual?</a>
                                                                </p>
                                                            </td>
                                                        </tr>
                                                    }


                                                }

                                            </tbody>



                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Body>
        </Modal>


    </Authorized>
    <NotAuthorized>
        @if (_isJsReady)
        {
            <_403 />
        }
        else
        {
            <Loader isLoading="true" />
        }

    </NotAuthorized>
</AuthorizeView>


@code {
    private Modal modal;

    private bool _isJsReady = false;
    private string FileLocation = string.Empty;
    private string InvoiceType = string.Empty;
    private bool AddChamber = false;
    private bool IsEdit = false;
    private bool IsSecondary = false;
    private bool isChambersAvailable = false;
    private string? PrimarySTO; // Variable to store the selected STO
    private void SelectPrimarySTO(string sto)
    {
        int ID = GetInvoiceID(sto);
        if (ID!=0)
        {
            if (PrimarySTO == sto)
            {
                // Deselect if already selected
                PrimarySTO = null;
            }
            else
            {
                // Select the new STO
                PrimarySTO = sto;
            }
        }
        else
        {
            modal.CloseModal();
            toastService.ShowError("Add this primary invoice first");
        }


    }
    private void AddNone()
    {
        PrimarySTO = "none";
    }
    private void RemoveNone()
    {
        PrimarySTO = null;
    }
    public EuroCal Invoices { get; set; } = new EuroCal();
    public List<OCRData> PrimaryInvoices { get; set; } = new List<OCRData>();

    private void OpenModal()
    {
        modal.Show();
    }

    private void AddNewChamber()
    {
        // Find the missing chamber number within the range of 1 to 5
        int newChamberNumber = Enumerable.Range(1, 5)
                                          .Except(Invoices.Chambers.Select(c => c.ChamberNumber))
                                          .FirstOrDefault();

        // Add the new chamber only if there is a missing number
        if (newChamberNumber > 0)
        {
            Invoices.Chambers.Add(new ChamberData
                {
                    Capacity = 0,
                    ChamberNumber = newChamberNumber,
                    DispatchDips = 0,
                    ReceivingDips = 0
                });
        }
    }
    private void RemoveChamber(ChamberData chamber)
    {
        var rec = Invoices.Chambers.FirstOrDefault(p => p.ChamberNumber == chamber.ChamberNumber);
        if (rec != null)
        {
            Invoices.Chambers.Remove(rec);
        }

    }
    public async Task<List<OCRData>> GetPrimary(int ExtID)
    {
        string connectionString = _configuration.GetConnectionString("Con"); // Replace with your actual connection string
        List<OCRData> result = new List<OCRData>();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            using (SqlCommand command = new SqlCommand("GetPrimaryInvoicesForSC", connection))
            {
                command.CommandType = CommandType.StoredProcedure;

                // Add the VehicleID parameter
                command.Parameters.AddWithValue("@scExtractedID", ExtID);

                // Execute the stored procedure and read the result
                using (SqlDataReader reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        OCRData data = new OCRData
                            {
                                InvoiceDate = reader.IsDBNull(reader.GetOrdinal("FillingDate"))
                                                                                                                                                                ? (DateTime?)null
                                                                                                                                                                : reader.GetDateTime(reader.GetOrdinal("FillingDate")),
                                STO = reader.IsDBNull(reader.GetOrdinal("STONO")) ? "" : reader.GetString(reader.GetOrdinal("STONO")),
                                Vehicle = reader.IsDBNull(reader.GetOrdinal("VehicleNo")) ? "" : reader.GetString(reader.GetOrdinal("VehicleNo")),
                                BusinessID = reader.IsDBNull(reader.GetOrdinal("BusinessID")) ? 0 : reader.GetInt32(reader.GetOrdinal("BusinessID")),
                                OCRID = reader.IsDBNull(reader.GetOrdinal("ExtractedID")) ? 0 : reader.GetInt32(reader.GetOrdinal("ExtractedID")),
                                ShippingLocation = reader.IsDBNull(reader.GetOrdinal("ShippingLocation")) ? "" : reader.GetString(reader.GetOrdinal("ShippingLocation")),
                                ReceivingLocation = reader.IsDBNull(reader.GetOrdinal("RecievingLocation")) ? "" : reader.GetString(reader.GetOrdinal("RecievingLocation")),
                                InvoiceType = reader.IsDBNull(reader.GetOrdinal("InvoiceType")) ? "" : reader.GetString(reader.GetOrdinal("InvoiceType")),
                                Product = reader.IsDBNull(reader.GetOrdinal("ProductName")) ? "" : reader.GetString(reader.GetOrdinal("ProductName")),
                                FileLocation = reader.IsDBNull(reader.GetOrdinal("FileLocation")) ? "" : reader.GetString(reader.GetOrdinal("FileLocation")),
                                isInvoiceGenerated = reader.IsDBNull(reader.GetOrdinal("isInvoiceGenerated")) ? false : reader.GetBoolean(reader.GetOrdinal("isInvoiceGenerated"))
                            };

                        result.Add(data);
                    }
                }
            }
        }

        return result;
    }
    public bool UpdateExtractedData(OCRSecData invoiceData)
    {
        try
        {
            // SQL update query for tblExtracted_Data
            string sqlUpdateQuery = @"
        UPDATE tblExtracted_Data
        SET
            STONO = @STONO,
            RecievingLocation = @RecievingLocation,
            ShippingLocation = @ShippingLocation,
            VehicleNo = @VehicleNo,
            FillingDate = @FillingDate,
IsInvoiceGenerated='True',
ProductName=@ProductName
        WHERE ExtractedID = @ExtractedID";

            using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
            {
                connection.Open();

                // Update tblExtracted_Data
                using (SqlCommand command = new SqlCommand(sqlUpdateQuery, connection))
                {
                    command.Parameters.AddWithValue("@STONO", invoiceData.StoNo);
                    command.Parameters.AddWithValue("@RecievingLocation", invoiceData.RecievingLocation);
                    command.Parameters.AddWithValue("@ShippingLocation", invoiceData.ShippingLocation);
                    command.Parameters.AddWithValue("@VehicleNo", invoiceData.VehicleNo);
                    command.Parameters.AddWithValue("@FillingDate", invoiceData.FillingDate);
                    command.Parameters.AddWithValue("@ExtractedID", invoiceData.ExtractedID);
                    command.Parameters.AddWithValue("@ProductName", invoiceData.Product);

                    int rowsAffected = command.ExecuteNonQuery();
                    if (rowsAffected <= 0)
                    {
                        return false; // No rows updated in tblExtracted_Data
                    }
                }
            }

            return true; // Update and insert successful
        }
        catch (Exception ex)
        {
            // Handle or log the exception as necessary
            return false;
        }
    }
    public async Task Update()
    {
        try
        {
            if (Invoices.InvoiceType=="pk")
            {
                var rec = MapInvoicing();


                string jsonData = Newtonsoft.Json.JsonConvert.SerializeObject(rec);
                var AddUser = await API.PostRequest($"Invoice/EditInvoice", jsonData);
                string Result = Newtonsoft.Json.JsonConvert.DeserializeObject<string>(AddUser);
                if (Result == "200")
                {
                    toastService.ShowSuccess("Invoice Update Success");
                    NavigationManager.NavigateTo("/addinvoice");
                }
                else if (Result == "404")
                {
                    toastService.ShowError("STO No is null or it cannot be edit");
                }
                else if (Result == "504")
                {
                    toastService.ShowError($"Invoice Already Exists: {Invoices.STONo}");
                }
                else if (Result == "204")
                {
                    toastService.ShowWarning($"Please Mark the Driver Attendance for Date {Invoices.InvoiceDate.ToString("MM-dd-yyyy")}");
                }
                else
                {
                    toastService.ShowError("Error while Updating invoice");
                }
            }
            else if (Invoices.InvoiceType=="sc")
            {
                await AddInd();
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error while Updating invoice");
        }
    }
    private void MapChamberData(ChamberData source, ShippingDetails shippingDetails, ReceivingDetail receivingDetails, ShortageCalculation shortageCalculation, int chamberNumber)
    {
        // Access shipping chamber properties dynamically
        var shippingChamber = shippingDetails.GetType().GetProperty($"Chamber{chamberNumber}");
        var receivingChamber = receivingDetails.GetType().GetProperty($"Chamber{chamberNumber}");
        var shortageChamber = shortageCalculation.GetType().GetProperty($"Chamber{chamberNumber}");

        if (shippingChamber != null && receivingChamber != null && shortageChamber != null)
        {
            // Map shipping data
            var shippingInstance = shippingChamber.GetValue(shippingDetails);
            shippingInstance.GetType().GetProperty("ChamberQuantity")?.SetValue(shippingInstance, source.Capacity);
            shippingInstance.GetType().GetProperty("LorryDip")?.SetValue(shippingInstance, source.DispatchDips);
            shippingInstance.GetType().GetProperty("Quantity")?.SetValue(shippingInstance, 0);

            // Map receiving data
            var receivingInstance = receivingChamber.GetValue(receivingDetails);
            receivingInstance.GetType().GetProperty("ChamberQuantity")?.SetValue(receivingInstance, (int)source.ReceivedQuantity);
            receivingInstance.GetType().GetProperty("LorryDip")?.SetValue(receivingInstance, source.ReceivingDips);
            receivingInstance.GetType().GetProperty("Quantity")?.SetValue(receivingInstance, 0);

            // Map shortage data
            var shortageInstance = shortageChamber.GetValue(shortageCalculation);
            shortageInstance.GetType().GetProperty("ShortageMM")?.SetValue(shortageInstance, (int)source.DiffInDipsMm);
            shortageInstance.GetType().GetProperty("TotalShortageLtr")?.SetValue(shortageInstance, (int)source.ShortByDipLiters);
        }
    }

    public Invoicing MapInvoicing()
    {
        Invoicing objs = new Invoicing();

        // Map GeneralDetails
        objs.Details = new GeneralDetails
            {
                Product = Invoices.Product,
                TankLorryNO = Invoices.VehicleNo,
                Contractor = Invoices.Contractor,
                Date = Invoices.InvoiceDate,
                ReceivingLocation = Invoices.ReceivingLoc,
                STONo = Invoices.STONo,
                SupplyPoint = Invoices.ShippingLoc
            };

        // Map general properties
        objs.User = Invoices.User;
        objs.ExtarctedID = Invoices.ExtractedID;
        objs.InvoiceFilePath = Invoices.FileLocation;
        objs.invoiceType = Invoices.InvoiceType;

        // Map Shipping and Receiving details
        objs.ShippingDetail = new ShippingDetails
            {
                TempF = (float)Invoices.SummaryDetails.DispatchTemperature,
                SG = (float)Invoices.SummaryDetails.DispatchSG
            };
        objs.ReceivingDetail = new ReceivingDetail
            {
                TempF = (float)Invoices.SummaryDetails.ReceivingTemperature,
                SG = (float)Invoices.SummaryDetails.ReceivingSG
            };

        foreach (var chamber in Invoices.Chambers)
        {
            MapChamberData(chamber, objs.ShippingDetail, objs.ReceivingDetail, objs.ShortageCalculation, chamber.ChamberNumber);
        }


        // Map Summary Data
        objs.CalculationDifference = new CalculationDiff
            {
                TempDiff = (float)Math.Round(Invoices.SummaryDetails.TempDifference),
                Shortage1FTemp = (float)Math.Round(Invoices.SummaryDetails.Short1FTemp),
                QtyShouldRecieved = (float)Math.Round(Invoices.TotalReceivedQty),
                TotalShortageByDip = (float)Math.Round(Invoices.TotalShortByDipLiters),
                ShortOnTemp = 0,
                ShortageCharge = (float)Math.Abs(Math.Round(Invoices.SummaryDetails.CarriageShortage)),
                Status = Invoices.SummaryDetails.Status
            };

        // Mark the object as not viewable
        objs.IsView = "false";


        return objs;

    }

    public async Task Save()
    {
        try
        {
            if (Invoices == null)
            {
                toastService.ShowError("Data is null");
                return;
            }

            OCRSecData obj = new OCRSecData
                {
                    ExtractedID = Invoices.ExtractedID,
                    Product = Invoices.Product,
                    StoNo = Invoices.STONo,
                    ShippingLocation = Invoices.ShippingLoc,
                    FileLocation = Invoices.FileLocation?.Replace("191.96.196.61", "www.shakoorfms.com/imgs"),
                    FillingDate = Invoices.InvoiceDate,
                    RecievingLocation = Invoices.ReceivingLoc,
                    VehicleNo = Invoices.VehicleNo,
                    User = Invoices.User
                };

            if (Invoices.InvoiceType == "pk")
            {
                var rec = MapInvoicing();
                JsonSerializerOptions options = new JsonSerializerOptions
                    {
                        WriteIndented = true,
                        ReferenceHandler = null,
                        NumberHandling = JsonNumberHandling.AllowNamedFloatingPointLiterals

                    };
                string jsonData = System.Text.Json.JsonSerializer.Serialize(rec, options);

                // API request to add the invoice
                var addUserResponse = await API.PostRequest("Invoice/AddInvoice", jsonData);
                string result = JsonConvert.DeserializeObject<string>(addUserResponse);

                // Handle API response
                switch (result)
                {
                    case "200":
                        if (!UpdateExtractedData(obj))
                        {
                            toastService.ShowError("Invoice is added but OCR data is not updated");
                            NavigationManager.NavigateTo("/addinvoice");
                            return;
                        }
                        toastService.ShowSuccess("Invoice added successfully");
                        NavigationManager.NavigateTo("/addinvoice");
                        break;

                    case "403":
                        toastService.ShowError("Empty STO No");
                        break;

                    case "504":
                        toastService.ShowError($"Invoice already exists: {Invoices.STONo}");
                        break;

                    case "204":
                        toastService.ShowWarning($"Please mark the driver attendance for {Invoices.InvoiceDate:MM-dd-yyyy}");
                        break;

                    default:
                        toastService.ShowError("Error while adding invoice");
                        break;
                }
            }
            else if (Invoices.InvoiceType == "sc")
            {
                await AddInd();
            }
        }
        catch (Exception ex)
        {
            // Log the exception or handle it appropriately
            toastService.ShowError("An unexpected error occurred");
        }


    }
    public async Task AddInd()
    {

        if (PrimarySTO==null)
        {
            toastService.ShowError("Please Add any reference of this invoice Primary or None");
            return;
        }

        OCRSecDTO objj = new OCRSecDTO();
        objj.ProductName=Invoices.Product;
        objj.PrimaryInvoiceNumber = PrimarySTO;
        objj.ShippingLocation=Invoices.ShippingLoc;
        objj.RecievingLocation=Invoices.ReceivingLoc;
        objj.FileLocation=Invoices.FileLocation;
        objj.STONO=Invoices.STONo;
        objj.VehicleNo = Invoices.VehicleNo;
        objj.ExtractedID = Invoices.ExtractedID;
        objj.FillingDate = Invoices.InvoiceDate;
        objj.ChamberDetails = new List<ChamberDetailsDTO>();
        //  Invoices.Chambers = new List<ChambersDetailsSec>();
        foreach (var chamber in Invoices.Chambers)
        {
            objj.ChamberDetails.Add(new ChamberDetailsDTO
                {
                    ChamberDip = chamber.DispatchDips,
                    ChamberNo=chamber.ChamberNumber,
                    ChamberQuantity=chamber.Capacity,
                    RecDip=chamber.ReceivingDips,
                    ShortExcess=chamber.DiffInDipsMm,
                    RecLiters=Math.Round(chamber.ShortByDipLiters),
                    ogra=chamber.Capacity,
                    rec_dip=chamber.ReceivingDips,

                });
        }

        // Continue with further logic if no zero RecDip is found

        bool isRecordUpdated = UpdateExtractedAddSecData(objj);
        await DeleteInvoiceRecordsAsync(objj.STONO);
        List<string> chambers = new List<string>();
        @foreach (var item2 in objj.ChamberDetails)
        {
            if (item2.ChamberNo == 1)
            {
                chambers.Add("chamber1");
            }
            if (item2.ChamberNo == 2)
            {
                chambers.Add("chamber2");
            }
            if (item2.ChamberNo == 3)
            {
                chambers.Add("chamber3");
            }
            if (item2.ChamberNo == 4)
            {
                chambers.Add("chamber4");
            }
            if (item2.ChamberNo == 5)
            {
                chambers.Add("chamber5");
            }
        }

        var obj = new SecondaryInvoice
            {
                primaryreference =PrimarySTO,
                vehicle =objj.VehicleNo,
                scondaryinvoice = objj.STONO,
                _date = objj.FillingDate.Value.Date,
                supplypoint = objj.ShippingLocation,
                product = objj.ProductName,
                receiivingpoint = objj.RecievingLocation,
                contractor = "Shakoor & Co.",
                chambers = chambers,
                user = Invoices.User
            };
        JsonSerializerOptions options = new JsonSerializerOptions
            {
                WriteIndented = true,
                ReferenceHandler = null
            };
        string jsonData = System.Text.Json.JsonSerializer.Serialize(obj, options);

        var scinvoice = await API.PostRequest($"Invoice/SaveSecondaryInvoice", jsonData);
        string Result = System.Text.Json.JsonSerializer.Deserialize<string>(scinvoice);
        if (Result == "200")
        {
            int InvoiceID = GetInvoiceID(objj.STONO);

            List<RecInv> receivingChambers = new List<RecInv>();
            foreach (var x in objj.ChamberDetails)
            {
                receivingChambers.Add(new RecInv
                    {
                        ch_no = x.ChamberNo,
                        disp_dip = x.ChamberQuantity,
                        dis_liters = x.ChamberDip,
                        invoiceno = InvoiceID,
                        InvoicePath = objj.FileLocation,
                        primarySTO = PrimarySTO,
                        RecDip = x.RecDip,
                        RecLiters = Math.Round(x.RecLiters),
                        rec_dip = x.rec_dip,
                        ShortExcess = x.ShortExcess,
                        ogra = x.ogra,
                    });
            }
            JsonSerializerOptions options2 = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData2 = System.Text.Json.JsonSerializer.Serialize(receivingChambers, options2);

            var scinvoice2 = await API.PostRequest($"Invoice/SaveSecondaryWithImage", jsonData2);
            string Result2 = System.Text.Json.JsonSerializer.Deserialize<string>(scinvoice);
            var pointDetailsList = new List<PointDetails>
{
    new PointDetails { InvoiceID = InvoiceID, TempF = Invoices.SummaryDetails.DispatchTemperature, SG =  Invoices.SummaryDetails.DispatchSG, Point = "S" },
    new PointDetails { InvoiceID = InvoiceID, TempF =  Invoices.SummaryDetails.ReceivingTemperature, SG =  Invoices.SummaryDetails.ReceivingSG, Point = "R" }
};

            InsertPointDetails(pointDetailsList);

            await JS.InvokeVoidAsync("closeCurrentTab");
        }

    }
    public void InsertPointDetails(List<PointDetails> pointDetailsList)
    {
        // SQL query template
        string query = @"
        INSERT INTO tblPointDetails (InvoiceID, TempF, SG, Point)
        VALUES (@invoiceID, @tempF, @sg, @point);";

        using (var connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            connection.Open();

            using (var transaction = connection.BeginTransaction())
            {
                try
                {
                    // Prepare a single command object
                    using (var command = new SqlCommand(query, connection, transaction))
                    {
                        // Add parameters (reuse them)
                        command.Parameters.Add("@invoiceID", SqlDbType.Int);
                        command.Parameters.Add("@tempF", SqlDbType.Float);
                        command.Parameters.Add("@sg", SqlDbType.Float);
                        command.Parameters.Add("@point", SqlDbType.NVarChar);

                        // Iterate over the list and add records
                        foreach (var pointDetails in pointDetailsList)
                        {
                            command.Parameters["@invoiceID"].Value = pointDetails.InvoiceID;
                            command.Parameters["@tempF"].Value = pointDetails.TempF;
                            command.Parameters["@sg"].Value = pointDetails.SG;
                            command.Parameters["@point"].Value = pointDetails.Point;

                            // Execute the insert for this record
                            command.ExecuteNonQuery();
                        }
                    }

                    // Commit transaction after all inserts
                    transaction.Commit();
                }
                catch (Exception)
                {
                    // Rollback transaction if any issue occurs
                    transaction.Rollback();
                    throw; // Re-throw the exception to handle it outside
                }
            }
        }
    }

    public class PointDetails
    {
        public int PointDetailID { get; set; } // Not used during insert, auto-generated
        public int InvoiceID { get; set; }
        public double TempF { get; set; }
        public double SG { get; set; }
        public string Point { get; set; }
    }

    public int GetInvoiceID(string stono)
    {
        // SQL query to check if STONO exists
        string query = "SELECT invoiceid FROM tblinvoices WHERE STONO = @stono";

        using (var connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            connection.Open();

            using (var command = new SqlCommand(query, connection))
            {
                // Add the parameter to the query
                command.Parameters.AddWithValue("@stono", stono);

                // Execute the query and get the result
                int count = Convert.ToInt32(command.ExecuteScalar() ?? 0);

                // If the count is greater than 0, the STONO exists
                return count;
            }
        }
    }
    public string GetInvoiceprimaryRef(string stono)
    {
        // SQL query to check if STONO exists
        string query = "SELECT primaryReference FROM tblinvoices WHERE STONO = @stono";

        using (var connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            connection.Open();

            using (var command = new SqlCommand(query, connection))
            {
                // Add the parameter to the query
                command.Parameters.AddWithValue("@stono", stono);

                // Execute the query and get the result
                object result = command.ExecuteScalar();

                // If result is null, return an empty string or handle accordingly
                return result?.ToString() ?? string.Empty;
            }
        }
    }


    public async Task DeleteInvoiceRecordsAsync(string secondaryInvoiceNo)
    {
        using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            await connection.OpenAsync();

            string query = @"
       DECLARE @SecondaryInvoiceNo NVARCHAR(50) = @InvoiceNo;
DECLARE @InvoiceID INT;

DECLARE InvoiceCursor CURSOR FOR
SELECT InvoiceID FROM tblInvoices WHERE STONo = @SecondaryInvoiceNo;

OPEN InvoiceCursor;

FETCH NEXT FROM InvoiceCursor INTO @InvoiceID;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Delete related records in other tables for the current InvoiceID
    DELETE FROM tblSecondaryTrips WHERE PrimaryReference = @SecondaryInvoiceNo;
    DELETE FROM tblInvoiceDetails WHERE InvoiceID = @InvoiceID;
    DELETE FROM tblDriverShortageLedger WHERE InvoiceNumber = @SecondaryInvoiceNo;

    -- Delete the record in tblInvoices for the current InvoiceID
    DELETE FROM tblInvoices WHERE InvoiceID = @InvoiceID;

    FETCH NEXT FROM InvoiceCursor INTO @InvoiceID;
END

CLOSE InvoiceCursor;
DEALLOCATE InvoiceCursor;

        ";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@InvoiceNo", secondaryInvoiceNo);

                await command.ExecuteNonQueryAsync();
            }
        }
    }

    public bool UpdateExtractedAddSecData(OCRSecDTO invoiceData)
    {
        try
        {
            // SQL update query for tblExtracted_Data
            string sqlUpdateQuery = @"
        UPDATE tblExtracted_Data
        SET
            STONO = @STONO,
            RecievingLocation = @RecievingLocation,
            ShippingLocation = @ShippingLocation,
            VehicleNo = @VehicleNo,
            FillingDate = @FillingDate,
IsInvoiceGenerated='True',
ProductName=@ProductName
        WHERE ExtractedID = @ExtractedID";

            using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
            {
                connection.Open();

                // Update tblExtracted_Data
                using (SqlCommand command = new SqlCommand(sqlUpdateQuery, connection))
                {
                    command.Parameters.AddWithValue("@STONO", invoiceData.STONO);
                    command.Parameters.AddWithValue("@RecievingLocation", invoiceData.RecievingLocation);
                    command.Parameters.AddWithValue("@ShippingLocation", invoiceData.ShippingLocation);
                    command.Parameters.AddWithValue("@VehicleNo", invoiceData.VehicleNo);
                    command.Parameters.AddWithValue("@FillingDate", invoiceData.FillingDate);
                    command.Parameters.AddWithValue("@ExtractedID", invoiceData.ExtractedID);
                    command.Parameters.AddWithValue("@ProductName", invoiceData.ProductName);

                    int rowsAffected = command.ExecuteNonQuery();
                    if (rowsAffected <= 0)
                    {
                        return false; // No rows updated in tblExtracted_Data
                    }
                }
            }

            return true; // Update and insert successful
        }
        catch (Exception ex)
        {
            // Handle or log the exception as necessary
            return false;
        }
    }

    private async Task Cal()
    {
        try
        {
            Invoices.SummaryDetails.DispatchAt85F = await GetQtyAt85F(Invoices.SummaryDetails.DispatchSG, Invoices.SummaryDetails.DispatchTemperature, Invoices.TotalCapacity);
            Invoices.SummaryDetails.ReceivedAt85F = await GetQtyAt85F(Invoices.SummaryDetails.ReceivingSG, Invoices.SummaryDetails.ReceivingTemperature, Invoices.TotalReceivedQty);
            Invoices.SummaryDetails.CompanyShareOnShortage = Invoices.TotalShortByDipLiters-Math.Abs(Invoices.SummaryDetails.CarriageShortage);

            if (Invoices.TotalCapacity == 0)
            {
                Invoices.SummaryDetails.Percentage = 0; // Avoid division by zero
            }
            else
            {
                Invoices.SummaryDetails.Percentage = (Invoices.SummaryDetails.CarriageShortage * 100.0) / Invoices.TotalCapacity;
            }
        }
        catch (Exception ex)
        {

        }
    }
    string FormatValueWithColor(double value, out string color)
    {
        if (value < 0)
        {
            color = "red";
            value=Math.Round(value);
            return Math.Abs(value).ToString();
        }
        else
        {
            color = "blue";
            return value.ToString();
        }
    }
    string FormatShareWithColor(double value, out string color)
    {
        if (value > 0)
        {
            color = "red";
            value=Math.Round(value);
            return Math.Abs(value).ToString();
        }
        else
        {
            color = "black";
            return Math.Abs(value).ToString("0.00");
        }
    }

    string FormatPerWithColor(double value, out string color)
    {
        if (value < 0)
        {
            color = "red";
            return Math.Abs(value).ToString("0.00")+"%";
        }
        else
        {
            color = "blue";
            return value.ToString();
        }
    }
    public async Task GetChambersQuantity(ChangeEventArgs e)
    {
        if (e.Value != "")
        {
            isChambersAvailable = true;
            Invoices.VehicleNo = e.Value.ToString();
            int ChamberStatus = await GetShippingChamberDetails(e.Value.ToString());
            if (ChamberStatus==404)
            {
                AddChamber = true;
                toastService.ShowError("No Chambers Found for this Vehicle");
            }
            isChambersAvailable = false;
        }
    }
    public async Task<int> GetShippingChamberDetails(string VehicleID)
    {

        try
        {


            var VehicleIDs = await API.GetRequest($"Invoice/GetEuroChamber/{VehicleID}");
            if (VehicleIDs != "[]")
            {
                Invoices.Chambers = new List<ChamberData>();
                Invoices.SummaryDetails = new SummaryData();
                Invoices.Chambers = JsonConvert.DeserializeObject<List<ChamberData>>(VehicleIDs);

                return 200;
            }
            else
            {
                return 404;
            }
        }
        catch (Exception ex)
        {
            return 404;
            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("console.log", "");
                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();
                // await JS.InvokeVoidAsync("initializeDropzone");


            }
            catch (Exception ex)
            {
                _isJsReady = false; // JavaScript is not yet ready
                string e = ex.Message;
            }

        }
        else
        {

        }
    }


    protected override async void OnInitialized()
    {
        string encodedJson = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;

        if (encodedJson.Contains("OCR=") || encodedJson.Contains("Edit="))
        {
            // Determine the query type and decode the Base64 string
            string queryKey = encodedJson.Contains("OCR=") ? "OCR=" : "Edit=";
            encodedJson = encodedJson.Split(queryKey)[1];
            string base64EncodedJson = HttpUtility.UrlDecode(encodedJson);
            byte[] base64EncodedBytes = Convert.FromBase64String(base64EncodedJson);
            string jsonString = Encoding.UTF8.GetString(base64EncodedBytes);

            if (queryKey == "OCR=")
            {
                // Deserialize the JSON string into EuroCal
                Invoices = JsonConvert.DeserializeObject<EuroCal>(jsonString);

                if (!string.IsNullOrWhiteSpace(Invoices?.VehicleNo))
                {
                    isChambersAvailable = true;
                    int chamberStatus = await GetShippingChamberDetails(Invoices.VehicleNo);
                    if (chamberStatus == 404)
                    {
                        AddChamber = true;
                        toastService.ShowError($"No Chamber Details for Vehicle {Invoices.VehicleNo}");
                    }
                    isChambersAvailable = false;

                }
                else
                {
                    toastService.ShowError($"No Vehicle..");

                }

                // Handle file location
                if (!string.IsNullOrEmpty(Invoices?.FileLocation))
                {
                    FileLocation = Invoices.FileLocation.Replace("191.96.196.61", "www.shakoorfms.com/imgs");
                }
            }
            else if (queryKey == "Edit=")
            {
                // Deserialize the JSON string into Invoicing
                var rec = JsonConvert.DeserializeObject<Invoicing>(jsonString);
                if (rec != null)
                {
                    Invoices = MapInvoice(rec);
                    if (rec.Details.STONo!=null)
                    {
                        PrimarySTO = GetInvoiceprimaryRef(rec.Details.STONo);
                    }
                    await Cal();
                }
                IsEdit = true;
            }

            // Determine InvoiceType
            IsSecondary = Invoices?.InvoiceType == "sc";
            InvoiceType = Invoices?.InvoiceType == "pk"
                ? "Add Euro Primary Invoice"
                : "Add Euro Secondary Invoice";

            // Set the user
            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            Invoices.User = authState.User.Identity.Name ??"";
            PrimaryInvoices = await GetPrimary(Invoices.ExtractedID);

            StateHasChanged();
        }

    }
    private int GetChamberCapacity(int chamberNumber, ShippingDetails shippingDetail)
    {
        switch (chamberNumber)
        {
            case 1: return shippingDetail.Chamber1?.ChamberQuantity ?? 0;
            case 2: return shippingDetail.Chamber2?.ChamberQuantity ?? 0;
            case 3: return shippingDetail.Chamber3?.ChamberQuantity ?? 0;
            case 4: return shippingDetail.Chamber4?.ChamberQuantity ?? 0;
            case 5: return shippingDetail.Chamber5?.ChamberQuantity ?? 0;
            default: return 0;
        }
    }

    private int GetChamberDispatchDips(int chamberNumber, ShippingDetails shippingDetail)
    {
        switch (chamberNumber)
        {
            case 1: return shippingDetail.Chamber1?.LorryDip ?? 0;
            case 2: return shippingDetail.Chamber2?.LorryDip ?? 0;
            case 3: return shippingDetail.Chamber3?.LorryDip ?? 0;
            case 4: return shippingDetail.Chamber4?.LorryDip ?? 0;
            case 5: return shippingDetail.Chamber5?.LorryDip ?? 0;
            default: return 0;
        }
    }

    private int GetChamberReceivingDips(int chamberNumber, ReceivingDetail receivingDetail)
    {
        switch (chamberNumber)
        {
            case 1: return receivingDetail.Chamber1?.LorryDip ?? 0;
            case 2: return receivingDetail.Chamber2?.LorryDip ?? 0;
            case 3: return receivingDetail.Chamber3?.LorryDip ?? 0;
            case 4: return receivingDetail.Chamber4?.LorryDip ?? 0;
            case 5: return receivingDetail.Chamber5?.LorryDip ?? 0;
            default: return 0;
        }
    }

    private ShortageChamber? GetChamberShortage(int chamberNumber, ShortageCalculation shortageCalculation)
    {
        switch (chamberNumber)
        {
            case 1: return shortageCalculation.Chamber1;
            case 2: return shortageCalculation.Chamber2;
            case 3: return shortageCalculation.Chamber3;
            case 4: return shortageCalculation.Chamber4;
            case 5: return shortageCalculation.Chamber5;
            default: return null;
        }
    }

    private double CalculatePercentage(double carriageShortage, double dispatchAt85F)
    {
        return (carriageShortage / dispatchAt85F) * 100;
    }
    public EuroCal MapInvoice(Invoicing rec)
    {
        EuroCal objs = new EuroCal();

        // Map GeneralDetails
        objs.Product = rec.Details.Product;
        objs.VehicleNo = rec.Details.TankLorryNO;
        objs.Contractor = rec.Details.Contractor;
        objs.InvoiceDate = rec.Details.Date;
        objs.ReceivingLoc = rec.Details.ReceivingLocation;
        objs.STONo = rec.Details.STONo;
        objs.ShippingLoc = rec.Details.SupplyPoint;
        objs.FileLocation = rec.InvoiceFilePath;
        objs.InvoiceType = rec.invoiceType;
        objs.ExtractedID = rec.ExtarctedID;
        // Map general properties
        objs.User = rec.User;
        objs.ExtractedID = rec.ExtarctedID;
        objs.FileLocation = rec.InvoiceFilePath;
        objs.SummaryDetails = new SummaryData();
        // Map SummaryData (dispatch and receiving details)
        objs.SummaryDetails.DispatchTemperature = (double)rec.ShippingDetail.TempF;
        objs.SummaryDetails.DispatchSG = Math.Round(rec.ShippingDetail.SG, 3);
        objs.SummaryDetails.ReceivingSG = Math.Round(rec.ReceivingDetail.SG, 3);
        objs.SummaryDetails.ReceivingTemperature = (double)rec.ReceivingDetail.TempF;
        FileLocation = objs.FileLocation;

        // Populate the Chambers list by mapping each chamber from ShippingDetails, ReceivingDetail, and ShortageCalculation
        objs.Chambers = new List<ChamberData>();

        // Map each chamber's data from ShippingDetail, ReceivingDetail, and ShortageCalculation
        for (int i = 1; i <= 5; i++)
        {
            var chamber = new ChamberData
                {
                    ChamberNumber = i,
                    Capacity = GetChamberCapacity(i, rec.ShippingDetail),
                    DispatchDips = GetChamberDispatchDips(i, rec.ShippingDetail),
                    ReceivingDips = GetChamberReceivingDips(i, rec.ReceivingDetail),
                };

            // Shortage calculation
            var shortageChamber = GetChamberShortage(i, rec.ShortageCalculation);

            // Add chamber only if DispatchDips and ReceivingDips are non-zero
            if (chamber.DispatchDips != 0 && chamber.ReceivingDips != 0)
            {
                objs.Chambers.Add(chamber);
            }
        }


        // You may also need to add some additional calculations based on the calculated data
        // For example, if there's any logic related to the CarriageShortage, or the final percentage.

        objs.SummaryDetails.Percentage = CalculatePercentage(objs.SummaryDetails.CarriageShortage, objs.SummaryDetails.DispatchAt85F);


        return objs;
    }


    public async Task Navigate()
    {
        await JS.InvokeVoidAsync("openInNewTab2", $"/vehicles");

    }
    public async Task<double> GetQtyAt85F(double sg, double temp, double qty)
    {
        List<DensityFactorData> data = DensityFactorCollection.GetData();
        double result = 0;
        var factor = data.Where(a => a.Density == sg).FirstOrDefault();
        if (factor != null)
        {
            double factvalue = factor.Factor;
            if (sg == 0)
            {
                return 0;
            }
            else
            {

                if (temp > 85)
                {
                    result = Math.Round((qty / (1 + (factvalue * (temp - 85)))), 0);
                }
                else
                {
                    result = Math.Round((qty * (1 - (factvalue * (temp - 85)))), 0);
                }
            }
        }
        else
        {
            return 0;
        }
        return result;
    }

    public class DensityFactorData
    {
        public double Density { get; set; }
        public double Factor { get; set; }

        public DensityFactorData(double density, double factor)
        {
            Density = density;
            Factor = factor;
        }
    }
    public class DensityFactorCollection
    {
        public static List<DensityFactorData> GetData()
        {
            return new List<DensityFactorData>
        {
             new DensityFactorData(0.640, 0.00083),
            new DensityFactorData(0.641, 0.00083),
            new DensityFactorData(0.642, 0.00083),
            new DensityFactorData(0.643, 0.00083),
            new DensityFactorData(0.644, 0.00082),
            new DensityFactorData(0.645, 0.00082),
            new DensityFactorData(0.646, 0.00082),
            new DensityFactorData(0.647, 0.00082),
            new DensityFactorData(0.648, 0.00081),
            new DensityFactorData(0.649, 0.00081),
            new DensityFactorData(0.650, 0.00081),
            new DensityFactorData(0.651, 0.00081),
            new DensityFactorData(0.652, 0.00080),
            new DensityFactorData(0.653, 0.00080),
            new DensityFactorData(0.654, 0.00080),
            new DensityFactorData(0.655, 0.00080),
            new DensityFactorData(0.656, 0.00079),
            new DensityFactorData(0.657, 0.00079),
            new DensityFactorData(0.658, 0.00079),
            new DensityFactorData(0.659, 0.00079),
            new DensityFactorData(0.660, 0.00078),
            new DensityFactorData(0.661, 0.00078),
            new DensityFactorData(0.662, 0.00078),
            new DensityFactorData(0.663, 0.00078),
            new DensityFactorData(0.664, 0.00077),
            new DensityFactorData(0.665, 0.00077),
            new DensityFactorData(0.666, 0.00077),
            new DensityFactorData(0.667, 0.00077),
            new DensityFactorData(0.668, 0.00076),
            new DensityFactorData(0.669, 0.00076),
            new DensityFactorData(0.670, 0.00076),
            new DensityFactorData(0.671, 0.00076),
            new DensityFactorData(0.672, 0.00075),
            new DensityFactorData(0.673, 0.00075),
            new DensityFactorData(0.674, 0.00075),
            new DensityFactorData(0.675, 0.00075),
            new DensityFactorData(0.676, 0.00075),
            new DensityFactorData(0.677, 0.00074),
            new DensityFactorData(0.678, 0.00074),
            new DensityFactorData(0.679, 0.00074),
            new DensityFactorData(0.680, 0.00074),
            new DensityFactorData(0.681, 0.00073),
            new DensityFactorData(0.682, 0.00073),
            new DensityFactorData(0.683, 0.00073),
            new DensityFactorData(0.684, 0.00073),
            new DensityFactorData(0.685, 0.00073),
            new DensityFactorData(0.686, 0.00072),
            new DensityFactorData(0.687, 0.00072),
            new DensityFactorData(0.688, 0.00072),
            new DensityFactorData(0.689, 0.00072),
            new DensityFactorData(0.690, 0.00072),
            new DensityFactorData(0.691, 0.00071),
            new DensityFactorData(0.692, 0.00071),
            new DensityFactorData(0.693, 0.00071),
            new DensityFactorData(0.694, 0.00071),
            new DensityFactorData(0.695, 0.00071),
            new DensityFactorData(0.696, 0.00070),
            new DensityFactorData(0.697, 0.00070),
            new DensityFactorData(0.698, 0.00070),
            new DensityFactorData(0.699, 0.00070),
            new DensityFactorData(0.700, 0.00070),
            new DensityFactorData(0.701, 0.00069),
            new DensityFactorData(0.702, 0.00069),
            new DensityFactorData(0.703, 0.00069),
            new DensityFactorData(0.704, 0.00069),
            new DensityFactorData(0.705, 0.00069),
            new DensityFactorData(0.706, 0.00068),
            new DensityFactorData(0.707, 0.00068),
            new DensityFactorData(0.708, 0.00068),
            new DensityFactorData(0.709, 0.00068),
            new DensityFactorData(0.710, 0.00068),
            new DensityFactorData(0.711, 0.00067),
            new DensityFactorData(0.712, 0.00067),
            new DensityFactorData(0.713, 0.00067),
            new DensityFactorData(0.714, 0.00067),
            new DensityFactorData(0.715, 0.00067),
            new DensityFactorData(0.716, 0.00066),
            new DensityFactorData(0.717, 0.00066),
            new DensityFactorData(0.718, 0.00066),
            new DensityFactorData(0.719, 0.00066),
            new DensityFactorData(0.720, 0.00066),
            new DensityFactorData(0.721, 0.00065),
            new DensityFactorData(0.722, 0.00065),
            new DensityFactorData(0.723, 0.00065),
            new DensityFactorData(0.724, 0.00065),
            new DensityFactorData(0.725, 0.00065),
            new DensityFactorData(0.726, 0.00064),
            new DensityFactorData(0.727, 0.00064),
            new DensityFactorData(0.728, 0.00064),
            new DensityFactorData(0.729, 0.00064),
            new DensityFactorData(0.730, 0.00064),
            new DensityFactorData(0.731, 0.00063),
            new DensityFactorData(0.732, 0.00063),
            new DensityFactorData(0.733, 0.00063),
            new DensityFactorData(0.734, 0.00063),
            new DensityFactorData(0.735, 0.00063),
            new DensityFactorData(0.736, 0.00062),
            new DensityFactorData(0.737, 0.00062),
            new DensityFactorData(0.738, 0.00062),
            new DensityFactorData(0.739, 0.00062),
            new DensityFactorData(0.740, 0.00062),
            new DensityFactorData(0.741, 0.00061),
            new DensityFactorData(0.742, 0.00061),
            new DensityFactorData(0.743, 0.00061),
            new DensityFactorData(0.744, 0.00061),
            new DensityFactorData(0.745, 0.00061),
            new DensityFactorData(0.746, 0.00060),
            new DensityFactorData(0.747, 0.00060),
            new DensityFactorData(0.748, 0.00060),
            new DensityFactorData(0.749, 0.00060),
            new DensityFactorData(0.750, 0.00060),
            new DensityFactorData(0.751, 0.00059),
            new DensityFactorData(0.752, 0.00059),
            new DensityFactorData(0.753, 0.00059),
            new DensityFactorData(0.754, 0.00059),
            new DensityFactorData(0.755, 0.00059),
            new DensityFactorData(0.756, 0.00059),
            new DensityFactorData(0.757, 0.00058),
            new DensityFactorData(0.758, 0.00058),
            new DensityFactorData(0.759, 0.00058),
            new DensityFactorData(0.760, 0.00058),
            new DensityFactorData(0.761, 0.00058),
            new DensityFactorData(0.762, 0.00057),
            new DensityFactorData(0.763, 0.00057),
            new DensityFactorData(0.764, 0.00057),
            new DensityFactorData(0.765, 0.00057),
            new DensityFactorData(0.766, 0.00057),
            new DensityFactorData(0.767, 0.00057),
            new DensityFactorData(0.768, 0.00056),
            new DensityFactorData(0.769, 0.00056),
            new DensityFactorData(0.770, 0.00056),
            new DensityFactorData(0.771, 0.00056),
            new DensityFactorData(0.772, 0.00056),
            new DensityFactorData(0.773, 0.00055),
            new DensityFactorData(0.774, 0.00055),
            new DensityFactorData(0.775, 0.00055),
            new DensityFactorData(0.776, 0.00055),
            new DensityFactorData(0.777, 0.00055),
            new DensityFactorData(0.778, 0.00054),
            new DensityFactorData(0.779, 0.00054),
            new DensityFactorData(0.780, 0.00054),
            new DensityFactorData(0.781, 0.00054),
            new DensityFactorData(0.782, 0.00054),
            new DensityFactorData(0.783, 0.00054),
            new DensityFactorData(0.784, 0.00053),
            new DensityFactorData(0.785, 0.00053),
            new DensityFactorData(0.786, 0.00053),
            new DensityFactorData(0.787, 0.00053),
            new DensityFactorData(0.788, 0.00053),
            new DensityFactorData(0.789, 0.00053),
            new DensityFactorData(0.790, 0.00052),
            new DensityFactorData(0.791, 0.00052),
            new DensityFactorData(0.792, 0.00052),
            new DensityFactorData(0.793, 0.00052),
            new DensityFactorData(0.794, 0.00052),
            new DensityFactorData(0.795, 0.00052),
            new DensityFactorData(0.796, 0.00051),
            new DensityFactorData(0.797, 0.00051),
            new DensityFactorData(0.798, 0.00051),
            new DensityFactorData(0.799, 0.00051),
            new DensityFactorData(0.800, 0.00051),
            new DensityFactorData(0.801, 0.00051),
            new DensityFactorData(0.802, 0.00050),
            new DensityFactorData(0.803, 0.00050),
            new DensityFactorData(0.804, 0.00050),
            new DensityFactorData(0.805, 0.00050),
            new DensityFactorData(0.806, 0.00050),
            new DensityFactorData(0.807, 0.00050),
            new DensityFactorData(0.808, 0.00049),
            new DensityFactorData(0.809, 0.00049),
            new DensityFactorData(0.810, 0.00049),
            new DensityFactorData(0.811, 0.00049),
            new DensityFactorData(0.812, 0.00049),
            new DensityFactorData(0.813, 0.00049),
            new DensityFactorData(0.814, 0.00049),
            new DensityFactorData(0.815, 0.00048),
            new DensityFactorData(0.816, 0.00048),
            new DensityFactorData(0.817, 0.00048),
            new DensityFactorData(0.818, 0.00048),
            new DensityFactorData(0.819, 0.00048),
            new DensityFactorData(0.820, 0.00048),
            new DensityFactorData(0.821, 0.00048),
            new DensityFactorData(0.822, 0.00048),
            new DensityFactorData(0.823, 0.00048),
            new DensityFactorData(0.824, 0.00047),
            new DensityFactorData(0.825, 0.00047),
            new DensityFactorData(0.826, 0.00047),
            new DensityFactorData(0.827, 0.00047),
            new DensityFactorData(0.828, 0.00047),
            new DensityFactorData(0.829, 0.00047),
            new DensityFactorData(0.830, 0.00047),
            new DensityFactorData(0.831, 0.00047),
            new DensityFactorData(0.832, 0.00047),
            new DensityFactorData(0.833, 0.00046),
            new DensityFactorData(0.834, 0.00046),
            new DensityFactorData(0.835, 0.00046),
            new DensityFactorData(0.836, 0.00046),
            new DensityFactorData(0.837, 0.00046),
            new DensityFactorData(0.838, 0.00046),
            new DensityFactorData(0.839, 0.00046),
            new DensityFactorData(0.840, 0.00046),
            new DensityFactorData(0.841, 0.00046),
            new DensityFactorData(0.842, 0.00046),
            new DensityFactorData(0.843, 0.00045),
            new DensityFactorData(0.844, 0.00045),
            new DensityFactorData(0.845, 0.00045),
            new DensityFactorData(0.846, 0.00045),
            new DensityFactorData(0.847, 0.00045),
            new DensityFactorData(0.848, 0.00045),
            new DensityFactorData(0.849, 0.00045),
            new DensityFactorData(0.850, 0.00045),
            new DensityFactorData(0.851, 0.00045),
            new DensityFactorData(0.852, 0.00045),
            new DensityFactorData(0.853, 0.00044),
            new DensityFactorData(0.854, 0.00044),
            new DensityFactorData(0.855, 0.00044),
            new DensityFactorData(0.856, 0.00044),
          new DensityFactorData(0.857, 0.00044),
  new DensityFactorData(0.858, 0.00044),
  new DensityFactorData(0.859, 0.00044),
  new DensityFactorData(0.860, 0.00044),
  new DensityFactorData(0.861, 0.00044),
  new DensityFactorData(0.862, 0.00044),
  new DensityFactorData(0.863, 0.00043),
  new DensityFactorData(0.864, 0.00043),
  new DensityFactorData(0.865, 0.00043),
  new DensityFactorData(0.866, 0.00043),
  new DensityFactorData(0.867, 0.00043),
  new DensityFactorData(0.868, 0.00043),
  new DensityFactorData(0.869, 0.00043),
  new DensityFactorData(0.870, 0.00043),
  new DensityFactorData(0.871, 0.00043),
  new DensityFactorData(0.872, 0.00043),
  new DensityFactorData(0.873, 0.00043),
  new DensityFactorData(0.874, 0.00043),
  new DensityFactorData(0.875, 0.00043),
  new DensityFactorData(0.876, 0.00042),
  new DensityFactorData(0.877, 0.00042),
  new DensityFactorData(0.878, 0.00042),
  new DensityFactorData(0.879, 0.00042),
  new DensityFactorData(0.880, 0.00042),
  new DensityFactorData(0.881, 0.00042),
  new DensityFactorData(0.882, 0.00042),
  new DensityFactorData(0.883, 0.00042),
  new DensityFactorData(0.884, 0.00042),
  new DensityFactorData(0.885, 0.00042),
  new DensityFactorData(0.886, 0.00042),
  new DensityFactorData(0.887, 0.00042),
  new DensityFactorData(0.888, 0.00042),
  new DensityFactorData(0.889, 0.00042),
  new DensityFactorData(0.890, 0.00042),
  new DensityFactorData(0.891, 0.00041),
  new DensityFactorData(0.892, 0.00041),
  new DensityFactorData(0.893, 0.00041),
  new DensityFactorData(0.894, 0.00041),
  new DensityFactorData(0.895, 0.00041),
  new DensityFactorData(0.896, 0.00041),
  new DensityFactorData(0.897, 0.00041),
  new DensityFactorData(0.898, 0.00041),
 new DensityFactorData(0.899, 0.00041),
  new DensityFactorData(0.900, 0.00041),
  new DensityFactorData(0.901, 0.00041),
  new DensityFactorData(0.902, 0.00041),
  new DensityFactorData(0.903, 0.00041),
  new DensityFactorData(0.904, 0.00041),
  new DensityFactorData(0.905, 0.00041),
  new DensityFactorData(0.906, 0.00041),
  new DensityFactorData(0.907, 0.00041),
  new DensityFactorData(0.908, 0.00040),
  new DensityFactorData(0.909, 0.00040),
  new DensityFactorData(0.910, 0.00040),
  new DensityFactorData(0.911, 0.00040),
  new DensityFactorData(0.912, 0.00040),
  new DensityFactorData(0.913, 0.00040),
  new DensityFactorData(0.914, 0.00040),
  new DensityFactorData(0.915, 0.00040),
  new DensityFactorData(0.916, 0.00040),
  new DensityFactorData(0.917, 0.00040),
  new DensityFactorData(0.918, 0.00040),
  new DensityFactorData(0.919, 0.00040),
  new DensityFactorData(0.920, 0.00040),
  new DensityFactorData(0.921, 0.00040),
  new DensityFactorData(0.922, 0.00040),
  new DensityFactorData(0.923, 0.00040),
  new DensityFactorData(0.924, 0.00040),
  new DensityFactorData(0.925, 0.00040),
  new DensityFactorData(0.926, 0.00040),
  new DensityFactorData(0.927, 0.00040),
  new DensityFactorData(0.928, 0.00040),
  new DensityFactorData(0.929, 0.00040),
  new DensityFactorData(0.930, 0.00040),
  new DensityFactorData(0.931, 0.00039),
  new DensityFactorData(0.932, 0.00039),
  new DensityFactorData(0.933, 0.00039),
  new DensityFactorData(0.934, 0.00039),
  new DensityFactorData(0.935, 0.00039),
  new DensityFactorData(0.936, 0.00039),
  new DensityFactorData(0.937, 0.00039),
  new DensityFactorData(0.938, 0.00039),
  new DensityFactorData(0.939, 0.00039),
  new DensityFactorData(0.940, 0.00039),
  new DensityFactorData(0.941, 0.00039),
  new DensityFactorData(0.942, 0.00039),
  new DensityFactorData(0.943, 0.00039),
   new DensityFactorData(0.944, 0.00039),
            new DensityFactorData(0.945, 0.00039),
            new DensityFactorData(0.946, 0.00039),
            new DensityFactorData(0.947, 0.00039),
            new DensityFactorData(0.948, 0.00039),
            new DensityFactorData(0.949, 0.00039),
            new DensityFactorData(0.950, 0.00039),
            new DensityFactorData(0.951, 0.00039),
            new DensityFactorData(0.952, 0.00038),
            new DensityFactorData(0.953, 0.00038),
            new DensityFactorData(0.954, 0.00038),
            new DensityFactorData(0.955, 0.00038),
            new DensityFactorData(0.956, 0.00038),
            new DensityFactorData(0.957, 0.00038),
            new DensityFactorData(0.958, 0.00038),
            new DensityFactorData(0.959, 0.00038),
            new DensityFactorData(0.960, 0.00038),
            new DensityFactorData(0.961, 0.00038),
            new DensityFactorData(0.962, 0.00038),
            new DensityFactorData(0.963, 0.00038),
            new DensityFactorData(0.964, 0.00038),
            new DensityFactorData(0.965, 0.00038),
            new DensityFactorData(0.966, 0.00038),
            new DensityFactorData(0.967, 0.00038),
            new DensityFactorData(0.968, 0.00038),
            new DensityFactorData(0.969, 0.00038),
            new DensityFactorData(0.970, 0.00038),
            new DensityFactorData(0.971, 0.00038),
            new DensityFactorData(0.972, 0.00038),
            new DensityFactorData(0.973, 0.00038),
            new DensityFactorData(0.974, 0.00038),
            new DensityFactorData(0.975, 0.00038),
            new DensityFactorData(0.976, 0.00038),
            new DensityFactorData(0.977, 0.00037),
            new DensityFactorData(0.978, 0.00037),
            new DensityFactorData(0.979, 0.00037),
            new DensityFactorData(0.980, 0.00037),
            new DensityFactorData(0.981, 0.00037),
            new DensityFactorData(0.982, 0.00037),
            new DensityFactorData(0.983, 0.00037),
            new DensityFactorData(0.984, 0.00037),
            new DensityFactorData(0.985, 0.00037),
            new DensityFactorData(0.986, 0.00037),
            new DensityFactorData(0.987, 0.00037),
            new DensityFactorData(0.988, 0.00037),
            new DensityFactorData(0.989, 0.00037),
            new DensityFactorData(0.990, 0.00037),
            new DensityFactorData(0.991, 0.00037),
            new DensityFactorData(0.992, 0.00037),
            new DensityFactorData(0.993, 0.00037),
            new DensityFactorData(0.994, 0.00037),
            new DensityFactorData(0.995, 0.00037),
            new DensityFactorData(0.996, 0.00037),
            new DensityFactorData(0.997, 0.00037),
            new DensityFactorData(0.998, 0.00037),
            new DensityFactorData(0.999, 0.00037),
            new DensityFactorData(1.000, 0.00037),



        };
        }
    }

}

