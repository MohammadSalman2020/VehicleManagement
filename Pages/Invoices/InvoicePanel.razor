@page "/invoicepanel"
@using Majorsoft.Blazor.Components.Tabs
@using System.Linq;
@using System.Text.Json
@using System.Web
@using System.Text
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using VehicleManagement.ApiService
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Login
@using VehicleManagement.Pages.Redirects;
@inject IWebHostEnvironment Environment
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IApiService API
@inject IJSRuntime JS

<AuthorizeView>
    <Authorized>
        <Nav PageName="@TabHeading" />
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="card-body px-0 pt-0 pb-2">
                            <TabsPanel @ref="_tabs"
                                       ActiveColor="@_activeColor"
                                       InactiveColor="@_inactiveColor"
                                       HoverColor="@_hoverColor"
                                       ActiveTab="@_activeTab"
                                       TabItemsHeight="@_height"
                                       TabItemsWidth="@_width"
                                       Disabled="@_allTabsDisabled"
                                       TabPositon="@_tabPositon"
                                       Animate="@_isAnimated">
                                <TabItems>
                                    <TabItem id="tab1" @ref="_tab1">
                                        <Header><strong>General Details</strong></Header>
                                        <Content>
                                            <div class="col-md-12">
                                                <div class="card">

                                                    <div class="card-body">

                                                        <div class="row">

                                                            <div class="col-md-12" style="padding-top:10px;">
                                                                <div class="form-group" style="text-align:center;">
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="NextTab">Next</button>

                                                                </div>

                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label for="example-text-input" class="form-control-label">Tank Lorry No</label>
                                                                    <input type="text" id="vehicleID" required placeholder="Tank Lorry No" text="@Invoices.Details.TankLorryNO" @bind="Invoices.Details.TankLorryNO" class="form-control">

                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label for="example-text-input" class="form-control-label">STO No</label>
                                                                    <input type="text" placeholder="STO No" @bind="Invoices.Details.STONo" class="form-control">

                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label for="example-text-input" class="form-control-label">Date</label>
                                                                    <input type="date" placeholder="Date" @bind="Invoices.Details.Date" class="form-control">

                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label for="example-text-input" class="form-control-label">Shipping Location</label>
                                                                    <input type="text" placeholder="Supply Point" @bind="Invoices.Details.SupplyPoint" class="form-control">

                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label for="example-text-input" class="form-control-label">Contractor</label>
                                                                    <input type="text" placeholder="Contractor" @bind="Invoices.Details.Contractor" class="form-control">

                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label for="example-text-input" class="form-control-label">Receiving Location</label>
                                                                    <input type="text" placeholder="Receiving Location" @bind="Invoices.Details.ReceivingLocation" class="form-control">

                                                                </div>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <div class="form-group">
                                                                    <label for="example-text-input" class="form-control-label">Product</label>
                                                                    <input type="text" placeholder="Product" @bind="Invoices.Details.Product" class="form-control">

                                                                </div>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>


                                        </Content>
                                    </TabItem>



                                    <TabItem id="tab2" @ref="_tab2">
                                        <Header><strong>Shipping Details</strong></Header>
                                        <Content>
                                            <div class="col-md-12">
                                                <div class="card">

                                                    <div class="card-body">

                                                        <div class="row">

                                                            <div class="col-md-12" style="padding-top:10px;">
                                                                <div class="form-group" style="text-align:center;">
                                                                    <button tabindex="13" class="btn btn-danger btn-sm ms-auto" @onclick="NextTab">Next</button>
                                                                    <button tabindex="14" class="btn btn-warning btn-sm ms-auto" @onclick="PreviousTab">Back</button>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Shipping</label>


                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Tempreture F</label>
                                                                        <input type="number" tabindex="1" placeholder="Tempreture F" id="STemp" @oninput="GetQuantitiesByTemp" onfocus="selectAllInputValue('STemp')" @bind="Invoices.ShippingDetail.TempF" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            S.G
                                                                        </label>
                                                                        <input step="0.01" type="number" tabindex="2" placeholder="Gravity" id="SGravity" @oninput="@(e => GetQuantitiesBySG(e))" onfocus="selectAllInputValue('SGravity')" @bind="Invoices.ShippingDetail.SG" class="form-control">

                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 1</label>
                                                                        <input type="checkbox" class="form-control-label" checked="@DisableChamber1" @onchange="Chamber1Check" style="float:right;" />

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                        <input type="number" tabindex="3" placeholder="Chamber Quantity" id="Chamber1" onfocus="selectAllInputValue('Chamber1')" @bind="Invoices.ShippingDetail.Chamber1.ChamberQuantity" @oninput="@(e => TextChangedShipment(1, e))" disabled="@DisableChamber1" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Tank Lorry Product Dips(MM)
                                                                        </label>
                                                                        <input type="number" tabindex="4" placeholder=" Tank Lorry Product Dips(MM)" id="Chamber1Dip" onfocus="selectAllInputValue('Chamber1Dip')" @bind="Invoices.ShippingDetail.Chamber1.LorryDip" disabled="@DisableChamber1" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Quantity  85F
                                                                        </label>
                                                                        <input type="number" placeholder="Quantity  85F" @bind="Invoices.ShippingDetail.Chamber1.Quantity" disabled="disabled" class="form-control">

                                                                    </div>
                                                                </div>





                                                            </div>

                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 2</label>
                                                                        <input type="checkbox" class="form-control-label" checked="@DisableChamber2" @onchange="Chamber2Check" style="float:right;" />

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                        <input type="number" tabindex="5" placeholder="Chamber Quantity" id="SChamber2Q" onfocus="selectAllInputValue('SChamber2Q')" @bind="Invoices.ShippingDetail.Chamber2.ChamberQuantity" @oninput="@(e => TextChangedShipment(2, e))" disabled="@DisableChamber2" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Tank Lorry Product Dips(MM)
                                                                        </label>
                                                                        <input type="number" tabindex="6" placeholder=" Tank Lorry Product Dips(MM)" id="SChamber2D" onfocus="selectAllInputValue('SChamber2D')" @bind="Invoices.ShippingDetail.Chamber2.LorryDip" disabled="@DisableChamber2" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Quantity  85F
                                                                        </label>
                                                                        <input type="number" placeholder="Quantity  85F" @bind="Invoices.ShippingDetail.Chamber2.Quantity" disabled="disabled" class="form-control">

                                                                    </div>
                                                                </div>





                                                            </div>

                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 3</label>
                                                                        <input type="checkbox" class="form-control-label" checked="@DisableChamber3" @onchange="Chamber3Check" style="float:right;" />

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                        <input type="number" tabindex="7" placeholder="Chamber Quantity" id="SChamber3Q" onfocus="selectAllInputValue('SChamber3Q')" @bind="Invoices.ShippingDetail.Chamber3.ChamberQuantity" @oninput="@(e => TextChangedShipment(3, e))" disabled="@DisableChamber3" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Tank Lorry Product Dips(MM)
                                                                        </label>
                                                                        <input type="number" tabindex="8" placeholder=" Tank Lorry Product Dips(MM)" id="SChamber3Dip" onfocus="selectAllInputValue('SChamber3Dip')" @bind="Invoices.ShippingDetail.Chamber3.LorryDip" disabled="@DisableChamber3" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Quantity  85F
                                                                        </label>
                                                                        <input type="number" placeholder="Quantity  85F" @bind="Invoices.ShippingDetail.Chamber3.Quantity" disabled="disabled" class="form-control">

                                                                    </div>
                                                                </div>





                                                            </div>

                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 4</label>
                                                                        <input type="checkbox" class="form-control-label" checked="@DisableChamber4" @onchange="Chamber4Check" style="float:right;" />

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                        <input type="number" tabindex="9" placeholder="Chamber Quantity" id="SChamber4Q" onfocus="selectAllInputValue('SChamber4Q')" @bind="Invoices.ShippingDetail.Chamber4.ChamberQuantity" @oninput="@(e => TextChangedShipment(4, e))" disabled="@DisableChamber4" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Tank Lorry Product Dips(MM)
                                                                        </label>
                                                                        <input type="number" tabindex="10" placeholder=" Tank Lorry Product Dips(MM)" id="SChamber4Dip" onfocus="selectAllInputValue('SChamber4Dip')" @bind="Invoices.ShippingDetail.Chamber4.LorryDip" disabled="@DisableChamber4" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Quantity  85F
                                                                        </label>
                                                                        <input type="number" placeholder="Quantity  85F" @bind="Invoices.ShippingDetail.Chamber4.Quantity" disabled="disabled" class="form-control">

                                                                    </div>
                                                                </div>





                                                            </div>

                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 5</label>
                                                                        <input type="checkbox" class="form-control-label" checked="@DisableChamber5" @onchange="Chamber5Check" style="float:right;" />

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                        <input type="number" tabindex="11" placeholder="Chamber Quantity" id="SChamber5Q" onfocus="selectAllInputValue('SChamber5Q')" @bind="Invoices.ShippingDetail.Chamber5.ChamberQuantity" @oninput="@(e => TextChangedShipment(5, e))" disabled="@DisableChamber5" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Tank Lorry Product Dips(MM)
                                                                        </label>
                                                                        <input type="number" tabindex="12" placeholder=" Tank Lorry Product Dips(MM)" id="SChamber5D" onfocus="selectAllInputValue('SChamber5D')" @bind="Invoices.ShippingDetail.Chamber5.LorryDip" disabled="@DisableChamber5" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Quantity  85F
                                                                        </label>
                                                                        <input type="number" placeholder="Quantity  85F" @bind="Invoices.ShippingDetail.Chamber5.Quantity" disabled="disabled" class="form-control">

                                                                    </div>
                                                                </div>





                                                            </div>


                                                        </div>

                                                    </div>
                                                </div>
                                            </div>

                                        </Content>
                                    </TabItem>

                                    <TabItem id="tab3" @ref="_tab3">
                                        <Header><strong>Receiving Details</strong></Header>
                                        <Content>
                                            <div class="col-md-12">
                                                <div class="card">

                                                    <div class="card-body">

                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-top:10px;">
                                                                <div class="form-group" style="text-align:center;">
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="NextTab">Next</button>
                                                                    <button class="btn btn-warning btn-sm ms-auto" @onclick="PreviousTab">Back</button>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Receiving</label>


                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Tempreture F</label>
                                                                        <input type="number" placeholder="Tempreture F" id="tf" @oninput="GetReceivingQuantitiesByTemp" onfocus="selectAllInputValue('tf')" @bind="Invoices.ReceivingDetail.TempF" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            S.G
                                                                        </label>
                                                                        <input type="number" placeholder="Gravity" id="Rg" onfocus="selectAllInputValue('Rg')" @oninput="GetReceivingQuantitiesBySG" @bind="Invoices.ReceivingDetail.SG" class="form-control">

                                                                    </div>
                                                                </div>
                                                            </div>
                                                            @if (!DisableChamber1)
                                                            {
                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 1</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                            <input type="number" placeholder="Chamber Quantity" id="RChamber1Q" disabled onfocus="selectAllInputValue('RChamber1Q')" @bind="@Invoices.ReceivingDetail.Chamber1.ChamberQuantity" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Tank Lorry Product Dips(MM)
                                                                            </label>
                                                                            <input type="number" placeholder=" Tank Lorry Product Dips(MM)" id="RChamber1D" onfocus="selectAllInputValue('RChamber1D')" @bind="Invoices.ReceivingDetail.Chamber1.LorryDip" @oninput="@(e => QuantityChangeReceiving(1, e))" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Quantity  85F
                                                                            </label>
                                                                            <input type="number" placeholder="Quantity  85F" @bind="Invoices.ReceivingDetail.Chamber1.Quantity" disabled="disabled" class="form-control">

                                                                        </div>


                                                                    </div>





                                                                </div>
                                                            }
                                                            @if (!DisableChamber2)
                                                            {
                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 2</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                            <input type="number" placeholder="Chamber Quantity" id="RChamber2Q" disabled onfocus="selectAllInputValue('RChamber2Q')" @bind="@Invoices.ReceivingDetail.Chamber2.ChamberQuantity" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Tank Lorry Product Dips(MM)
                                                                            </label>
                                                                            <input type="number" placeholder=" Tank Lorry Product Dips(MM)" id="RChamber2D" onfocus="selectAllInputValue('RChamber2D')" @bind="Invoices.ReceivingDetail.Chamber2.LorryDip" @oninput="@(e => QuantityChangeReceiving(2, e))" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Quantity  85F
                                                                            </label>
                                                                            <input type="number" placeholder="Quantity  85F" @bind="Invoices.ReceivingDetail.Chamber2.Quantity" disabled="disabled" class="form-control">

                                                                        </div>

                                                                    </div>





                                                                </div>
                                                            }
                                                            @if (!DisableChamber3)
                                                            {


                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 3</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                            <input type="number" placeholder="Chamber Quantity" id="RChamber3Q" disabled onfocus="selectAllInputValue('RChamber3Q')" @bind="@Invoices.ReceivingDetail.Chamber3.ChamberQuantity" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Tank Lorry Product Dips(MM)
                                                                            </label>
                                                                            <input type="number" placeholder=" Tank Lorry Product Dips(MM)" id="RChamber3D" onfocus="selectAllInputValue('RChamber3D')" @bind="Invoices.ReceivingDetail.Chamber3.LorryDip" @oninput="@(e => QuantityChangeReceiving(3, e))" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Quantity  85F
                                                                            </label>
                                                                            <input type="number" placeholder="Quantity  85F" @bind="Invoices.ReceivingDetail.Chamber3.Quantity" disabled="disabled" class="form-control">

                                                                        </div>

                                                                    </div>





                                                                </div>
                                                            }
                                                            @if (!DisableChamber4)
                                                            {


                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 4</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                            <input type="number" placeholder="Chamber Quantity" id="RChamber4Q" disabled onfocus="selectAllInputValue('RChamber4Q')" @bind="@Invoices.ReceivingDetail.Chamber4.ChamberQuantity" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Tank Lorry Product Dips(MM)
                                                                            </label>
                                                                            <input type="number" placeholder=" Tank Lorry Product Dips(MM)" id="RChamber4D" onfocus="selectAllInputValue('RChamber4D')" @bind="Invoices.ReceivingDetail.Chamber4.LorryDip" @oninput="@(e => QuantityChangeReceiving(4, e))" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Quantity  85F
                                                                            </label>
                                                                            <input type="number" placeholder="Quantity  85F" @bind="Invoices.ReceivingDetail.Chamber4.Quantity" disabled="disabled" class="form-control">

                                                                        </div>

                                                                    </div>





                                                                </div>
                                                            }
                                                            @if (!DisableChamber5)
                                                            {


                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 5</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Chamber Quantity</label>
                                                                            <input type="number" placeholder="Chamber Quantity" id="RChamber5Q" disabled onfocus="selectAllInputValue('RChamber5Q')" @bind="@Invoices.ReceivingDetail.Chamber5.ChamberQuantity" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Tank Lorry Product Dips(MM)
                                                                            </label>
                                                                            <input type="number" placeholder=" Tank Lorry Product Dips(MM)" id="RChamber5D" onfocus="selectAllInputValue('RChamber5D')" @bind="Invoices.ReceivingDetail.Chamber5.LorryDip" @oninput="@(e => QuantityChangeReceiving(5, e))" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Quantity  85F
                                                                            </label>
                                                                            <input type="number" placeholder="Quantity  85F" @bind="Invoices.ReceivingDetail.Chamber5.Quantity" disabled="disabled" class="form-control">

                                                                        </div>

                                                                    </div>





                                                                </div>

                                                            }

                                                        </div>

                                                    </div>
                                                </div>
                                            </div>


                                        </Content>
                                    </TabItem>
                                    <TabItem id="tab4" @ref="_tab4">
                                        <Header><strong>Shortage Calculation</strong></Header>
                                        <Content>
                                            <div class="col-md-12">
                                                <div class="card">

                                                    <div class="card-body">

                                                        <div class="row">

                                                            <div class="col-md-12" style="padding-top:10px;">
                                                                <div class="form-group" style="text-align:center;">
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="NextTab">Next</button>
                                                                    <button class="btn btn-warning btn-sm ms-auto" @onclick="PreviousTab">Back</button>
                                                                </div>
                                                            </div>
                                                            @if (!DisableChamber1)
                                                            {
                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 1</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Shortage in MM</label>
                                                                            <input type="number" disabled="disabled" placeholder="Shortage in MM" @bind="Invoices.ShortageCalculation.Chamber1.ShortageMM" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Total Shortage in Liters
                                                                            </label>
                                                                            <input type="number" disabled="disabled" placeholder="Total Shortage in Liters" @bind="Invoices.ShortageCalculation.Chamber1.TotalShortageLtr" class="form-control">

                                                                        </div>


                                                                    </div>





                                                                </div>
                                                            }
                                                            @if (!DisableChamber2)
                                                            {
                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 2</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Shortage in MM</label>
                                                                            <input type="number" disabled="disabled" placeholder="Shortage in MM" @bind="Invoices.ShortageCalculation.Chamber2.ShortageMM" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Total Shortage in Liters</label>
                                                                            <input type="number" disabled="disabled" placeholder="Total Shortage in Liters" @bind="Invoices.ShortageCalculation.Chamber2.TotalShortageLtr" class="form-control">

                                                                        </div>

                                                                    </div>





                                                                </div>
                                                            }
                                                            @if (!DisableChamber3)
                                                            {
                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 3</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Shortage in MM</label>
                                                                            <input type="number" disabled="disabled" placeholder="Shortage in MM" @bind="Invoices.ShortageCalculation.Chamber3.ShortageMM" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Total Shortage in Liters
                                                                            </label>
                                                                            <input type="number" disabled="disabled" placeholder="Total Shortage in Liters" @bind="Invoices.ShortageCalculation.Chamber3.TotalShortageLtr" class="form-control">

                                                                        </div>
                                                                    </div>





                                                                </div>
                                                            }
                                                            @if (!DisableChamber4)
                                                            {
                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 4</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Shortage in MM</label>
                                                                            <input type="number" disabled="disabled" placeholder="Shortage in MM" @bind="Invoices.ShortageCalculation.Chamber4.ShortageMM" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Total Shortage in Liters
                                                                            </label>
                                                                            <input type="number" disabled="disabled" placeholder="Total Shortage in Liters" @bind="Invoices.ShortageCalculation.Chamber4.TotalShortageLtr" class="form-control">

                                                                        </div>
                                                                    </div>





                                                                </div>
                                                            }
                                                            @if (!DisableChamber5)
                                                            {
                                                                <div class="col-md-4" style="padding-top:5px;">
                                                                    <div class="form-control">
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">Chamber 5</label>


                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">Shortage in MM</label>
                                                                            <input type="number" disabled="disabled" placeholder="Shortage in MM" @bind="Invoices.ShortageCalculation.Chamber5.ShortageMM" class="form-control">

                                                                        </div>
                                                                        <div class="form-group">
                                                                            <label for="example-text-input" class="form-control-label">
                                                                                Total Shortage in Liters
                                                                            </label>
                                                                            <input type="number" disabled="disabled" placeholder="Total Shortage in Liters" @bind="Invoices.ShortageCalculation.Chamber5.TotalShortageLtr" class="form-control">

                                                                        </div>
                                                                    </div>

                                                                </div>

                                                            }
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>

                                        </Content>
                                    </TabItem>

                                    <TabItem id="tab4" @ref="_tab4">
                                        <Header><strong>Calculation Diff</strong></Header>
                                        <Content>
                                            <div class="col-md-12">
                                                <div class="card">

                                                    <div class="card-body">

                                                        <div class="row">

                                                            <div class="col-md-12" style="padding-top:10px;">
                                                                <div class="form-group" style="text-align:center;">
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="NextTab">Next</button>
                                                                    <button class="btn btn-warning btn-sm ms-auto" @onclick="PreviousTab">Back</button>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">

                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Temp. Difference (Desp. vs Rec.)</label>
                                                                        <input type="number" disabled="disabled" placeholder="Temp. Difference (Desp. vs Rec.)" @bind="Invoices.CalculationDifference.TempDiff" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Shortage 1° F Temp
                                                                        </label>
                                                                        <input type="number" disabled="disabled" placeholder="Shortage 1° F Temp" @bind="Invoices.CalculationDifference.Shortage1FTemp" class="form-control">

                                                                    </div>

                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Qty Should be Received
                                                                        </label>
                                                                        <input type="number" disabled="disabled" placeholder="Qty Should be Received" @bind="Invoices.CalculationDifference.QtyShouldRecieved" class="form-control">

                                                                    </div>


                                                                </div>





                                                            </div>

                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">

                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">Total Shortage in Liters By Dip</label>
                                                                        <input type="number" disabled="disabled" placeholder="Total Shortage in Liters By Dip" @bind="Invoices.CalculationDifference.TotalShortageByDip" class="form-control">

                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Short On Temprature (Exempted)
                                                                        </label>
                                                                        <input type="number" disabled="disabled" placeholder="Short On Temprature (Exempted)" @bind="Invoices.CalculationDifference.ShortOnTemp" class="form-control">
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Shortage Charge to Contractor
                                                                        </label>
                                                                        <input type="number" disabled="disabled" placeholder="Shortage Charge to Contractor" @bind="Invoices.CalculationDifference.ShortageCharge" class="form-control">
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <label for="example-text-input" class="form-control-label">
                                                                            Status :
                                                                        </label>
                                                                        <label for="example-text-input" class="form-control-label" style="color:#3f55d1">@Invoices.CalculationDifference.Status</label>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </Content>
                                    </TabItem>
                                    <TabItem id="tab6" @ref="_tab6">
                                        <Header><strong>Upload Hardcopy</strong></Header>
                                        <Content>
                                            <div class="col-md-12">
                                                <div class="card">
                                                    <div class="card-body">
                                                        <div class="row">
                                                            <div class="col-md-12" style="padding-top:10px;">
                                                                <div class="form-group" style="text-align:center;">
                                                                    <button class="btn btn-danger btn-sm ms-auto" @onclick="SavePreview">Save & Preview</button>
                                                                    <button class="btn btn-warning btn-sm ms-auto" @onclick="PreviousTab">Back</button>
                                                                </div>

                                                            </div>
                                                            <div class="col-md-4" style="padding-top:5px;">
                                                                <div class="form-control">
                                                                    <div class="form-group">
                                                                        <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;">
                                                                            Upload Image
                                                                        </label>
                                                                        @if (Invoices.IsFromDisplay)
                                                                        {
                                                                            <label for="example-text-input" class="font-weight-bolder mb-0" style="color:black;font-size:medium;">
                                                                                Previous Image is already saved. Only upload if you want to replace that.
                                                                            </label>
                                                                        }
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <InputFile OnChange="@LoadFiles" MaxSize="10485760" />
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </Content>
                                    </TabItem>
                                </TabItems>
                            </TabsPanel>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <Loader isLoading="@IsLoading" />
    </Authorized>
    <NotAuthorized>
        @if (_isJsReady)
        {
            <_403 />
        }
        else
        {
              <Loader isLoading="true" />
        }

    </NotAuthorized>
</AuthorizeView>
<script>
    window.selectAllInputValue = function (inputId) {
        var input = document.getElementById(inputId);
        if (input) {
            if (input.value === '0') {
                input.value = ''; // Clear the value
            } else {
                input.select(); // Select the input
            }
        }
    };
</script>


@code {

    private bool _isJsReady = false;


    private Invoicing Invoices { get; set; } = new Invoicing();
    private GetChamberDetails Shipping { get; set; } = new GetChamberDetails();
    public List<VehicleDTO> VehicleList = new List<VehicleDTO>();
    public List<string> Vehicle = new List<string>();

    private string TabHeading { get; set; }
    private string _activeColor = "White";
    private string _inactiveColor = "White";
    private string _hoverColor = "White";
    private int _width = 255;
    private int _height = 40;
    private TabPositons _tabPositon = TabPositons.Left;
    private bool _isAnimated = false;
    private bool _allTabsDisabled = false;
    private bool IsLoading = false;
    private bool CheckChamber1 = true;
    private bool _isTabHidden = false;
    private int _tabsCount;

    private bool DisableChamber1 = true;
    private bool DisableChamber2 = true;
    private bool DisableChamber3 = true;
    private bool DisableChamber4 = true;
    private bool DisableChamber5 = true;


    private TabsPanel _tabs;
    private TabItem _activeTab;
    private TabItem _tab1;
    private TabItem _tab2;
    private TabItem _tab3;
    private TabItem _tab4;
    private TabItem _tab5;
    private TabItem _tab6;
    private TabItem _tab7;

    protected override async void OnInitialized()
    {

        try
        {

            await GetAllVehicleID();

            // Retrieve the encoded JSON string from the query parameters if it exists
            string encodedJson = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;

            // Check if the "json" query parameter exists
            if (encodedJson.Contains("Edit="))
            {
                // Extract the value of the "json" query parameter
                encodedJson = encodedJson.Split("Edit=")[1];

                // Decode the URL-safe Base64 string
                string base64EncodedJson = HttpUtility.UrlDecode(encodedJson);

                // Convert the Base64 string back to UTF-8 encoded bytes
                byte[] base64EncodedBytes = Convert.FromBase64String(base64EncodedJson);

                // Decode the UTF-8 bytes back to the original JSON string
                string jsonString = Encoding.UTF8.GetString(base64EncodedBytes);

                // Deserialize the JSON string back into the Invoices object
                Invoices = JsonSerializer.Deserialize<Invoicing>(jsonString);
                StateHasChanged();
            }





        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    public async Task GetAllVehicleID()
    {

        try
        {

            var Vehicles = await API.GetRequest($"Vehicle/GetAllVehicleID");
            if (Vehicles != "")
            {

                Vehicle = JsonSerializer.Deserialize<List<string>>(Vehicles);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private void Chamber1Check(ChangeEventArgs e)
    {
        DisableChamber1 = (bool)e.Value;
        if (DisableChamber1)
        {
            Invoices.ShippingDetail.Chamber1 = new Ship_Chamber();
            Invoices.ReceivingDetail.Chamber1 = new Recieve_Chamber();
            Invoices.ShortageCalculation.Chamber1 = new ShortageChamber();

        }
    }
    private void Chamber2Check(ChangeEventArgs e)
    {
        DisableChamber2 = (bool)e.Value;
        if (DisableChamber2)
        {
            Invoices.ShippingDetail.Chamber2 = new Ship_Chamber();
            Invoices.ReceivingDetail.Chamber2 = new Recieve_Chamber();
            Invoices.ShortageCalculation.Chamber2 = new ShortageChamber();
        }
    }
    private void Chamber3Check(ChangeEventArgs e)
    {
        DisableChamber3 = (bool)e.Value;
        if (DisableChamber3)
        {
            Invoices.ShippingDetail.Chamber3 = new Ship_Chamber();
            Invoices.ReceivingDetail.Chamber3 = new Recieve_Chamber();
            Invoices.ShortageCalculation.Chamber3 = new ShortageChamber();
        }
    }
    private void Chamber4Check(ChangeEventArgs e)
    {
        DisableChamber4 = (bool)e.Value;
        if (DisableChamber4)
        {
            Invoices.ShippingDetail.Chamber4 = new Ship_Chamber();
            Invoices.ReceivingDetail.Chamber4 = new Recieve_Chamber();
            Invoices.ShortageCalculation.Chamber4 = new ShortageChamber();
        }
    }
    private void Chamber5Check(ChangeEventArgs e)
    {
        DisableChamber5 = (bool)e.Value;
        if (DisableChamber5)
        {
            Invoices.ShippingDetail.Chamber5 = new Ship_Chamber();
            Invoices.ReceivingDetail.Chamber5 = new Recieve_Chamber();
            Invoices.ShortageCalculation.Chamber5 = new ShortageChamber();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsLoading = true;

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {

                var fileExtension = Path.GetExtension(file.Name);
                var trustedFileNameForFileStorage = Invoices.Details.STONo.ToString() + fileExtension;
                var folderPath = Path.Combine(Environment.ContentRootPath, "wwwroot\\css\\Development", "HTL_Reports");

                // Create the directory if it doesn't exist
                if (!Directory.Exists(folderPath))
                {
                    Directory.CreateDirectory(folderPath);
                }

                var filePath = Path.Combine(folderPath, trustedFileNameForFileStorage);

                await using FileStream fs = new(filePath, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(fs);
                string correctedFilePath = Path.Combine("css/Development", "HTL_Reports", trustedFileNameForFileStorage);
                Invoices.InvoiceFilePath = correctedFilePath.Replace("\\", "/");
                toastService.ShowSuccess($"File {trustedFileNameForFileStorage} Upload Success");
            }
            catch (Exception ex)
            {
                toastService.ShowError($"Error {ex.Message}");

                IsLoading = false;
            }

        }
        IsLoading = false;

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("console.log", "");
                _isJsReady = true; // JS is ready, so set a flag or take action
                StateHasChanged();
                if (_tabs != null)
                {
                    await _tabs.InnerElementReference.FocusAsync();
                    _activeTab = _tab1;
                    _tabsCount = _tabs.TabCount;
                    TabHeading = "01- General Details";
                    StateHasChanged();
                }
                await JS.InvokeVoidAsync("initializeAutoComplete", "vehicleID", Vehicle);
            }
            catch (Exception ex)
            {
                _isJsReady = false; // JavaScript is not yet ready
                string e = ex.Message;
            }

        }
        else
        {
            await JS.InvokeVoidAsync("initializeAutoComplete", "vehicleID", Vehicle);
        }
    }

    private async Task SavePreview()
    {
        try
        {

            Invoices.InvoiceFilePath = Invoices.InvoiceFilePath == null ? "" : Invoices.InvoiceFilePath;


            Invoices.IsView = Invoices.IsView == "Update" ? Invoices.IsView : "View";
            string jsonString = JsonSerializer.Serialize(Invoices);

            // Encode the JSON string as Base64 to make it URL-safe
            string base64EncodedJson = Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));

            // Encode the Base64 string to make it URL-safe
            string encodedJson = HttpUtility.UrlEncode(base64EncodedJson);

            // Navigate to the destination page with the encoded JSON string as a query parameter
            NavigationManager.NavigateTo($"/invoicedisplay?json={encodedJson}");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error : {ex.Message}");
        }
    }
    private bool QtyDipFilledInChamber(Ship_Chamber chamber)
    {
        return chamber.ChamberQuantity != 0 && chamber.LorryDip != 0;
    }
    private bool AreAllFieldsFilledInChamber(Ship_Chamber chamber)
    {
        return chamber.ChamberQuantity != 0 && chamber.LorryDip != 0 && chamber.Quantity != 0 && Invoices.ShippingDetail.TempF != 0 && Invoices.ShippingDetail.SG != 0;
    }
    private bool AreAllFieldsFilledInReceivingChamber(Recieve_Chamber chamber)
    {
        return chamber.ChamberQuantity != 0 && chamber.LorryDip != 0 && chamber.Quantity != 0 && Invoices.ReceivingDetail.TempF != 0 && Invoices.ReceivingDetail.SG != 0;
    }
    public async Task<int> GetShippingChamberDetails(string VehicleID)
    {

        try
        {

            var VehicleIDs = await API.GetRequest($"Invoice/GetChamberDetails/{VehicleID}");
            if (VehicleIDs != "")
            {

                Shipping = JsonSerializer.Deserialize<GetChamberDetails>(VehicleIDs);
                if (Shipping != null)
                {
                    Invoices.ShippingDetail.Chamber1.ChamberQuantity = Shipping.chamber1Quantity;
                    Invoices.ShippingDetail.Chamber1.LorryDip = Shipping.chamber1Dip;
                    Invoices.ShippingDetail.Chamber2.ChamberQuantity = Shipping.chamber2Quantity;
                    Invoices.ShippingDetail.Chamber2.LorryDip = Shipping.chamber2Dip;
                    Invoices.ShippingDetail.Chamber3.ChamberQuantity = Shipping.chamber3Quantity;
                    Invoices.ShippingDetail.Chamber3.LorryDip = Shipping.chamber3Dip;
                    Invoices.ShippingDetail.Chamber4.ChamberQuantity = Shipping.chamber4Quantity;
                    Invoices.ShippingDetail.Chamber4.LorryDip = Shipping.chamber4Dip;
                    Invoices.ShippingDetail.Chamber5.ChamberQuantity = Shipping.chamber5Quantity;
                    Invoices.ShippingDetail.Chamber5.LorryDip = Shipping.chamber5Dip;
                    return 200;
                }
                else
                {
                    return 404;
                }

            }
            else
            {
                return 404;
            }
        }
        catch (Exception ex)
        {
            return 404;
            Console.WriteLine(ex.Message);
        }
    }
    private async Task NextTab()
    {
        IsLoading = true;
        try
        {
            Dictionary<int, string> tabHeadings = new Dictionary<int, string>()
 {
     { 5, "06- Upload Invoice Image" },
     { 0, "01- General Details" },
     { 1, "02- Shipping Details" },
     { 2, "03- Receiving Details" },
     { 3, "04- Shortage Calculation" },
     { 4, "05- Calculation Diff" }
 };
            var currentIndex = _tabs.Tabs.ToList().IndexOf(_activeTab);
            var nextIndex = (currentIndex + 1) % _tabsCount;

            if (currentIndex == 0 && Invoices.Details.TankLorryNO != null)
            {

                int ChamberStatus = await GetShippingChamberDetails(Invoices.Details.TankLorryNO);
                if (ChamberStatus == 200)
                {
                    if (QtyDipFilledInChamber(Invoices.ShippingDetail.Chamber1))
                    {
                        DisableChamber1 = false;
                    }
                    if (QtyDipFilledInChamber(Invoices.ShippingDetail.Chamber2))
                    {
                        DisableChamber2 = false;
                    }
                    if (QtyDipFilledInChamber(Invoices.ShippingDetail.Chamber3))
                    {
                        DisableChamber3 = false;
                    }
                    if (QtyDipFilledInChamber(Invoices.ShippingDetail.Chamber4))
                    {
                        DisableChamber4 = false;
                    }
                    if (QtyDipFilledInChamber(Invoices.ShippingDetail.Chamber5))
                    {
                        DisableChamber5 = false;
                    }
                }

                if (Invoices.IsFromDisplay && AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber1))
                {
                    DisableChamber1 = false;
                }
                if (Invoices.IsFromDisplay && AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber2))
                {
                    DisableChamber2 = false;
                }
                if (Invoices.IsFromDisplay && AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber3))
                {
                    DisableChamber3 = false;
                }
                if (Invoices.IsFromDisplay && AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber4))
                {
                    DisableChamber4 = false;
                }
                if (Invoices.IsFromDisplay && AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber5))
                {
                    DisableChamber5 = false;
                }


            }
            else if (Invoices.Details.TankLorryNO == null && Invoices.Details.STONo == null)
            {
                toastService.ShowWarning("Tank Lorry Number or STO No is Manadatory");
                IsLoading = false;

                return;
            }

            if (currentIndex == 1)
            {

                if (DisableChamber1 && DisableChamber2 && DisableChamber3 && DisableChamber4 && DisableChamber5)
                {
                    toastService.ShowError("Please Select Chamber");
                    IsLoading = false;

                    return;
                }
                if (!DisableChamber1 && !AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber1))
                {
                    toastService.ShowError("Please insert all fields in Chamber 1");
                    IsLoading = false;

                    return;
                }
                else if (!DisableChamber2 && !AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber2))
                {
                    toastService.ShowError("Please insert all fields in Chamber 2");
                    IsLoading = false;

                    return;
                }
                else if (!DisableChamber3 && !AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber3))
                {
                    toastService.ShowError("Please insert all fields in Chamber 3");
                    IsLoading = false;

                    return;
                }
                else if (!DisableChamber4 && !AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber4))
                {
                    toastService.ShowError("Please insert all fields in Chamber 4");
                    IsLoading = false;

                    return;
                }
                else if (!DisableChamber5 && !AreAllFieldsFilledInChamber(Invoices.ShippingDetail.Chamber5))
                {
                    toastService.ShowError("Please insert all fields in Chamber 5");
                    IsLoading = false;

                    return;
                }

                if (Invoices.ReceivingDetail.Chamber1.LorryDip != 0)
                {
                    await QunatityReceiv(1, Invoices.ReceivingDetail.Chamber1.LorryDip);
                }
                if (Invoices.ReceivingDetail.Chamber2.LorryDip != 0)
                {
                    await QunatityReceiv(2, Invoices.ReceivingDetail.Chamber2.LorryDip);
                }

                if (Invoices.ReceivingDetail.Chamber3.LorryDip != 0)
                {
                    await QunatityReceiv(3, Invoices.ReceivingDetail.Chamber3.LorryDip);
                }

                if (Invoices.ReceivingDetail.Chamber4.LorryDip != 0)
                {
                    await QunatityReceiv(4, Invoices.ReceivingDetail.Chamber4.LorryDip);
                }

                if (Invoices.ReceivingDetail.Chamber5.LorryDip != 0)
                {
                    await QunatityReceiv(5, Invoices.ReceivingDetail.Chamber5.LorryDip);
                }


            }
            else if (currentIndex == 2)
            {

                try
                {
                    if (!CalculateShortageForChamber1(Invoices))
                    {
                        IsLoading = false;

                        return;
                    }

                    if (!CalculateShortageForChamber2(Invoices))
                    {
                        IsLoading = false;

                        return;
                    }

                    if (!CalculateShortageForChamber3(Invoices))
                    {
                        IsLoading = false;

                        return;
                    }

                    if (!CalculateShortageForChamber4(Invoices))
                    {
                        IsLoading = false;

                        return;
                    }

                    if (!CalculateShortageForChamber5(Invoices))
                    {
                        IsLoading = false;

                        return;

                    }


                }
                catch (Exception ex)
                {
                    toastService.ShowError($"Invalid calculations detected");
                }

            }

            else if (currentIndex == 3)
            {
                try
                {
                    Invoices.CalculationDifference = new CalculationDiff();

                    float ReceivingTempF = Invoices.ReceivingDetail.TempF;
                    float ShippingTempF = Invoices.ShippingDetail.TempF;

                    float Total = ReceivingTempF - ShippingTempF;
                    float ReceivingTemp = (float)Math.Round(Total, 3);
                    Invoices.CalculationDifference.TempDiff = Math.Abs((float)Math.Round(ReceivingTemp));


                    float TotalChamberQuantityS = Invoices.ShippingDetail.Chamber1.ChamberQuantity + Invoices.ShippingDetail.Chamber2.ChamberQuantity +
                    Invoices.ShippingDetail.Chamber3.ChamberQuantity + Invoices.ShippingDetail.Chamber4.ChamberQuantity +
                    Invoices.ShippingDetail.Chamber5.ChamberQuantity;
                    float TotalChamberQuantityR = Invoices.ReceivingDetail.Chamber1.ChamberQuantity + Invoices.ReceivingDetail.Chamber2.ChamberQuantity +
               Invoices.ReceivingDetail.Chamber3.ChamberQuantity + Invoices.ReceivingDetail.Chamber4.ChamberQuantity +
               Invoices.ReceivingDetail.Chamber5.ChamberQuantity;

                    float TotalShortageLTRdip = TotalChamberQuantityR - TotalChamberQuantityS;
                    Invoices.CalculationDifference.TotalShortageByDip = Math.Abs(TotalShortageLTRdip);

                    #region Required Formula Reconsideration


                    double TotalQuantity85S = await GetQtyAt85F(Invoices.ShippingDetail.SG, Invoices.ShippingDetail.TempF, TotalChamberQuantityS);


                    double TotalQuantity85R = await GetQtyAt85F(Invoices.ReceivingDetail.SG, Invoices.ReceivingDetail.TempF, TotalChamberQuantityR);

                    #endregion
                    float ShortOnTempExempt = 0.0f;
                    float ShortContratorCharge = float.Parse((TotalQuantity85S - TotalQuantity85R).ToString());
                    if (ShortContratorCharge == 0)
                    {
                        Invoices.CalculationDifference.Status = "-";
                    }
                    else if (ShortContratorCharge > 0)
                    {
                        Invoices.CalculationDifference.Status = "Short";
                        ShortOnTempExempt = Math.Abs(TotalShortageLTRdip) - ShortContratorCharge;

                    }
                    else if (ShortContratorCharge < 0)
                    {
                        Invoices.CalculationDifference.Status = "Extra";
                        ShortOnTempExempt = TotalShortageLTRdip - Math.Abs(ShortContratorCharge);

                    }

                    Invoices.CalculationDifference.ShortageCharge = Math.Abs(ShortContratorCharge);

                    // float ShortOnTempExempt = TotalShortageLTRdip - ShortContratorCharge;

                    Invoices.CalculationDifference.ShortOnTemp = Math.Abs(ShortOnTempExempt);
                    // if (ReceivingTemp > 0)
                    // {
                    float Shortage1F = 0.0f;
                    if (ReceivingTemp != 0)
                    {
                        Shortage1F = ShortOnTempExempt / ReceivingTemp;
                    }
                    else
                    {

                        Shortage1F = 0;
                    }

                    Invoices.CalculationDifference.Shortage1FTemp = Math.Abs((float)Math.Round(Shortage1F, 3));
                    // }


                    float QunatityShouldR = TotalChamberQuantityS - Math.Abs(ShortOnTempExempt);
                    Invoices.CalculationDifference.QtyShouldRecieved = QunatityShouldR;
                }
                catch (Exception ex)
                {
                    IsLoading = false;
                    toastService.ShowError($"Invalid calculations detected");
                }
            }
            TabHeading = tabHeadings[nextIndex];
            _activeTab = _tabs.Tabs.ElementAt(nextIndex);
        }
        catch (Exception ex)
        {
            IsLoading = false;
            toastService.ShowError($"Error occured");
        }
        IsLoading = false;
    }



    // private async Task SelectAllInputValue(string Input)
    // {
    //     await JS.InvokeVoidAsync("selectAllInputValue", Input);
    // }
    bool CalculateShortageForChamber1(Invoicing chamber)
    {
        if (!DisableChamber1 && !AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber1))
        {
            toastService.ShowError($"Please insert all fields in Chamber 1");
            return false;
        }
        else if (!DisableChamber1 && AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber1))
        {
            Invoices.ShortageCalculation.Chamber1 = new ShortageChamber();
            Invoices.ShortageCalculation.Chamber1.ShortageMM = Math.Abs(Invoices.ReceivingDetail.Chamber1.LorryDip - Invoices.ShippingDetail.Chamber1.LorryDip);
            float ShortMM = Invoices.ShortageCalculation.Chamber1.ShortageMM;
            float TotalChamberLtr = Invoices.ShippingDetail.Chamber1.ChamberQuantity;
            // float Loading = Invoices.ShippingDetail.Chamber1.LorryDip;
            // float LoadingDivision = (TotalChamberLtr / Loading);
            // float Total = LoadingDivision * ShortMM;
            float Loading = Invoices.ReceivingDetail.Chamber1.ChamberQuantity;
            float Total = TotalChamberLtr - Loading;

            Invoices.ShortageCalculation.Chamber1.TotalShortageLtr = Math.Abs((int)Math.Round(Total));

        }
        return true;
    }
    bool CalculateShortageForChamber2(Invoicing chamber)
    {
        if (!DisableChamber2 && !AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber2))
        {
            toastService.ShowError($"Please insert all fields in Chamber 2");
            return false;
        }
        else if (!DisableChamber2 && AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber2))
        {
            Invoices.ShortageCalculation.Chamber2 = new ShortageChamber();
            Invoices.ShortageCalculation.Chamber2.ShortageMM = Math.Abs(Invoices.ReceivingDetail.Chamber2.LorryDip - Invoices.ShippingDetail.Chamber2.LorryDip);
            float ShortMM = Invoices.ShortageCalculation.Chamber2.ShortageMM;
            float TotalChamberLtr = Invoices.ShippingDetail.Chamber2.ChamberQuantity;
            // float Loading = Invoices.ShippingDetail.Chamber2.LorryDip;
            // float LoadingDivision = (TotalChamberLtr / Loading);
            // float Total = LoadingDivision * ShortMM;
            float Loading = Invoices.ReceivingDetail.Chamber2.ChamberQuantity;
            float Total = TotalChamberLtr - Loading;
            Invoices.ShortageCalculation.Chamber2.TotalShortageLtr = Math.Abs((int)Math.Round(Total));
        }

        return true;
    }
    bool CalculateShortageForChamber3(Invoicing chamber)
    {
        if (!DisableChamber3 && !AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber3))
        {
            toastService.ShowError($"Please insert all fields in Chamber 3");
            return false;
        }
        else if (!DisableChamber3 && AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber3))
        {
            Invoices.ShortageCalculation.Chamber3 = new ShortageChamber();
            Invoices.ShortageCalculation.Chamber3.ShortageMM = Math.Abs(Invoices.ReceivingDetail.Chamber3.LorryDip - Invoices.ShippingDetail.Chamber3.LorryDip);
            float ShortMM = Invoices.ShortageCalculation.Chamber3.ShortageMM;
            float TotalChamberLtr = Invoices.ShippingDetail.Chamber3.ChamberQuantity;
            // float Loading = Invoices.ShippingDetail.Chamber3.LorryDip;
            // float LoadingDivision = (TotalChamberLtr / Loading);
            // float Total = LoadingDivision * ShortMM;
            float Loading = Invoices.ReceivingDetail.Chamber3.ChamberQuantity;
            float Total = TotalChamberLtr - Loading;
            Invoices.ShortageCalculation.Chamber3.TotalShortageLtr = Math.Abs((int)Math.Round(Total));
        }
        return true;
    }
    bool CalculateShortageForChamber4(Invoicing chamber)
    {
        if (!DisableChamber4 && !AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber4))
        {
            toastService.ShowError($"Please insert all fields in Chamber 4");
            return false;
        }
        else if (!DisableChamber4 && AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber4))
        {
            Invoices.ShortageCalculation.Chamber4 = new ShortageChamber();
            Invoices.ShortageCalculation.Chamber4.ShortageMM = Math.Abs(Invoices.ReceivingDetail.Chamber4.LorryDip - Invoices.ShippingDetail.Chamber4.LorryDip);
            float ShortMM = Invoices.ShortageCalculation.Chamber4.ShortageMM;
            float TotalChamberLtr = Invoices.ShippingDetail.Chamber4.ChamberQuantity;
            // float Loading = Invoices.ShippingDetail.Chamber4.LorryDip;
            // float LoadingDivision = (TotalChamberLtr / Loading);
            // float Total = LoadingDivision * ShortMM;
            float Loading = Invoices.ReceivingDetail.Chamber4.ChamberQuantity;
            float Total = TotalChamberLtr - Loading;
            Invoices.ShortageCalculation.Chamber4.TotalShortageLtr = Math.Abs((int)Math.Round(Total));
        }
        return true;
    }
    bool CalculateShortageForChamber5(Invoicing chamber)
    {
        if (!DisableChamber5 && !AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber5))
        {
            toastService.ShowError($"Please insert all fields in Chamber 5");
            return false;
        }
        else if (!DisableChamber5 && AreAllFieldsFilledInReceivingChamber(Invoices.ReceivingDetail.Chamber5))
        {
            Invoices.ShortageCalculation.Chamber5 = new ShortageChamber();
            Invoices.ShortageCalculation.Chamber5.ShortageMM = Math.Abs(Invoices.ReceivingDetail.Chamber5.LorryDip - Invoices.ShippingDetail.Chamber5.LorryDip);
            float ShortMM = Invoices.ShortageCalculation.Chamber5.ShortageMM;
            float TotalChamberLtr = Invoices.ShippingDetail.Chamber5.ChamberQuantity;
            // float Loading = Invoices.ShippingDetail.Chamber5.LorryDip;
            // float LoadingDivision = (TotalChamberLtr / Loading);
            // float Total = LoadingDivision * ShortMM;
            float Loading = Invoices.ReceivingDetail.Chamber5.ChamberQuantity;
            float Total = TotalChamberLtr - Loading;
            Invoices.ShortageCalculation.Chamber5.TotalShortageLtr = Math.Abs((int)Math.Round(Total));
        }
        return true;

    }



    private void PreviousTab()
    {
        IsLoading = true;
        Dictionary<int, string> tabHeadings = new Dictionary<int, string>()
    {

        { 0, "01- General Details" },
        { 1, "02- Shipping Details" },
        { 2, "03- Receiving Details" },
        { 3, "04- Shortage Calculation" },
        { 4, "05- Calculation Diff" },
        { 5, "06- Upload Invoice Image" }
    };

        var currentIndex = _tabs.Tabs.ToList().IndexOf(_activeTab);


        var nextIndex = currentIndex - 1;
        _activeTab = _tabs.Tabs.ElementAt(nextIndex);
        TabHeading = tabHeadings[nextIndex];
        IsLoading = false;

    }


    private async Task OnTabChanged(TabItem tab)
    {
        _activeTab = tab;
        var index = _tabs.Tabs.ToList().IndexOf(tab);
    }

    private async Task GetQuantitiesBySG(ChangeEventArgs e)
    {
        if (e.Value != "")
        {
            float Val = float.Parse(e.Value.ToString());
            double calculated6Quantity1 = await GetQtyAt85F(Val, Invoices.ShippingDetail.TempF, Invoices.ShippingDetail.Chamber1.ChamberQuantity);
            double calculated6Quantity2 = await GetQtyAt85F(Val, Invoices.ShippingDetail.TempF, Invoices.ShippingDetail.Chamber2.ChamberQuantity);
            double calculated6Quantity3 = await GetQtyAt85F(Val, Invoices.ShippingDetail.TempF, Invoices.ShippingDetail.Chamber3.ChamberQuantity);
            double calculated6Quantity4 = await GetQtyAt85F(Val, Invoices.ShippingDetail.TempF, Invoices.ShippingDetail.Chamber4.ChamberQuantity);
            double calculated6Quantity5 = await GetQtyAt85F(Val, Invoices.ShippingDetail.TempF, Invoices.ShippingDetail.Chamber5.ChamberQuantity);

            // Set the quantity for each chamber
            Invoices.ShippingDetail.Chamber1.Quantity = int.Parse(calculated6Quantity1.ToString());
            Invoices.ShippingDetail.Chamber2.Quantity = int.Parse(calculated6Quantity2.ToString());
            Invoices.ShippingDetail.Chamber3.Quantity = int.Parse(calculated6Quantity3.ToString());
            Invoices.ShippingDetail.Chamber4.Quantity = int.Parse(calculated6Quantity4.ToString());
            Invoices.ShippingDetail.Chamber5.Quantity = int.Parse(calculated6Quantity5.ToString());
        }
    }
    private async Task GetQuantitiesByTemp(ChangeEventArgs e)
    {
        if (e.Value != "")
        {
            float Val = float.Parse(e.Value.ToString());
            double calculated6Quantity1 = await GetQtyAt85F(Invoices.ShippingDetail.SG, Val, Invoices.ShippingDetail.Chamber1.ChamberQuantity);
            double calculated6Quantity2 = await GetQtyAt85F(Invoices.ShippingDetail.SG, Val, Invoices.ShippingDetail.Chamber2.ChamberQuantity);
            double calculated6Quantity3 = await GetQtyAt85F(Invoices.ShippingDetail.SG, Val, Invoices.ShippingDetail.Chamber3.ChamberQuantity);
            double calculated6Quantity4 = await GetQtyAt85F(Invoices.ShippingDetail.SG, Val, Invoices.ShippingDetail.Chamber4.ChamberQuantity);
            double calculated6Quantity5 = await GetQtyAt85F(Invoices.ShippingDetail.SG, Val, Invoices.ShippingDetail.Chamber5.ChamberQuantity);

            // Set the quantity for each chamber
            Invoices.ShippingDetail.Chamber1.Quantity = int.Parse(calculated6Quantity1.ToString());
            Invoices.ShippingDetail.Chamber2.Quantity = int.Parse(calculated6Quantity2.ToString());
            Invoices.ShippingDetail.Chamber3.Quantity = int.Parse(calculated6Quantity3.ToString());
            Invoices.ShippingDetail.Chamber4.Quantity = int.Parse(calculated6Quantity4.ToString());
            Invoices.ShippingDetail.Chamber5.Quantity = int.Parse(calculated6Quantity5.ToString());
        }
    }
    private async Task GetReceivingQuantitiesByTemp(ChangeEventArgs e)
    {
        if (e.Value != "")
        {
            float Val = float.Parse(e.Value.ToString());
            double calculated6Quantity1 = await GetQtyAt85F(Invoices.ReceivingDetail.SG, Val, Invoices.ReceivingDetail.Chamber1.ChamberQuantity);
            double calculated6Quantity2 = await GetQtyAt85F(Invoices.ReceivingDetail.SG, Val, Invoices.ReceivingDetail.Chamber2.ChamberQuantity);
            double calculated6Quantity3 = await GetQtyAt85F(Invoices.ReceivingDetail.SG, Val, Invoices.ReceivingDetail.Chamber3.ChamberQuantity);
            double calculated6Quantity4 = await GetQtyAt85F(Invoices.ReceivingDetail.SG, Val, Invoices.ReceivingDetail.Chamber4.ChamberQuantity);
            double calculated6Quantity5 = await GetQtyAt85F(Invoices.ReceivingDetail.SG, Val, Invoices.ReceivingDetail.Chamber5.ChamberQuantity);

            // Set the quantity for each chamber
            Invoices.ReceivingDetail.Chamber1.Quantity = int.Parse(calculated6Quantity1.ToString());
            Invoices.ReceivingDetail.Chamber2.Quantity = int.Parse(calculated6Quantity2.ToString());
            Invoices.ReceivingDetail.Chamber3.Quantity = int.Parse(calculated6Quantity3.ToString());
            Invoices.ReceivingDetail.Chamber4.Quantity = int.Parse(calculated6Quantity4.ToString());
            Invoices.ReceivingDetail.Chamber5.Quantity = int.Parse(calculated6Quantity5.ToString());
        }
    }

    private async Task GetReceivingQuantitiesBySG(ChangeEventArgs e)
    {
        if (e.Value != "")
        {
            float Val = float.Parse(e.Value.ToString());
            double calculated6Quantity1 = await GetQtyAt85F(Val, Invoices.ReceivingDetail.TempF, Invoices.ReceivingDetail.Chamber1.ChamberQuantity);
            double calculated6Quantity2 = await GetQtyAt85F(Val, Invoices.ReceivingDetail.TempF, Invoices.ReceivingDetail.Chamber2.ChamberQuantity);
            double calculated6Quantity3 = await GetQtyAt85F(Val, Invoices.ReceivingDetail.TempF, Invoices.ReceivingDetail.Chamber3.ChamberQuantity);
            double calculated6Quantity4 = await GetQtyAt85F(Val, Invoices.ReceivingDetail.TempF, Invoices.ReceivingDetail.Chamber4.ChamberQuantity);
            double calculated6Quantity5 = await GetQtyAt85F(Val, Invoices.ReceivingDetail.TempF, Invoices.ReceivingDetail.Chamber5.ChamberQuantity);

            // Set the quantity for each chamber
            Invoices.ReceivingDetail.Chamber1.Quantity = int.Parse(calculated6Quantity1.ToString());
            Invoices.ReceivingDetail.Chamber2.Quantity = int.Parse(calculated6Quantity2.ToString());
            Invoices.ReceivingDetail.Chamber3.Quantity = int.Parse(calculated6Quantity3.ToString());
            Invoices.ReceivingDetail.Chamber4.Quantity = int.Parse(calculated6Quantity4.ToString());
            Invoices.ReceivingDetail.Chamber5.Quantity = int.Parse(calculated6Quantity5.ToString());
        }
    }
    private async Task TextChangedShipment(int chamberNumber, ChangeEventArgs e)
    {
        try
        {
            if (Invoices.ShippingDetail.SG != 0 && Invoices.ShippingDetail.TempF != 0)
            {

                int quantity = int.Parse(e.Value.ToString());
                double calculatedQuantity = await GetQtyAt85F(Invoices.ShippingDetail.SG, Invoices.ShippingDetail.TempF, quantity);

                switch (chamberNumber)
                {
                    case 1:
                        Invoices.ShippingDetail.Chamber1.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    case 2:
                        Invoices.ShippingDetail.Chamber2.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    case 3:
                        Invoices.ShippingDetail.Chamber3.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    case 4:
                        Invoices.ShippingDetail.Chamber4.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    case 5:
                        Invoices.ShippingDetail.Chamber5.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    default:
                        // Handle invalid chamber number
                        break;
                }

            }
            else if (e.Value != "")
            {

            }


        }
        catch (Exception ex)
        {

        }
    }
    private async Task<int> GetChamberQunatity(int ChamberQuantity, int LorryDip, int RLorryDip)
    {
        try
        {
            float RecievingLorryDip = RLorryDip;
            float ChamberQunatity = ChamberQuantity;
            float ChamberLorry = LorryDip;
            float Avg = ChamberQunatity / ChamberLorry;
            float Total = Avg * RecievingLorryDip;
            return int.Parse(Math.Round(Total).ToString());
        }
        catch (Exception ex)
        {
            return 0;
        }

    }

    private async Task QuantityChangeReceiving(int chamberNumber, ChangeEventArgs e)
    {
        try
        {

            if (e.Value != "0" )
            {
                e.Value = e.Value == "" ? "0" : e.Value;
                int Values = int.Parse(e.Value.ToString());
                await QunatityReceiv(chamberNumber, Values);
            }

            else
            {
                toastService.ShowWarning("Please insert Tempreture and SG first");
            }
        }
        catch (Exception ex)
        {

        }

    }


    public async Task QunatityReceiv(int chamberNumber, int value)
    {
        try
        {


            switch (chamberNumber)
            {
                case 1:
                    if (value == 0)
                    {
                        Invoices.ReceivingDetail.Chamber1 = new Recieve_Chamber();
                        return;
                    }
                    Invoices.ReceivingDetail.Chamber1.ChamberQuantity = await GetChamberQunatity(Invoices.ShippingDetail.Chamber1.ChamberQuantity, Invoices.ShippingDetail.Chamber1.LorryDip, value);
                    await TextChangedReceiving(1, Invoices.ReceivingDetail.Chamber1.ChamberQuantity);

                    break;
                case 2:
                    if (value == 0)
                    {
                        Invoices.ReceivingDetail.Chamber2 = new Recieve_Chamber();
                        return;
                    }
                    Invoices.ReceivingDetail.Chamber2.ChamberQuantity = await GetChamberQunatity(Invoices.ShippingDetail.Chamber2.ChamberQuantity, Invoices.ShippingDetail.Chamber2.LorryDip,value);
                    await TextChangedReceiving(2, Invoices.ReceivingDetail.Chamber2.ChamberQuantity);
                    break;
                case 3:
                    if (value == 0)
                    {
                        Invoices.ReceivingDetail.Chamber3 = new Recieve_Chamber();
                        return;
                    }
                    Invoices.ReceivingDetail.Chamber3.ChamberQuantity = await GetChamberQunatity(Invoices.ShippingDetail.Chamber3.ChamberQuantity, Invoices.ShippingDetail.Chamber3.LorryDip, value);
                    await TextChangedReceiving(3, Invoices.ReceivingDetail.Chamber3.ChamberQuantity);
                    break;
                case 4:
                    if (value == 0)
                    {
                        Invoices.ReceivingDetail.Chamber4 = new Recieve_Chamber();
                        return;
                    }
                    Invoices.ReceivingDetail.Chamber4.ChamberQuantity = await GetChamberQunatity(Invoices.ShippingDetail.Chamber4.ChamberQuantity, Invoices.ShippingDetail.Chamber4.LorryDip, value);
                    await TextChangedReceiving(4, Invoices.ReceivingDetail.Chamber4.ChamberQuantity);
                    break;
                case 5:
                    if (value == 0)
                    {
                        Invoices.ReceivingDetail.Chamber5 = new Recieve_Chamber();
                        return;
                    }
                    Invoices.ReceivingDetail.Chamber5.ChamberQuantity = await GetChamberQunatity(Invoices.ShippingDetail.Chamber5.ChamberQuantity, Invoices.ShippingDetail.Chamber5.LorryDip, value);
                    await TextChangedReceiving(5, Invoices.ReceivingDetail.Chamber5.ChamberQuantity);
                    break;
                default:
                    // Handle invalid chamber number
                    break;
            }

        }
        catch (Exception ex)
        {

        }

    }

    private async Task TextChangedReceiving(int chamberNumber, int Quantity)
    {
        try
        {
            if (Invoices.ReceivingDetail.SG != 0 && Invoices.ReceivingDetail.TempF != 0)
            {
                double calculatedQuantity = await GetQtyAt85F(Invoices.ReceivingDetail.SG, Invoices.ReceivingDetail.TempF, Quantity);

                // Set the quantity for the specified chamber
                switch (chamberNumber)
                {
                    case 1:
                        Invoices.ReceivingDetail.Chamber1.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    case 2:
                        Invoices.ReceivingDetail.Chamber2.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    case 3:
                        Invoices.ReceivingDetail.Chamber3.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    case 4:
                        Invoices.ReceivingDetail.Chamber4.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    case 5:
                        Invoices.ReceivingDetail.Chamber5.Quantity = int.Parse(calculatedQuantity.ToString());
                        break;
                    default:
                        // Handle invalid chamber number
                        break;
                }
            }
            else if (Quantity != 0)
            {

            }
            else
            {
                toastService.ShowWarning("Please insert Tempreture and SG first");
            }
        }
        catch (Exception ex)
        {

        }

    }

    public async Task<double> GetQtyAt85F(double sg, double temp, double qty)
    {
        List<DensityFactorData> data = DensityFactorCollection.GetData();
        double result = 0;
        sg = Math.Round(sg, 3);
        var factor = data.Where(a => a.Density == sg).FirstOrDefault();
        if (factor != null)
        {
            double factvalue = factor.Factor;
            if (sg == 0)
            {
                return 0;
            }
            else
            {

                if (temp > 85)
                {
                    result = Math.Round((qty / (1 + (factvalue * (temp - 85)))), 0);
                }
                else
                {
                    result = Math.Round((qty * (1 - (factvalue * (temp - 85)))), 0);
                }
            }
        }
        else
        {
            return 0;
        }
        return result;
    }
    public class DensityFactorData
    {
        public double Density { get; set; }
        public double Factor { get; set; }

        public DensityFactorData(double density, double factor)
        {
            Density = density;
            Factor = factor;
        }
    }
    public class DensityFactorCollection
    {
        public static List<DensityFactorData> GetData()
        {
            return new List<DensityFactorData>
        {
             new DensityFactorData(0.640, 0.00083),
            new DensityFactorData(0.641, 0.00083),
            new DensityFactorData(0.642, 0.00083),
            new DensityFactorData(0.643, 0.00083),
            new DensityFactorData(0.644, 0.00082),
            new DensityFactorData(0.645, 0.00082),
            new DensityFactorData(0.646, 0.00082),
            new DensityFactorData(0.647, 0.00082),
            new DensityFactorData(0.648, 0.00081),
            new DensityFactorData(0.649, 0.00081),
            new DensityFactorData(0.650, 0.00081),
            new DensityFactorData(0.651, 0.00081),
            new DensityFactorData(0.652, 0.00080),
            new DensityFactorData(0.653, 0.00080),
            new DensityFactorData(0.654, 0.00080),
            new DensityFactorData(0.655, 0.00080),
            new DensityFactorData(0.656, 0.00079),
            new DensityFactorData(0.657, 0.00079),
            new DensityFactorData(0.658, 0.00079),
            new DensityFactorData(0.659, 0.00079),
            new DensityFactorData(0.660, 0.00078),
            new DensityFactorData(0.661, 0.00078),
            new DensityFactorData(0.662, 0.00078),
            new DensityFactorData(0.663, 0.00078),
            new DensityFactorData(0.664, 0.00077),
            new DensityFactorData(0.665, 0.00077),
            new DensityFactorData(0.666, 0.00077),
            new DensityFactorData(0.667, 0.00077),
            new DensityFactorData(0.668, 0.00076),
            new DensityFactorData(0.669, 0.00076),
            new DensityFactorData(0.670, 0.00076),
            new DensityFactorData(0.671, 0.00076),
            new DensityFactorData(0.672, 0.00075),
            new DensityFactorData(0.673, 0.00075),
            new DensityFactorData(0.674, 0.00075),
            new DensityFactorData(0.675, 0.00075),
            new DensityFactorData(0.676, 0.00075),
            new DensityFactorData(0.677, 0.00074),
            new DensityFactorData(0.678, 0.00074),
            new DensityFactorData(0.679, 0.00074),
            new DensityFactorData(0.680, 0.00074),
            new DensityFactorData(0.681, 0.00073),
            new DensityFactorData(0.682, 0.00073),
            new DensityFactorData(0.683, 0.00073),
            new DensityFactorData(0.684, 0.00073),
            new DensityFactorData(0.685, 0.00073),
            new DensityFactorData(0.686, 0.00072),
            new DensityFactorData(0.687, 0.00072),
            new DensityFactorData(0.688, 0.00072),
            new DensityFactorData(0.689, 0.00072),
            new DensityFactorData(0.690, 0.00072),
            new DensityFactorData(0.691, 0.00071),
            new DensityFactorData(0.692, 0.00071),
            new DensityFactorData(0.693, 0.00071),
            new DensityFactorData(0.694, 0.00071),
            new DensityFactorData(0.695, 0.00071),
            new DensityFactorData(0.696, 0.00070),
            new DensityFactorData(0.697, 0.00070),
            new DensityFactorData(0.698, 0.00070),
            new DensityFactorData(0.699, 0.00070),
            new DensityFactorData(0.700, 0.00070),
            new DensityFactorData(0.701, 0.00069),
            new DensityFactorData(0.702, 0.00069),
            new DensityFactorData(0.703, 0.00069),
            new DensityFactorData(0.704, 0.00069),
            new DensityFactorData(0.705, 0.00069),
            new DensityFactorData(0.706, 0.00068),
            new DensityFactorData(0.707, 0.00068),
            new DensityFactorData(0.708, 0.00068),
            new DensityFactorData(0.709, 0.00068),
            new DensityFactorData(0.710, 0.00068),
            new DensityFactorData(0.711, 0.00067),
            new DensityFactorData(0.712, 0.00067),
            new DensityFactorData(0.713, 0.00067),
            new DensityFactorData(0.714, 0.00067),
            new DensityFactorData(0.715, 0.00067),
            new DensityFactorData(0.716, 0.00066),
            new DensityFactorData(0.717, 0.00066),
            new DensityFactorData(0.718, 0.00066),
            new DensityFactorData(0.719, 0.00066),
            new DensityFactorData(0.720, 0.00066),
            new DensityFactorData(0.721, 0.00065),
            new DensityFactorData(0.722, 0.00065),
            new DensityFactorData(0.723, 0.00065),
            new DensityFactorData(0.724, 0.00065),
            new DensityFactorData(0.725, 0.00065),
            new DensityFactorData(0.726, 0.00064),
            new DensityFactorData(0.727, 0.00064),
            new DensityFactorData(0.728, 0.00064),
            new DensityFactorData(0.729, 0.00064),
            new DensityFactorData(0.730, 0.00064),
            new DensityFactorData(0.731, 0.00063),
            new DensityFactorData(0.732, 0.00063),
            new DensityFactorData(0.733, 0.00063),
            new DensityFactorData(0.734, 0.00063),
            new DensityFactorData(0.735, 0.00063),
            new DensityFactorData(0.736, 0.00062),
            new DensityFactorData(0.737, 0.00062),
            new DensityFactorData(0.738, 0.00062),
            new DensityFactorData(0.739, 0.00062),
            new DensityFactorData(0.740, 0.00062),
            new DensityFactorData(0.741, 0.00061),
            new DensityFactorData(0.742, 0.00061),
            new DensityFactorData(0.743, 0.00061),
            new DensityFactorData(0.744, 0.00061),
            new DensityFactorData(0.745, 0.00061),
            new DensityFactorData(0.746, 0.00060),
            new DensityFactorData(0.747, 0.00060),
            new DensityFactorData(0.748, 0.00060),
            new DensityFactorData(0.749, 0.00060),
            new DensityFactorData(0.750, 0.00060),
            new DensityFactorData(0.751, 0.00059),
            new DensityFactorData(0.752, 0.00059),
            new DensityFactorData(0.753, 0.00059),
            new DensityFactorData(0.754, 0.00059),
            new DensityFactorData(0.755, 0.00059),
            new DensityFactorData(0.756, 0.00059),
            new DensityFactorData(0.757, 0.00058),
            new DensityFactorData(0.758, 0.00058),
            new DensityFactorData(0.759, 0.00058),
            new DensityFactorData(0.760, 0.00058),
            new DensityFactorData(0.761, 0.00058),
            new DensityFactorData(0.762, 0.00057),
            new DensityFactorData(0.763, 0.00057),
            new DensityFactorData(0.764, 0.00057),
            new DensityFactorData(0.765, 0.00057),
            new DensityFactorData(0.766, 0.00057),
            new DensityFactorData(0.767, 0.00057),
            new DensityFactorData(0.768, 0.00056),
            new DensityFactorData(0.769, 0.00056),
            new DensityFactorData(0.770, 0.00056),
            new DensityFactorData(0.771, 0.00056),
            new DensityFactorData(0.772, 0.00056),
            new DensityFactorData(0.773, 0.00055),
            new DensityFactorData(0.774, 0.00055),
            new DensityFactorData(0.775, 0.00055),
            new DensityFactorData(0.776, 0.00055),
            new DensityFactorData(0.777, 0.00055),
            new DensityFactorData(0.778, 0.00054),
            new DensityFactorData(0.779, 0.00054),
            new DensityFactorData(0.780, 0.00054),
            new DensityFactorData(0.781, 0.00054),
            new DensityFactorData(0.782, 0.00054),
            new DensityFactorData(0.783, 0.00054),
            new DensityFactorData(0.784, 0.00053),
            new DensityFactorData(0.785, 0.00053),
            new DensityFactorData(0.786, 0.00053),
            new DensityFactorData(0.787, 0.00053),
            new DensityFactorData(0.788, 0.00053),
            new DensityFactorData(0.789, 0.00053),
            new DensityFactorData(0.790, 0.00052),
            new DensityFactorData(0.791, 0.00052),
            new DensityFactorData(0.792, 0.00052),
            new DensityFactorData(0.793, 0.00052),
            new DensityFactorData(0.794, 0.00052),
            new DensityFactorData(0.795, 0.00052),
            new DensityFactorData(0.796, 0.00051),
            new DensityFactorData(0.797, 0.00051),
            new DensityFactorData(0.798, 0.00051),
            new DensityFactorData(0.799, 0.00051),
            new DensityFactorData(0.800, 0.00051),
            new DensityFactorData(0.801, 0.00051),
            new DensityFactorData(0.802, 0.00050),
            new DensityFactorData(0.803, 0.00050),
            new DensityFactorData(0.804, 0.00050),
            new DensityFactorData(0.805, 0.00050),
            new DensityFactorData(0.806, 0.00050),
            new DensityFactorData(0.807, 0.00050),
            new DensityFactorData(0.808, 0.00049),
            new DensityFactorData(0.809, 0.00049),
            new DensityFactorData(0.810, 0.00049),
            new DensityFactorData(0.811, 0.00049),
            new DensityFactorData(0.812, 0.00049),
            new DensityFactorData(0.813, 0.00049),
            new DensityFactorData(0.814, 0.00049),
            new DensityFactorData(0.815, 0.00048),
            new DensityFactorData(0.816, 0.00048),
            new DensityFactorData(0.817, 0.00048),
            new DensityFactorData(0.818, 0.00048),
            new DensityFactorData(0.819, 0.00048),
            new DensityFactorData(0.820, 0.00048),
            new DensityFactorData(0.821, 0.00048),
            new DensityFactorData(0.822, 0.00048),
            new DensityFactorData(0.823, 0.00048),
            new DensityFactorData(0.824, 0.00047),
            new DensityFactorData(0.825, 0.00047),
            new DensityFactorData(0.826, 0.00047),
            new DensityFactorData(0.827, 0.00047),
            new DensityFactorData(0.828, 0.00047),
            new DensityFactorData(0.829, 0.00047),
            new DensityFactorData(0.830, 0.00047),
            new DensityFactorData(0.831, 0.00047),
            new DensityFactorData(0.832, 0.00047),
            new DensityFactorData(0.833, 0.00046),
            new DensityFactorData(0.834, 0.00046),
            new DensityFactorData(0.835, 0.00046),
            new DensityFactorData(0.836, 0.00046),
            new DensityFactorData(0.837, 0.00046),
            new DensityFactorData(0.838, 0.00046),
            new DensityFactorData(0.839, 0.00046),
            new DensityFactorData(0.840, 0.00046),
            new DensityFactorData(0.841, 0.00046),
            new DensityFactorData(0.842, 0.00046),
            new DensityFactorData(0.843, 0.00045),
            new DensityFactorData(0.844, 0.00045),
            new DensityFactorData(0.845, 0.00045),
            new DensityFactorData(0.846, 0.00045),
            new DensityFactorData(0.847, 0.00045),
            new DensityFactorData(0.848, 0.00045),
            new DensityFactorData(0.849, 0.00045),
            new DensityFactorData(0.850, 0.00045),
            new DensityFactorData(0.851, 0.00045),
            new DensityFactorData(0.852, 0.00045),
            new DensityFactorData(0.853, 0.00044),
            new DensityFactorData(0.854, 0.00044),
            new DensityFactorData(0.855, 0.00044),
            new DensityFactorData(0.856, 0.00044),
          new DensityFactorData(0.857, 0.00044),
  new DensityFactorData(0.858, 0.00044),
  new DensityFactorData(0.859, 0.00044),
  new DensityFactorData(0.860, 0.00044),
  new DensityFactorData(0.861, 0.00044),
  new DensityFactorData(0.862, 0.00044),
  new DensityFactorData(0.863, 0.00043),
  new DensityFactorData(0.864, 0.00043),
  new DensityFactorData(0.865, 0.00043),
  new DensityFactorData(0.866, 0.00043),
  new DensityFactorData(0.867, 0.00043),
  new DensityFactorData(0.868, 0.00043),
  new DensityFactorData(0.869, 0.00043),
  new DensityFactorData(0.870, 0.00043),
  new DensityFactorData(0.871, 0.00043),
  new DensityFactorData(0.872, 0.00043),
  new DensityFactorData(0.873, 0.00043),
  new DensityFactorData(0.874, 0.00043),
  new DensityFactorData(0.875, 0.00043),
  new DensityFactorData(0.876, 0.00042),
  new DensityFactorData(0.877, 0.00042),
  new DensityFactorData(0.878, 0.00042),
  new DensityFactorData(0.879, 0.00042),
  new DensityFactorData(0.880, 0.00042),
  new DensityFactorData(0.881, 0.00042),
  new DensityFactorData(0.882, 0.00042),
  new DensityFactorData(0.883, 0.00042),
  new DensityFactorData(0.884, 0.00042),
  new DensityFactorData(0.885, 0.00042),
  new DensityFactorData(0.886, 0.00042),
  new DensityFactorData(0.887, 0.00042),
  new DensityFactorData(0.888, 0.00042),
  new DensityFactorData(0.889, 0.00042),
  new DensityFactorData(0.890, 0.00042),
  new DensityFactorData(0.891, 0.00041),
  new DensityFactorData(0.892, 0.00041),
  new DensityFactorData(0.893, 0.00041),
  new DensityFactorData(0.894, 0.00041),
  new DensityFactorData(0.895, 0.00041),
  new DensityFactorData(0.896, 0.00041),
  new DensityFactorData(0.897, 0.00041),
  new DensityFactorData(0.898, 0.00041),
 new DensityFactorData(0.899, 0.00041),
  new DensityFactorData(0.900, 0.00041),
  new DensityFactorData(0.901, 0.00041),
  new DensityFactorData(0.902, 0.00041),
  new DensityFactorData(0.903, 0.00041),
  new DensityFactorData(0.904, 0.00041),
  new DensityFactorData(0.905, 0.00041),
  new DensityFactorData(0.906, 0.00041),
  new DensityFactorData(0.907, 0.00041),
  new DensityFactorData(0.908, 0.00040),
  new DensityFactorData(0.909, 0.00040),
  new DensityFactorData(0.910, 0.00040),
  new DensityFactorData(0.911, 0.00040),
  new DensityFactorData(0.912, 0.00040),
  new DensityFactorData(0.913, 0.00040),
  new DensityFactorData(0.914, 0.00040),
  new DensityFactorData(0.915, 0.00040),
  new DensityFactorData(0.916, 0.00040),
  new DensityFactorData(0.917, 0.00040),
  new DensityFactorData(0.918, 0.00040),
  new DensityFactorData(0.919, 0.00040),
  new DensityFactorData(0.920, 0.00040),
  new DensityFactorData(0.921, 0.00040),
  new DensityFactorData(0.922, 0.00040),
  new DensityFactorData(0.923, 0.00040),
  new DensityFactorData(0.924, 0.00040),
  new DensityFactorData(0.925, 0.00040),
  new DensityFactorData(0.926, 0.00040),
  new DensityFactorData(0.927, 0.00040),
  new DensityFactorData(0.928, 0.00040),
  new DensityFactorData(0.929, 0.00040),
  new DensityFactorData(0.930, 0.00040),
  new DensityFactorData(0.931, 0.00039),
  new DensityFactorData(0.932, 0.00039),
  new DensityFactorData(0.933, 0.00039),
  new DensityFactorData(0.934, 0.00039),
  new DensityFactorData(0.935, 0.00039),
  new DensityFactorData(0.936, 0.00039),
  new DensityFactorData(0.937, 0.00039),
  new DensityFactorData(0.938, 0.00039),
  new DensityFactorData(0.939, 0.00039),
  new DensityFactorData(0.940, 0.00039),
  new DensityFactorData(0.941, 0.00039),
  new DensityFactorData(0.942, 0.00039),
  new DensityFactorData(0.943, 0.00039),
   new DensityFactorData(0.944, 0.00039),
            new DensityFactorData(0.945, 0.00039),
            new DensityFactorData(0.946, 0.00039),
            new DensityFactorData(0.947, 0.00039),
            new DensityFactorData(0.948, 0.00039),
            new DensityFactorData(0.949, 0.00039),
            new DensityFactorData(0.950, 0.00039),
            new DensityFactorData(0.951, 0.00039),
            new DensityFactorData(0.952, 0.00038),
            new DensityFactorData(0.953, 0.00038),
            new DensityFactorData(0.954, 0.00038),
            new DensityFactorData(0.955, 0.00038),
            new DensityFactorData(0.956, 0.00038),
            new DensityFactorData(0.957, 0.00038),
            new DensityFactorData(0.958, 0.00038),
            new DensityFactorData(0.959, 0.00038),
            new DensityFactorData(0.960, 0.00038),
            new DensityFactorData(0.961, 0.00038),
            new DensityFactorData(0.962, 0.00038),
            new DensityFactorData(0.963, 0.00038),
            new DensityFactorData(0.964, 0.00038),
            new DensityFactorData(0.965, 0.00038),
            new DensityFactorData(0.966, 0.00038),
            new DensityFactorData(0.967, 0.00038),
            new DensityFactorData(0.968, 0.00038),
            new DensityFactorData(0.969, 0.00038),
            new DensityFactorData(0.970, 0.00038),
            new DensityFactorData(0.971, 0.00038),
            new DensityFactorData(0.972, 0.00038),
            new DensityFactorData(0.973, 0.00038),
            new DensityFactorData(0.974, 0.00038),
            new DensityFactorData(0.975, 0.00038),
            new DensityFactorData(0.976, 0.00038),
            new DensityFactorData(0.977, 0.00037),
            new DensityFactorData(0.978, 0.00037),
            new DensityFactorData(0.979, 0.00037),
            new DensityFactorData(0.980, 0.00037),
            new DensityFactorData(0.981, 0.00037),
            new DensityFactorData(0.982, 0.00037),
            new DensityFactorData(0.983, 0.00037),
            new DensityFactorData(0.984, 0.00037),
            new DensityFactorData(0.985, 0.00037),
            new DensityFactorData(0.986, 0.00037),
            new DensityFactorData(0.987, 0.00037),
            new DensityFactorData(0.988, 0.00037),
            new DensityFactorData(0.989, 0.00037),
            new DensityFactorData(0.990, 0.00037),
            new DensityFactorData(0.991, 0.00037),
            new DensityFactorData(0.992, 0.00037),
            new DensityFactorData(0.993, 0.00037),
            new DensityFactorData(0.994, 0.00037),
            new DensityFactorData(0.995, 0.00037),
            new DensityFactorData(0.996, 0.00037),
            new DensityFactorData(0.997, 0.00037),
            new DensityFactorData(0.998, 0.00037),
            new DensityFactorData(0.999, 0.00037),
            new DensityFactorData(1.000, 0.00037),



        };
        }
    }


}

