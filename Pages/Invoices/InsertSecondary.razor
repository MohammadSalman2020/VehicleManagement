@page "/insertSec"
@using Majorsoft.Blazor.Components.Tabs
@using System.Linq;
@using System.Text.Json
@using System.Web
@using System.Text
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Reflection
@using Microsoft.AspNetCore.SignalR
@using Microsoft.Data.SqlClient
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Login
@using VehicleManagement.Pages.Redirects;
@inject IWebHostEnvironment Environment
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IApiService API
@inject IJSRuntime JS
@inject AuthenticationStateProvider _authenticationStateProvider
  @inject IConfiguration _configuration
<style>
    body {
        font-family: Arial, sans-serif;
    }

    .container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        /*   padding: 10px; */
    }

    .title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .details, .shipping, .receiving {
        font-weight: bold;
        font-size: x-small;
        color: black;
        width: 100%;
        border-collapse: collapse;
    }

        .details td, .shipping td, .receiving td {
            border: 1px solid black;
            padding: 4px;
            text-align: center;
        }

        .details td {
            width: 25%;
        }

        .details .header, .shipping .header, .receiving .header {
            color: white;
            font-weight: bold;
            background-color: #5e72e4;
        }


    .header-span {
        display: block;
        font-size: 16px;
        font-weight: bold;
        color: white;
        background-color: #5e72e4;
        text-align: center;
        padding: 5px;
        border: 1px solid black;
    }

    .footer {
        font-weight: bold;
        text-align: center;
        background-color: #d9d9d9;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    .col-lgg-6 {
        width: 100%;
        max-width: 50%;
        box-sizing: border-box;
        padding: 10px;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .dropzone {
        max-width: 600px;
        height: 600px;
        border: 2px dashed #3498db;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
        border-radius: 10px;
        color: #3498db;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

        .dropzone p {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            margin: 0;
            pointer-events: none;
        }

        .dropzone.hovered {
            border-color: #2ecc71;
            background-color: #ecf0f1;
        }

    .file-input {
        display: none;
    }

    .preview {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

        .preview img {
            max-width: 100%;
            max-height: 100%;
            display: none;
            border-radius: 10px;
        }



    .text-size {
        font-size: x-small;
        text-align: center;
    }
</style>
<AuthorizeView>
    <Authorized>
        <Nav PageName="Add Secondary Invoice" />
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="card-body px-0 pt-0 pb-2">
                            <div class="row">

                                <div class="col-lgg-6">

                                    <div class="container">
                                        @*   @if (!isView)
                                        {
                                        <div class="col-md-12" style="margin-top: 7px;">
                                        <div class="row">


                                        <div class="col-md-12">
                                        <div class="form-group" style="text-align:center;">
                                        <button class="btn btn-warning btn-sm ms-auto">Add More Secondary</button>
                                        </div>
                                        </div>

                                        </div>
                                        </div>
                                        } *@

                                        @if (isView)
                                        {
                                            @if (Invoices.Count > 0)
                                            {

                                                @foreach (var item in Invoices)
                                                {
                                                    <table class="details">

                                                        <tr>
                                                            <td>Vehicle ID</td>
                                                            <td> <input type="text" tabindex="1" id="vehicleID" required placeholder="Vehicle ID" @bind="@item.VehicleNo" class="form-control"></td>
                                                            <td>Date</td>
                                                            <td><input type="date" tabindex="2" placeholder="Date" @bind="item.FillingDate" class="form-control"></td>
                                                        </tr>
                                                        <tr>
                                                            <td>Invoice Number</td>
                                                            <td>   <input type="text" tabindex="3" placeholder="STO No" @bind="item.StoNo" class="form-control"></td>
                                                            <td>Shipping Points</td>
                                                            <td>  <input type="text" tabindex="4" placeholder="Shipping Point" @bind="item.ShippingLocation" class="form-control"></td>
                                                        </tr>
                                                        <tr>
                                                            <td>User</td>
                                                            <td> @User</td>
                                                            <td>Receiving Points</td>
                                                            <td>   <input type="text" tabindex="5" placeholder="Receiving Location" @bind="item.RecievingLocation" class="form-control"></td>
                                                        </tr>
                                                        <tr>

                                                            <td>Contractor</td>
                                                            <td>  <input type="text" tabindex="7" placeholder="Contractor" value="Shakoor & Co." class="form-control"></td>

                                                            <td>Product </td>
                                                            <td>  <input type="text" tabindex="7" placeholder="Product" @bind="@item.Product" class="form-control"></td>
                                                        </tr>


                                                    </table>
                                                    <table class="shipping" style="margin-top:7px;">
                                                        <tr class="header">
                                                            <td colspan="6"> Loaded Chambers</td>

                                                        </tr>
                                                        <tr>
                                                            <td colspan="1">
                                                                <button class="btn-success" @onclick="@(()=>ShowModal(item.VehicleNo))">Add Loading Chambers</button>
                                                            </td>
                                                            <td colspan="1" style="cursor:pointer; color:blue;" @onclick="@(()=>ShowImages(item))">View Image</td>
                                                           
                                                        </tr>




                                                        @foreach (var item2 in item.Chambers)
                                                        {
                                                            <tr>
                                                                <td colspan="5">Chamber no: @item2.ChamberNo - @item2.ChamberQty (@item2.ChamberDip)</td>
                                                                @*   <td colspan="1" style="cursor:pointer;" @onclick="@(()=>ShowImages(item))">View Image</td> *@
                                                            </tr>
                                                        }



                                                    </table>


                                                }
                                            }
                                        }
                                        else
                                        {
                                            @if (generalDetailsList.Count>0)
                                            {
                                                @foreach (var item in generalDetailsList)
                                                {
                                                    <br />
                                                    <h4>Invoice # @item.STONO</h4>
                                                   
                                                    <table class="details">





                                                        <tr>
                                                            <td>Vehicle ID</td>
                                                            <td> <input type="text" tabindex="1" id="vehicleID" required placeholder="Vehicle ID" value="@item.VehicleNo" class="form-control"></td>
                                                            <td>Date</td>
                                                            <td><input type="date" tabindex="2" placeholder="Date" @bind="item.FillingDate" class="form-control"></td>
                                                        </tr>
                                                        <tr>
                                                            <td>Invoice Number</td>
                                                            <td>   <input type="text" tabindex="3" placeholder="STO No" @bind="item.STONO" class="form-control"></td>
                                                            <td>Shipping Points</td>
                                                            <td>  <input type="text" tabindex="4" placeholder="Shipping Point" @bind="item.ShippingLocation" class="form-control"></td>
                                                        </tr>
                                                        <tr>
                                                            <td>User</td>
                                                            <td> @User</td>
                                                            <td>Receiving Points</td>
                                                            <td>   <input type="text" tabindex="5" placeholder="Receiving Location" @bind="item.RecievingLocation" class="form-control"></td>
                                                        </tr>
                                                        <tr>

                                                            <td>Contractor</td>
                                                            <td>  <input type="text" tabindex="7" placeholder="Contractor" value="Shakoor & Co." class="form-control"></td>

                                                            <td>Primary Reference</td>
                                                            <td>  <input type="text" tabindex="7" placeholder="Primary Invoice No" @bind="@item.PrimaryInvoiceNumber" class="form-control"></td>
                                                        </tr>


                                                    </table>

                                                    <table class="shipping" style="margin-top:7px;">
                                                        <tr class="header">
                                                            <td colspan="6"> Loaded Chambers ( <a @onclick="@(()=>ShowImagesGeneral(item.FileLocation))" style="color:black;cursor:pointer;">View Image</a> )</td>

                                                        </tr>

                                                        @foreach (var item2 in item.ChamberDetails)
                                                        {
                                                            <tr>
                                                                <td colspan="4">
                                                                    Chamber No: @item2.ChamberNo - @item2.ChamberQuantity (@item2.ChamberDip)
                                                                </td>

                                                                <td colspan="1"> <input type="text" tabindex="4" placeholder="Quantity" class="form-control"></td>
                                                                <td colspan="1"> <input type="text" tabindex="4" placeholder="Dip" class="form-control"></td>
                                                            </tr>
                                                        }




                                                    </table>

                                                    <br />
                                                }
                                            }


                                        }




                                        <div class="col-md-12" style="margin-top: 7px;">
                                            <div class="row">


                                                <div class="col-md-12">
                                                    <div class="form-group" style="text-align:center;">
                                                        <button class="btn btn-danger btn-sm ms-auto" @onclick="Save">Save</button>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>




                                    </div>
                                </div>

                                <div class="col-lgg-6">
                                    <div class="table-responsive inv-img">

                                        <div id="dropzone" class="dropzone">
                                           @*  <p>Click to add Image</p> *@
@*                                             <InputFile type="file" id="fileInput" class="file-input" />
 *@                                            <div id="preview" class="preview"></div>
                                        </div>
                                    </div>
                                </div>


                            </div>



                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*Policy Modal *@
        <Modal @ref="PolicyModal" Title="Select Chambers">
            <Body>
                <div class="col-md-12">
                    <div class="card">

                        <div class="card-body">

                            <div class="row">
                                <div class="card-body px-0 pt-0 pb-2" style="overflow-x: auto;height: 140px;">
                                    <div class="table-responsive p-0">
                                        <table class="table align-items-center mb-0">
                                            @if (Vehicles.Count > 0)
                                            {
                                                <thead>
                                                    <tr>
@*                                                         <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7">Vehicle ID</th>
 *@                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Chamber No</th>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Quantity</th>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Dip</th>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center">Dip</th>
                                                        <th class="text-uppercase font-colors  text-xxs font-weight-bolder opacity-7 text-center"></th>

                                                    </tr>
                                                </thead>


                                                <tbody>
                                                    @foreach (var item in Vehicles)
                                                    {

                                                        <tr style="@(IsChamberAlreadyExisits(item)?"background: orangered;color: white;":"")">
                                         @*                    <td class="align-middle text-center">
                                                                <div class="d-flex px-2 py-1">

                                                                    <div class="d-flex flex-column justify-content-center">
                                                                        <h6 class="mb-0 text-sm">@item.VehicleID</h6>

                                                                    </div>
                                                                </div>
                                                            </td> *@
                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0  text-center">@item.ChamberNo</p>

                                                            </td>

                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0  text-center">@item.ChamberQty</p>

                                                            </td>

                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                <p class="text-xs font-weight-bold mb-0  text-center">@item.ChamberDip</p>

                                                            </td>

                                                            <td class="align-middle text-center" style="text-align:center;">
                                                                @if(IsChamberAlreadyExisits(item))
                                                                {
                                                                    <p class="text-xs font-weight-bold mb-0  text-center" style="cursor:pointer;color:black;" @onclick=@(()=>RemoveChamber(item))>Remove</p>

                                                                }
                                                                else
                                                                {
                                                                    <p class="text-xs font-weight-bold mb-0  text-center" style="cursor:pointer;color:blue;" @onclick=@(()=>SelectChamber(item))>Select</p>

                                                                }

                                                            </td>





                                                        </tr>

                                                    }
                                                </tbody>
                                            }
                                            else
                                            {

                                                <DataLoaderComponent IsLoading="@IsLoading" LoadingText="Loading Vehicle Data..." />


                                            }


                                        </table>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </Body>
        </Modal>

        @* End Policy Modal *@

        <Loader isLoading="@IsLoading" />
    </Authorized>
    <NotAuthorized>
        @if (_isJsReady)
        {
            <_403 />
        }
        else
        {
            <Loader isLoading="true" />
        }

    </NotAuthorized>
</AuthorizeView>

@code {
    private Modal PolicyModal;
    private bool _isJsReady = false;
    public List<VehicleDTO> VehicleList = new List<VehicleDTO>();
    private bool IsLoading = false;
    private bool isView = false;
    public List<OCRSecData> Invoices = new List<OCRSecData>();
    public List<VehiclesChamber> Vehicles = new List<VehiclesChamber>();
    public List<OCRSecDTO> generalDetailsList = new List<OCRSecDTO>();
    public string PrimaryReference;
    public string? User;


    public bool IsChamberAlreadyExisits(VehiclesChamber item)
    {
        if (Invoices[0].Chambers.Any(p => p.ChamberNo==item.ChamberNo))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void OpenPolicyModal()
    {
        PolicyModal.Show();
    }
    public void SelectChamber(VehiclesChamber obj)
    {
        if (Invoices.Count <= 0)
        {
            return;
        }
        // Check if a chamber with the same ChamberNo already exists
        var existingChamber = Invoices[0].Chambers.FirstOrDefault(c => c.ChamberNo == obj.ChamberNo);

        if (existingChamber == null)
        {
            // Only add the chamber if it doesn't already exist
            Invoices[0].Chambers.Add(new ChambersDetailsSec
                {
                    ChamberNo = obj.ChamberNo,
                    ChamberDip = obj.ChamberDip,
                    ChamberQty = obj.ChamberQty
                });
        }

    }
    public void RemoveChamber(VehiclesChamber obj)
    {
        if (Invoices.Count <= 0)
        {
            return;
        }
        // Check if a chamber with the same ChamberNo already exists
        var existingChamber = Invoices[0].Chambers.FirstOrDefault(c => c.ChamberNo == obj.ChamberNo);

        if (existingChamber != null)
        {
            Invoices[0].Chambers.Remove(existingChamber);
        }

    }
    public void ShowModal(string VehicleID)
    {
        if (VehicleID == null || VehicleID == string.Empty || VehicleID == "")
        {
            toastService.ShowInfo("Please enter VehicleID first");
            return;
        }

        Vehicles = GetVehicleChambers(VehicleID);
        PolicyModal.Show();
    }
    public async Task Save()
    {
        if (isView)
        {
            if (Invoices.Count > 0)
            {
                bool Update = UpdateExtractedData(Invoices[0]);
                if (Update)
                {
                    toastService.ShowSuccess("Update Invoice Success");
                    await JS.InvokeVoidAsync("closeCurrentTab");
                }
                else
                {
                    toastService.ShowError("Error While Updating");

                }
            }
        }
        else
        {

        }
    }

    protected override async void OnInitialized()
    {

        try
        {

            var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            User = authState.User.Identity.Name;
            // Retrieve the encoded JSON string from the query parameters if it exists
            string encodedJson = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;

            // Check if the "Edit=" query parameter exists
            if (encodedJson.Contains("Edit="))
            {
                // Extract the value of the "json" query parameter
                encodedJson = encodedJson.Split("Edit=")[1];

                // Decode the URL-safe Base64 string
                string base64EncodedJson = HttpUtility.UrlDecode(encodedJson);

                // Convert the Base64 string back to UTF-8 encoded bytes
                byte[] base64EncodedBytes = Convert.FromBase64String(base64EncodedJson);

                // Decode the UTF-8 bytes back to the original JSON string
                string jsonString = Encoding.UTF8.GetString(base64EncodedBytes);

                // Deserialize the JSON string back into the Invoices object
                generalDetailsList = JsonSerializer.Deserialize<List<OCRSecDTO>>(jsonString);
                StateHasChanged();
                //   Invoices = GetChamberData(PrimaryReference);

                if (generalDetailsList.Count > 0)
                {
                    if (!string.IsNullOrEmpty(generalDetailsList[0].FileLocation))
                    {
                        string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
                        string newLocation = generalDetailsList[0].FileLocation.Replace(@"C:\ScannedDocs\", urlPrefix);
                        await JS.InvokeVoidAsync("showImageFromPath", newLocation);
                    }
                }


                // Display the image if the path is already set

            }
            // Check if the "Edit=" query parameter exists
            if (encodedJson.Contains("View="))
            {
                isView = true;
                // Extract the value of the "Edit=" query parameter
                encodedJson = encodedJson.Split("View=")[1];
                int ExtID = int.Parse(encodedJson ?? "0");
                Invoices = GetSecInvoice(ExtID);

                if (Invoices.Count > 0)
                {
                    if (!string.IsNullOrEmpty(Invoices[0].FileLocation))
                    {
                        string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
                        string newLocation = Invoices[0].FileLocation.Replace(@"C:\ScannedDocs\", urlPrefix);
                        await JS.InvokeVoidAsync("showImageFromPath", newLocation);
                    }
                }


                // Display the image if the path is already set

            }



            StateHasChanged();



        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    public async Task ShowImagesGeneral(string File)
    {
        if (!string.IsNullOrEmpty(File))
        {
            string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
            string newLocation = File.Replace(@"C:\ScannedDocs\", urlPrefix);
            await JS.InvokeVoidAsync("showImageFromPath", newLocation);
        }
    }
    public async Task ShowImages(OCRSecData obj)
    {
        if (!string.IsNullOrEmpty(obj.FileLocation))
        {
            string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
            string newLocation = obj.FileLocation.Replace(@"C:\ScannedDocs\", urlPrefix);
            await JS.InvokeVoidAsync("showImageFromPath", newLocation);
        }
    }


    public List<OCRSecData> GetChamberData(string stono)
    {
        var chamberDataList = new List<OCRSecData>();

        string sqlQuery = @"
       WITH CumulativeSum AS (
    SELECT
        sc_invoice.ExtractedID,
        sc_invoice.STONO,
        sc_invoice.VehicleNo,
        sc_invoice.FillingDate,
        sc_invoice.FileLocation,
        sc_invoice.RecievingLocation,
        sc_invoice.ShippingLocation,
        sc_invoice.ProductName,
        COALESCE(chamber.Chamber1Quantity, chamber.Chamber2Quantity, chamber.Chamber3Quantity, chamber.Chamber4Quantity, chamber.Chamber5Quantity) AS ChamberQuantity,
        COALESCE(chamber.Chamber1Dip, chamber.Chamber2Dip, chamber.Chamber3Dip, chamber.Chamber4Dip, chamber.Chamber5Dip) AS ChamberDip,
        CASE
            WHEN chamber.Chamber1Quantity IS NOT NULL AND chamber.Chamber1Dip IS NOT NULL THEN 1
            WHEN chamber.Chamber2Quantity IS NOT NULL AND chamber.Chamber2Dip IS NOT NULL THEN 2
            WHEN chamber.Chamber3Quantity IS NOT NULL AND chamber.Chamber3Dip IS NOT NULL THEN 3
            WHEN chamber.Chamber4Quantity IS NOT NULL AND chamber.Chamber4Dip IS NOT NULL THEN 4
            WHEN chamber.Chamber5Quantity IS NOT NULL AND chamber.Chamber5Dip IS NOT NULL THEN 5
        END AS ChamberNo,
        COALESCE(chamber.Chamber1Quantity, 0) + COALESCE(chamber.Chamber2Quantity, 0) +
        COALESCE(chamber.Chamber3Quantity, 0) + COALESCE(chamber.Chamber4Quantity, 0) +
        COALESCE(chamber.Chamber5Quantity, 0) AS ChamberQuantityTotal,
        SUM(COALESCE(chamber.Chamber1Quantity, 0) + COALESCE(chamber.Chamber2Quantity, 0) +
            COALESCE(chamber.Chamber3Quantity, 0) + COALESCE(chamber.Chamber4Quantity, 0) +
            COALESCE(chamber.Chamber5Quantity, 0)) OVER (PARTITION BY sc_invoice.ExtractedID ORDER BY sc_invoice.FillingDate) AS CumulativeChamberQuantity,
        -- Calculate the total quantity from the tblvehicles for the corresponding VehicleNo
        (COALESCE(v.Chamber1Qty, 0) + COALESCE(v.Chamber2Qty, 0) + COALESCE(v.Chamber3Qty, 0) +
         COALESCE(v.Chamber4Qty, 0) + COALESCE(v.Chamber5Qty, 0)) AS TotalVehicleChamberQuantity
    FROM tblextracted_data sc_invoice
    LEFT JOIN tblextracted_chambers chamber ON sc_invoice.ExtractedID = chamber.ExtractedID
    LEFT JOIN tblextracted_data pk_invoice ON pk_invoice.VehicleNo = sc_invoice.VehicleNo
        AND pk_invoice.InvoiceType = 'pk'
        AND pk_invoice.STONO = @STONO -- Replace with your provided primary STONO
    LEFT JOIN tblvehicles v ON v.VehicleID = pk_invoice.VehicleNo -- Join to get vehicle details
    WHERE sc_invoice.InvoiceType = 'sc'
      AND sc_invoice.FillingDate >= pk_invoice.FillingDate
      AND sc_invoice.FillingDate <= DATEADD(DAY, 5, pk_invoice.FillingDate) -- Include records within 5 days
      AND sc_invoice.VehicleNo = pk_invoice.VehicleNo
      AND sc_invoice.ProductName = pk_invoice.ProductName -- Check if the products are the same
),
FilteredCumulative AS (
    SELECT *,
           SUM(ChamberQuantityTotal) OVER (ORDER BY FillingDate, ChamberNo) AS RunningTotal
    FROM CumulativeSum
)

SELECT ExtractedID, STONO, VehicleNo, FillingDate, ChamberQuantity, ChamberDip, ChamberNo, FileLocation, ProductName, RecievingLocation,
       ShippingLocation, CumulativeChamberQuantity, TotalVehicleChamberQuantity
FROM FilteredCumulative
WHERE RunningTotal <= TotalVehicleChamberQuantity
ORDER BY FillingDate, ChamberNo;";

        using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            using (SqlCommand command = new SqlCommand(sqlQuery, connection))
            {
                command.Parameters.AddWithValue("@STONO", stono);

                connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var chamberData = new OCRSecData
                            {
                                ExtractedID = reader.GetInt32(0),
                                StoNo = reader.GetString(1),
                                VehicleNo = reader.GetString(2),
                                FillingDate = reader.GetDateTime(3),
                                FileLocation = reader.GetString(7),
                                Product = reader.GetString(8),
                                RecievingLocation = reader.GetString(9),
                                ShippingLocation = reader.GetString(10),
                                ChamberQty = reader.GetInt32(4),
                                ChamberDip = reader.GetInt32(5),
                                ChamberNo = reader.GetInt32(6),
                                isView = false,
                            };


                        chamberDataList.Add(chamberData);
                    }
                }
            }
        }

        return chamberDataList;
    }

    public List<OCRSecData> GetSecInvoice(int stono)
    {
        var invoiceDataList = new List<OCRSecData>();

        // First query for main invoice data
        string sqlQuery1 = @"
        SELECT
            a.ExtractedID,
            a.STONO,
            a.RecievingLocation,
            a.ShippingLocation,
            a.VehicleNo,
            a.BusinessID,
            a.InvoiceType,
            a.FillingDate,
            a.ProductName,
            a.FileLocation,
            a.IsInvoiceGenerated
        FROM tblExtracted_Data a
        WHERE a.ExtractedID = @STONO";

        // Second query for chamber details
        string sqlQuery2 = @"
        SELECT
            b.Chamber1Quantity AS Quantity,
            b.Chamber1Dip AS Dip,
            1 AS ChamberNo
        FROM tblExtracted_Data a
        LEFT JOIN tblExtracted_Chambers b
            ON a.ExtractedID = b.ExtractedID
        WHERE a.ExtractedID = @STONO
            AND b.Chamber1Quantity IS NOT NULL
            AND b.Chamber1Dip IS NOT NULL

        UNION ALL

        SELECT
            b.Chamber2Quantity AS Quantity,
            b.Chamber2Dip AS Dip,
            2 AS ChamberNo
        FROM tblExtracted_Data a
        LEFT JOIN tblExtracted_Chambers b
            ON a.ExtractedID = b.ExtractedID
        WHERE a.ExtractedID = @STONO
            AND b.Chamber2Quantity IS NOT NULL
            AND b.Chamber2Dip IS NOT NULL

        UNION ALL

        SELECT
            b.Chamber3Quantity AS Quantity,
            b.Chamber3Dip AS Dip,
            3 AS ChamberNo
        FROM tblExtracted_Data a
        LEFT JOIN tblExtracted_Chambers b
            ON a.ExtractedID = b.ExtractedID
        WHERE a.ExtractedID = @STONO
            AND b.Chamber3Quantity IS NOT NULL
            AND b.Chamber3Dip IS NOT NULL

        UNION ALL

        SELECT
            b.Chamber4Quantity AS Quantity,
            b.Chamber4Dip AS Dip,
            4 AS ChamberNo
        FROM tblExtracted_Data a
        LEFT JOIN tblExtracted_Chambers b
            ON a.ExtractedID = b.ExtractedID
        WHERE a.ExtractedID = @STONO
            AND b.Chamber4Quantity IS NOT NULL
            AND b.Chamber4Dip IS NOT NULL

        UNION ALL

        SELECT
            b.Chamber5Quantity AS Quantity,
            b.Chamber5Dip AS Dip,
            5 AS ChamberNo
        FROM tblExtracted_Data a
        LEFT JOIN tblExtracted_Chambers b
            ON a.ExtractedID = b.ExtractedID
        WHERE a.ExtractedID = @STONO
            AND b.Chamber5Quantity IS NOT NULL
            AND b.Chamber5Dip IS NOT NULL;";

        using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            // Execute the first query for main invoice data
            using (SqlCommand command1 = new SqlCommand(sqlQuery1, connection))
            {
                command1.Parameters.AddWithValue("@STONO", stono);
                connection.Open();

                using (SqlDataReader reader = command1.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        var invoiceData = new OCRSecData
                            {
                                ExtractedID = reader.GetInt32(0),
                                StoNo = reader.GetString(1) ?? "",
                                RecievingLocation = reader.GetString(2) ?? "",
                                ShippingLocation = reader.GetString(3) ?? "",
                                VehicleNo = reader.GetString(4) ?? "",
                                FillingDate = reader.IsDBNull(7) ? DateTime.MinValue : reader.GetDateTime(7),
                                Product=reader.GetString(8)??"",
                                FileLocation = reader.GetString(9) ?? "",
                                isView = true
                            };
                        invoiceDataList.Add(invoiceData);
                    }
                }
            }

            // Execute the second query for chamber details
            using (SqlCommand command2 = new SqlCommand(sqlQuery2, connection))
            {
                command2.Parameters.AddWithValue("@STONO", stono);

                foreach (var invoiceData in invoiceDataList)
                {
                    using (SqlDataReader reader = command2.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var chamberDetails = new ChambersDetailsSec
                                {
                                    ChamberQty = reader.GetInt32(0),
                                    ChamberDip = reader.GetInt32(1),
                                    ChamberNo = reader.GetInt32(2)
                                };

                            // Add the chamber details to the list inside the invoice data
                            invoiceData.Chambers.Add(chamberDetails);
                        }
                    }
                }
            }
        }

        return invoiceDataList;
    }


    public List<VehiclesChamber> GetVehicleChambers(string Vehicle)
    {

        Vehicles = new List<VehiclesChamber>();
        // First query for main invoice data
        string sqlQuery1 = @"SELECT
    VehicleID,
    1 AS ChamberNo,
    Chamber1Qty AS ChamberQty,
    Chamber1Dip AS ChamberDip
FROM
    tblvehicles
WHERE
    VehicleID = @VehicleID

UNION ALL

SELECT
    VehicleID,
    2 AS ChamberNo,
    Chamber2Qty AS ChamberQty,
    Chamber2Dip AS ChamberDip
FROM
    tblvehicles
WHERE
    VehicleID = @VehicleID

UNION ALL

SELECT
    VehicleID,
    3 AS ChamberNo,
    Chamber3Qty AS ChamberQty,
    Chamber3Dip AS ChamberDip
FROM
    tblvehicles
WHERE
    VehicleID = @VehicleID

UNION ALL

SELECT
    VehicleID,
    4 AS ChamberNo,
    Chamber4Qty AS ChamberQty,
    Chamber4Dip AS ChamberDip
FROM
    tblvehicles
WHERE
    VehicleID = @VehicleID

UNION ALL

SELECT
    VehicleID,
    5 AS ChamberNo,
    Chamber5Qty AS ChamberQty,
    Chamber5Dip AS ChamberDip
FROM
    tblvehicles
WHERE
    VehicleID = @VehicleID;
";



        using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            // Execute the first query for main invoice data
            using (SqlCommand command1 = new SqlCommand(sqlQuery1, connection))
            {
                command1.Parameters.AddWithValue("@VehicleID", Vehicle);
                connection.Open();

                using (SqlDataReader reader = command1.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var invoiceData = new VehiclesChamber
                            {
                                ChamberDip = reader.GetInt32(3),
                                ChamberNo = reader.GetInt32(1),
                                ChamberQty = reader.GetInt32(2),
                                VehicleID = reader.GetString(0),

                            };
                        Vehicles.Add(invoiceData);
                    }
                }
            }
        }

        return Vehicles;
    }


    public bool UpdateExtractedData(OCRSecData invoiceData)
    {
        try
        {
            // SQL update query for tblExtracted_Data
            string sqlUpdateQuery = @"
        UPDATE tblExtracted_Data
        SET
            STONO = @STONO,
            RecievingLocation = @RecievingLocation,
            ShippingLocation = @ShippingLocation,
            VehicleNo = @VehicleNo,
            FillingDate = @FillingDate,
IsInvoiceGenerated='True',
ProductName=@ProductName
        WHERE ExtractedID = @ExtractedID";

            using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
            {
                connection.Open();

                // Update tblExtracted_Data
                using (SqlCommand command = new SqlCommand(sqlUpdateQuery, connection))
                {
                    command.Parameters.AddWithValue("@STONO", invoiceData.StoNo);
                    command.Parameters.AddWithValue("@RecievingLocation", invoiceData.RecievingLocation);
                    command.Parameters.AddWithValue("@ShippingLocation", invoiceData.ShippingLocation);
                    command.Parameters.AddWithValue("@VehicleNo", invoiceData.VehicleNo);
                    command.Parameters.AddWithValue("@FillingDate", invoiceData.FillingDate);
                    command.Parameters.AddWithValue("@ExtractedID", invoiceData.ExtractedID);
                    command.Parameters.AddWithValue("@ProductName", invoiceData.Product);

                    int rowsAffected = command.ExecuteNonQuery();
                    if (rowsAffected <= 0)
                    {
                        return false; // No rows updated in tblExtracted_Data
                    }
                }

                // First, delete existing rows in tblExtracted_Chambers for the given ExtractedID and VehicleNo
                string sqlDeleteChambersQuery = "DELETE FROM tblExtracted_Chambers WHERE ExtractedID = @ExtractedID";
                using (SqlCommand deleteCommand = new SqlCommand(sqlDeleteChambersQuery, connection))
                {
                    deleteCommand.Parameters.AddWithValue("@ExtractedID", invoiceData.ExtractedID);
                    deleteCommand.Parameters.AddWithValue("@VehicleNo", invoiceData.VehicleNo);
                    deleteCommand.ExecuteNonQuery();
                }

                // Now, insert new records for each chamber in the list
                foreach (var chamber in invoiceData.Chambers)
                {
                    string sqlInsertChambersQuery = @"
                INSERT INTO tblExtracted_Chambers (
                    ExtractedID,
                    Chamber1Quantity, Chamber1Dip,
                    Chamber2Quantity, Chamber2Dip,
                    Chamber3Quantity, Chamber3Dip,
                    Chamber4Quantity, Chamber4Dip,
                    Chamber5Quantity, Chamber5Dip,
                    VehicleNo)
                VALUES (
                    @ExtractedID,
                    CASE WHEN @ChamberNo = 1 THEN @ChamberQty ELSE NULL END,
                    CASE WHEN @ChamberNo = 1 THEN @ChamberDip ELSE NULL END,
                    CASE WHEN @ChamberNo = 2 THEN @ChamberQty ELSE NULL END,
                    CASE WHEN @ChamberNo = 2 THEN @ChamberDip ELSE NULL END,
                    CASE WHEN @ChamberNo = 3 THEN @ChamberQty ELSE NULL END,
                    CASE WHEN @ChamberNo = 3 THEN @ChamberDip ELSE NULL END,
                    CASE WHEN @ChamberNo = 4 THEN @ChamberQty ELSE NULL END,
                    CASE WHEN @ChamberNo = 4 THEN @ChamberDip ELSE NULL END,
                    CASE WHEN @ChamberNo = 5 THEN @ChamberQty ELSE NULL END,
                    CASE WHEN @ChamberNo = 5 THEN @ChamberDip ELSE NULL END,
                    @VehicleNo)";

                    using (SqlCommand insertCommand = new SqlCommand(sqlInsertChambersQuery, connection))
                    {
                        insertCommand.Parameters.AddWithValue("@ExtractedID", invoiceData.ExtractedID);
                        insertCommand.Parameters.AddWithValue("@ChamberNo", chamber.ChamberNo); // Use the ChamberNo value to determine which chamber to insert
                        insertCommand.Parameters.AddWithValue("@ChamberQty", chamber.ChamberQty);
                        insertCommand.Parameters.AddWithValue("@ChamberDip", chamber.ChamberDip);
                        insertCommand.Parameters.AddWithValue("@VehicleNo", invoiceData.VehicleNo);

                        insertCommand.ExecuteNonQuery();
                    }
                }
            }

            return true; // Update and insert successful
        }
        catch (Exception ex)
        {
            // Handle or log the exception as necessary
            return false;
        }
    }
    public List<OCRSecDTO> GetInvoicesWithChamberDetails(string STONo)
    {
        generalDetailsList = new List<OCRSecDTO>();
        Dictionary<int, OCRSecDTO> generalDetailsMap = new Dictionary<int, OCRSecDTO>();

        using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            connection.Open();

            // Query 1: General Details
            string generalQuery = $@"
             WITH CumulativeSum AS (
    SELECT
        sc_invoice.ExtractedID,
        sc_invoice.STONO,
        sc_invoice.VehicleNo,
        sc_invoice.FillingDate,
        sc_invoice.FileLocation,
        sc_invoice.RecievingLocation,
        sc_invoice.ShippingLocation,
        sc_invoice.ProductName,
        COALESCE(chamber.Chamber1Quantity, chamber.Chamber2Quantity, chamber.Chamber3Quantity, chamber.Chamber4Quantity, chamber.Chamber5Quantity) AS ChamberQuantity,
        COALESCE(chamber.Chamber1Dip, chamber.Chamber2Dip, chamber.Chamber3Dip, chamber.Chamber4Dip, chamber.Chamber5Dip) AS ChamberDip,
        CASE
            WHEN chamber.Chamber1Quantity IS NOT NULL AND chamber.Chamber1Dip IS NOT NULL THEN 1
            WHEN chamber.Chamber2Quantity IS NOT NULL AND chamber.Chamber2Dip IS NOT NULL THEN 2
            WHEN chamber.Chamber3Quantity IS NOT NULL AND chamber.Chamber3Dip IS NOT NULL THEN 3
            WHEN chamber.Chamber4Quantity IS NOT NULL AND chamber.Chamber4Dip IS NOT NULL THEN 4
            WHEN chamber.Chamber5Quantity IS NOT NULL AND chamber.Chamber5Dip IS NOT NULL THEN 5
        END AS ChamberNo,
        COALESCE(chamber.Chamber1Quantity, 0) + COALESCE(chamber.Chamber2Quantity, 0) +
        COALESCE(chamber.Chamber3Quantity, 0) + COALESCE(chamber.Chamber4Quantity, 0) +
        COALESCE(chamber.Chamber5Quantity, 0) AS ChamberQuantityTotal,
        SUM(COALESCE(chamber.Chamber1Quantity, 0) + COALESCE(chamber.Chamber2Quantity, 0) +
            COALESCE(chamber.Chamber3Quantity, 0) + COALESCE(chamber.Chamber4Quantity, 0) +
            COALESCE(chamber.Chamber5Quantity, 0)) OVER (PARTITION BY sc_invoice.ExtractedID ORDER BY sc_invoice.FillingDate) AS CumulativeChamberQuantity,
        -- Calculate the total quantity from the tblvehicles for the corresponding VehicleNo
        (COALESCE(v.Chamber1Qty, 0) + COALESCE(v.Chamber2Qty, 0) + COALESCE(v.Chamber3Qty, 0) +
         COALESCE(v.Chamber4Qty, 0) + COALESCE(v.Chamber5Qty, 0)) AS TotalVehicleChamberQuantity
    FROM tblextracted_data sc_invoice
    LEFT JOIN tblextracted_chambers chamber ON sc_invoice.ExtractedID = chamber.ExtractedID
    LEFT JOIN tblextracted_data pk_invoice ON pk_invoice.VehicleNo = sc_invoice.VehicleNo
        AND pk_invoice.InvoiceType = 'pk'
        AND pk_invoice.STONO = '{STONo}' -- Use parameter for STONO
    LEFT JOIN tblvehicles v ON v.VehicleID = pk_invoice.VehicleNo -- Join to get vehicle details
    WHERE sc_invoice.InvoiceType = 'sc'
      AND sc_invoice.FillingDate >= pk_invoice.FillingDate
      AND sc_invoice.FillingDate <= DATEADD(DAY, 5, pk_invoice.FillingDate) -- Include records within 5 days
      AND sc_invoice.VehicleNo = pk_invoice.VehicleNo
      AND sc_invoice.ProductName = pk_invoice.ProductName -- Check if the products are the same
),
FilteredCumulative AS (
    SELECT DISTINCT
        ExtractedID, STONO, VehicleNo, FillingDate, FileLocation, ProductName, RecievingLocation, ShippingLocation
    FROM CumulativeSum
)

SELECT * FROM FilteredCumulative
ORDER BY FillingDate;";

            // Query 2: Chamber Details
            string chamberQuery = $@"WITH CumulativeSum AS (
    SELECT
        sc_invoice.ExtractedID,
        sc_invoice.STONO,
        sc_invoice.VehicleNo,
        sc_invoice.FillingDate,
        COALESCE(chamber.Chamber1Quantity, chamber.Chamber2Quantity, chamber.Chamber3Quantity, chamber.Chamber4Quantity, chamber.Chamber5Quantity) AS ChamberQuantity,
        COALESCE(chamber.Chamber1Dip, chamber.Chamber2Dip, chamber.Chamber3Dip, chamber.Chamber4Dip, chamber.Chamber5Dip) AS ChamberDip,
        CASE
            WHEN chamber.Chamber1Quantity IS NOT NULL AND chamber.Chamber1Dip IS NOT NULL THEN 1
            WHEN chamber.Chamber2Quantity IS NOT NULL AND chamber.Chamber2Dip IS NOT NULL THEN 2
            WHEN chamber.Chamber3Quantity IS NOT NULL AND chamber.Chamber3Dip IS NOT NULL THEN 3
            WHEN chamber.Chamber4Quantity IS NOT NULL AND chamber.Chamber4Dip IS NOT NULL THEN 4
            WHEN chamber.Chamber5Quantity IS NOT NULL AND chamber.Chamber5Dip IS NOT NULL THEN 5
        END AS ChamberNo,
        COALESCE(chamber.Chamber1Quantity, 0) + COALESCE(chamber.Chamber2Quantity, 0) +
        COALESCE(chamber.Chamber3Quantity, 0) + COALESCE(chamber.Chamber4Quantity, 0) +
        COALESCE(chamber.Chamber5Quantity, 0) AS ChamberQuantityTotal,
        SUM(COALESCE(chamber.Chamber1Quantity, 0) + COALESCE(chamber.Chamber2Quantity, 0) +
            COALESCE(chamber.Chamber3Quantity, 0) + COALESCE(chamber.Chamber4Quantity, 0) +
            COALESCE(chamber.Chamber5Quantity, 0)) OVER (PARTITION BY sc_invoice.ExtractedID ORDER BY sc_invoice.FillingDate) AS CumulativeChamberQuantity,
        -- Calculate the total quantity from the tblvehicles for the corresponding VehicleNo
        (COALESCE(v.Chamber1Qty, 0) + COALESCE(v.Chamber2Qty, 0) + COALESCE(v.Chamber3Qty, 0) +
         COALESCE(v.Chamber4Qty, 0) + COALESCE(v.Chamber5Qty, 0)) AS TotalVehicleChamberQuantity
    FROM tblextracted_data sc_invoice
    LEFT JOIN tblextracted_chambers chamber ON sc_invoice.ExtractedID = chamber.ExtractedID
    LEFT JOIN tblextracted_data pk_invoice ON pk_invoice.VehicleNo = sc_invoice.VehicleNo
        AND pk_invoice.InvoiceType = 'pk'
        AND pk_invoice.STONO = '{STONo}' -- Use correct parameter for STONO
    LEFT JOIN tblvehicles v ON v.VehicleID = pk_invoice.VehicleNo -- Join to get vehicle details
    WHERE sc_invoice.InvoiceType = 'sc'
      AND sc_invoice.FillingDate >= pk_invoice.FillingDate
      AND sc_invoice.FillingDate <= DATEADD(DAY, 5, pk_invoice.FillingDate) -- Include records within 5 days
      AND sc_invoice.VehicleNo = pk_invoice.VehicleNo
      AND sc_invoice.ProductName = pk_invoice.ProductName -- Check if the products are the same
),
InvoiceDetails AS (
    SELECT
        inv.InvoiceID,
        invDetails.Chamber,
        invDetails.ChamberQuantity AS InvoiceChamberQuantity,
        invDetails.LorryDip AS InvoiceLorryDip
    FROM tblInvoices inv
    JOIN tblInvoiceDetails invDetails ON inv.InvoiceID = invDetails.InvoiceID
    WHERE inv.STONo = '{STONo}' -- Use correct STONO
      AND invDetails.PointType = 'R'
)
SELECT
    C.ExtractedID,
    C.STONO,
    C.ChamberQuantity,
    C.ChamberDip,
    C.ChamberNo,
    C.CumulativeChamberQuantity,
    C.TotalVehicleChamberQuantity,
    ID.InvoiceChamberQuantity, -- ChamberQuantity from tblInvoiceDetails
    ID.InvoiceLorryDip -- LorryDip from tblInvoiceDetails
FROM CumulativeSum C
LEFT JOIN InvoiceDetails ID ON C.ChamberNo = ID.Chamber
ORDER BY C.FillingDate, C.ChamberNo;";

            // Execute the first query to get general details
            using (SqlCommand command = new SqlCommand(generalQuery, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var generalDetails = new OCRSecDTO
                            {
                                ExtractedID = reader.GetInt32(0),
                                STONO = reader.GetString(1),
                                VehicleNo = reader.GetString(2),
                                FillingDate = reader.GetDateTime(3),
                                FileLocation = reader.GetString(4),
                                ProductName = reader.GetString(5),
                                RecievingLocation = reader.GetString(6),
                                ShippingLocation = reader.GetString(7),
                                ChamberDetails = new List<ChamberDetailsDTO>()
                            };

                        generalDetailsList.Add(generalDetails);
                        generalDetailsMap[generalDetails.ExtractedID] = generalDetails; // Add to the map for later use
                    }
                }
            }

            // Execute the second query to get chamber details
            using (SqlCommand command = new SqlCommand(chamberQuery, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var chamberDetails = new ChamberDetailsDTO
                            {
                                ExtractedID = reader.GetInt32(0),
                                STONO = reader.GetString(1),
                                ChamberQuantity = reader.GetInt32(2),
                                ChamberDip = reader.GetInt32(3),
                                ChamberNo = reader.GetInt32(4),
                                CumulativeChamberQuantity = reader.GetInt32(5),
                                TotalVehicleChamberQuantity = reader.GetInt32(6),
                                InvoiceChamberQuantity = reader.GetInt32(7),
                                InvoiceLorryDip = reader.GetInt32(8)
                            };

                        // Find the matching general details using ExtractedID
                        if (generalDetailsMap.TryGetValue(chamberDetails.ExtractedID, out OCRSecDTO generalDetails))
                        {
                            generalDetails.ChamberDetails.Add(chamberDetails);
                        }
                    }
                }
            }
        }

        return generalDetailsList;
    }

}