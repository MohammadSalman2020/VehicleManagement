@page "/insertSec"
@using Majorsoft.Blazor.Components.Tabs
@using System.Linq;
@using System.Text.Json
@using System.Web
@using System.Text
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Reflection
@using Microsoft.Data.SqlClient
@using VehicleManagement.ApiService
@using VehicleManagement.Models.General
@using VehicleManagement.Models.General.Login
@using VehicleManagement.Pages.Redirects;
@inject IWebHostEnvironment Environment
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IApiService API
@inject IJSRuntime JS
@inject AuthenticationStateProvider _authenticationStateProvider
  @inject IConfiguration _configuration
<style>
    body {
        font-family: Arial, sans-serif;
    }

    .container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        /*   padding: 10px; */
    }

    .title {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .details, .shipping, .receiving {
        font-weight: bold;
        font-size: x-small;
        color: black;
        width: 100%;
        border-collapse: collapse;
    }

        .details td, .shipping td, .receiving td {
            border: 1px solid black;
            padding: 4px;
            text-align: center;
        }

        .details td {
            width: 25%;
        }

        .details .header, .shipping .header, .receiving .header {
            color: white;
            font-weight: bold;
            background-color: #5e72e4;
        }


    .header-span {
        display: block;
        font-size: 16px;
        font-weight: bold;
        color: white;
        background-color: #5e72e4;
        text-align: center;
        padding: 5px;
        border: 1px solid black;
    }

    .footer {
        font-weight: bold;
        text-align: center;
        background-color: #d9d9d9;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    .col-lgg-6 {
        width: 100%;
        max-width: 50%;
        box-sizing: border-box;
        padding: 10px;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .dropzone {
        max-width: 600px;
        height: 600px;
        border: 2px dashed #3498db;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 20px;
        border-radius: 10px;
        color: #3498db;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

        .dropzone p {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            margin: 0;
            pointer-events: none;
        }

        .dropzone.hovered {
            border-color: #2ecc71;
            background-color: #ecf0f1;
        }

    .file-input {
        display: none;
    }

    .preview {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }

        .preview img {
            max-width: 100%;
            max-height: 100%;
            display: none;
            border-radius: 10px;
        }



    .text-size {
        font-size: x-small;
        text-align: center;
    }
</style>
<AuthorizeView>
    <Authorized>
        <Nav PageName="Add Secondary Invoice" />
        <div class="container-fluid">
            <div class="row">
                <div class="col-12">
                    <div class="card mb-4">
                        <div class="card-body px-0 pt-0 pb-2">
                            <div class="row">

                                <div class="col-lgg-6">

                                    <div class="container">
                                        <div class="col-md-12" style="margin-top: 7px;">
                                            <div class="row">


                                                <div class="col-md-12">
                                                    <div class="form-group" style="text-align:center;">
                                                        <button class="btn btn-warning btn-sm ms-auto">Add More Secondary</button>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                        @if (Invoices.Count>0)
                                        {
                                            @foreach (var item in Invoices)
                                            {
                                                <br />
                                                <h3>Chamber: @item.ChamberNo</h3>
                                                <br />
                                                <table class="details">





                                                    <tr>
                                                        <td>Vehicle ID</td>
                                                        <td> <input type="text" tabindex="1" id="vehicleID" required placeholder="Vehicle ID" value="@item.VehicleNo" class="form-control"></td>
                                                        <td>Date</td>
                                                        <td><input type="date" tabindex="2" placeholder="Date" @bind="item.FillingDate" class="form-control"></td>
                                                    </tr>
                                                    <tr>
                                                        <td>Invoice Number</td>
                                                        <td>   <input type="text" tabindex="3" placeholder="STO No" @bind="item.StoNo" class="form-control"></td>
                                                        <td>Shipping Points</td>
                                                        <td>  <input type="text" tabindex="4" placeholder="Shipping Point" @bind="item.ShippingLocation" class="form-control"></td>
                                                    </tr>
                                                    <tr>
                                                        <td>User</td>
                                                        <td> @item.User</td>
                                                        <td>Receiving Points</td>
                                                        <td>   <input type="text" tabindex="5" placeholder="Receiving Location" @bind="item.RecievingLocation" class="form-control"></td>
                                                    </tr>
                                                    <tr>

                                                        <td>Contractor</td>
                                                        <td>  <input type="text" tabindex="7" placeholder="Contractor" value="Shakoor & Co." class="form-control"></td>

                                                        <td>Primary Reference</td>
                                                        <td>  <input type="text" tabindex="7" placeholder="Primary Invoice No" @bind="@PrimaryReference" class="form-control"></td>
                                                    </tr>


                                                </table>

                                                <table class="shipping" style="margin-top:7px;">
                                                    <tr class="header">
                                                        <td colspan="6"> Loaded Chambers</td>

                                                    </tr>

                                                    <tr>

                                                        <td colspan="1">  <input type="checkbox" id="STemp"></td>
                                                        <td colspan="4">@item.ChamberQty (@item.ChamberDip)</td>
                                                        <td colspan="1" style="cursor:pointer;" @onclick="@(()=>ShowImages(item))">View Image</td>
                                                    </tr>


                                                </table>
                                            }
                                        }


                                        <div class="col-md-12" style="margin-top: 7px;">
                                            <div class="row">


                                                <div class="col-md-12">
                                                    <div class="form-group" style="text-align:center;">
                                                        <button class="btn btn-danger btn-sm ms-auto">Save</button>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>




                                    </div>
                                </div>

                                <div class="col-lgg-6">
                                    <div class="table-responsive inv-img">

                                        <div id="dropzone" class="dropzone">
                                            <p>Click to add Image</p>
                                            <InputFile type="file" id="fileInput" class="file-input" />
                                            <div id="preview" class="preview"></div>
                                        </div>
                                    </div>
                                </div>


                            </div>



                        </div>
                    </div>
                </div>
            </div>
        </div>


        <Loader isLoading="@IsLoading" />
    </Authorized>
    <NotAuthorized>
        @if (_isJsReady)
        {
            <_403 />
        }
        else
        {
            <Loader isLoading="true" />
        }

    </NotAuthorized>
</AuthorizeView>

@code {
    private bool _isJsReady = false;
    public List<VehicleDTO> VehicleList = new List<VehicleDTO>();
    public List<string> Vehicle = new List<string>();
    private bool IsLoading = false;
    public List<OCRSecData> Invoices = new List<OCRSecData>();
    public string PrimaryReference;
    public async Task GetAllVehicleID()
    {

        try
        {

            var Vehicles = await API.GetRequest($"Vehicle/GetAllVehicleID");
            if (Vehicles != "")
            {

                Vehicle = JsonSerializer.Deserialize<List<string>>(Vehicles);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    protected override async void OnInitialized()
    {

        try
        {

            await GetAllVehicleID();

            // Retrieve the encoded JSON string from the query parameters if it exists
            string encodedJson = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;

            // Check if the "Edit=" query parameter exists
            if (encodedJson.Contains("Edit="))
            {
                // Extract the value of the "Edit=" query parameter
                encodedJson = encodedJson.Split("Edit=")[1];
                PrimaryReference = encodedJson;
                Invoices= GetChamberData(PrimaryReference);
                StateHasChanged();
                if (Invoices.Count>0)
                {
                    if (!string.IsNullOrEmpty(Invoices[0].FileLocation))
                    {
                        string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
                        string newLocation = Invoices[0].FileLocation.Replace(@"C:\ScannedDocs\", urlPrefix);
                        await JS.InvokeVoidAsync("showImageFromPath", newLocation);
                    }
                }
                // Display the image if the path is already set

            }



            // var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
            // Invoices.User = authState.User.Identity.Name;
            // StateHasChanged();



        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    public async Task ShowImages(OCRSecData obj)
    {
        if (!string.IsNullOrEmpty(obj.FileLocation))
        {
            string urlPrefix = "https://191.96.196.61/";      // URL to replace the local path
            string newLocation = obj.FileLocation.Replace(@"C:\ScannedDocs\", urlPrefix);
            await JS.InvokeVoidAsync("showImageFromPath", newLocation);
        }
    }


    public List<OCRSecData> GetChamberData(string stono)
    {
        var chamberDataList = new List<OCRSecData>();

        string sqlQuery = @"
         WITH CumulativeSum AS (
    SELECT
        sc_invoice.ExtractedID,
        sc_invoice.STONO,
        sc_invoice.VehicleNo,
        sc_invoice.FillingDate,
        sc_invoice.FileLocation,
        sc_invoice.RecievingLocation,
        sc_invoice.ShippingLocation,
        COALESCE(chamber.Chamber1Quantity, chamber.Chamber2Quantity, chamber.Chamber3Quantity, chamber.Chamber4Quantity, chamber.Chamber5Quantity) AS ChamberQuantity,
        COALESCE(chamber.Chamber1Dip, chamber.Chamber2Dip, chamber.Chamber3Dip, chamber.Chamber4Dip, chamber.Chamber5Dip) AS ChamberDip,
        CASE
            WHEN chamber.Chamber1Quantity IS NOT NULL AND chamber.Chamber1Dip IS NOT NULL THEN 1
            WHEN chamber.Chamber2Quantity IS NOT NULL AND chamber.Chamber2Dip IS NOT NULL THEN 2
            WHEN chamber.Chamber3Quantity IS NOT NULL AND chamber.Chamber3Dip IS NOT NULL THEN 3
            WHEN chamber.Chamber4Quantity IS NOT NULL AND chamber.Chamber4Dip IS NOT NULL THEN 4
            WHEN chamber.Chamber5Quantity IS NOT NULL AND chamber.Chamber5Dip IS NOT NULL THEN 5
        END AS ChamberNo,
        COALESCE(chamber.Chamber1Quantity, 0) + COALESCE(chamber.Chamber2Quantity, 0) +
        COALESCE(chamber.Chamber3Quantity, 0) + COALESCE(chamber.Chamber4Quantity, 0) +
        COALESCE(chamber.Chamber5Quantity, 0) AS ChamberQuantityTotal,
        SUM(COALESCE(chamber.Chamber1Quantity, 0) + COALESCE(chamber.Chamber2Quantity, 0) +
            COALESCE(chamber.Chamber3Quantity, 0) + COALESCE(chamber.Chamber4Quantity, 0) +
            COALESCE(chamber.Chamber5Quantity, 0)) OVER (PARTITION BY sc_invoice.ExtractedID ORDER BY sc_invoice.FillingDate) AS CumulativeChamberQuantity,
        -- Calculate the total quantity from the tblvehicles for the corresponding VehicleNo
        (COALESCE(v.Chamber1Qty, 0) + COALESCE(v.Chamber2Qty, 0) + COALESCE(v.Chamber3Qty, 0) +
         COALESCE(v.Chamber4Qty, 0) + COALESCE(v.Chamber5Qty, 0)) AS TotalVehicleChamberQuantity
    FROM tblextracted_data sc_invoice
    LEFT JOIN tblextracted_chambers chamber ON sc_invoice.ExtractedID = chamber.ExtractedID
    LEFT JOIN tblextracted_data pk_invoice ON pk_invoice.VehicleNo = sc_invoice.VehicleNo
        AND pk_invoice.InvoiceType = 'pk'
        AND pk_invoice.STONO = @STONO -- Replace with your provided primary STONO
    LEFT JOIN tblvehicles v ON v.VehicleID = pk_invoice.VehicleNo -- Join to get vehicle details
    WHERE sc_invoice.InvoiceType = 'sc'
      AND sc_invoice.FillingDate >= pk_invoice.FillingDate
      AND sc_invoice.FillingDate <= DATEADD(DAY, 5, pk_invoice.FillingDate) -- Include records within 5 days
      AND sc_invoice.VehicleNo = pk_invoice.VehicleNo
),
FilteredCumulative AS (
    SELECT *,
           SUM(ChamberQuantityTotal) OVER (ORDER BY FillingDate, ChamberNo) AS RunningTotal
    FROM CumulativeSum
)

SELECT ExtractedID, STONO, VehicleNo, FillingDate, ChamberQuantity, ChamberDip, ChamberNo, FileLocation, RecievingLocation,
       ShippingLocation, CumulativeChamberQuantity, TotalVehicleChamberQuantity
FROM FilteredCumulative
WHERE RunningTotal <= TotalVehicleChamberQuantity
ORDER BY FillingDate, ChamberNo;";

        using (SqlConnection connection = new SqlConnection(_configuration.GetConnectionString("Con")))
        {
            using (SqlCommand command = new SqlCommand(sqlQuery, connection))
            {
                command.Parameters.AddWithValue("@STONO", stono);

                connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var chamberData = new OCRSecData
                            {
                                ExtractedID = reader.GetInt32(0),
                                StoNo = reader.GetString(1),
                                VehicleNo = reader.GetString(2),
                                FillingDate = reader.GetDateTime(3),
                                FileLocation = reader.GetString(7),
                                RecievingLocation = reader.GetString(8),
                                ShippingLocation = reader.GetString(9),
                                ChamberQty = reader.GetInt32(4),
                                ChamberDip = reader.GetInt32(5),
                                ChamberNo = reader.GetInt32(6)
                            };


                        chamberDataList.Add(chamberData);
                    }
                }
            }
        }

        return chamberDataList;
    }
    //     SELECT DISTINCT i.STONo, i.TankLorryNo, i.ReceivingLocation, d.Chamber, d.ChamberQuantity, d.LorryDip, dv.BusinessID
    //     FROM tblInvoices i
    // LEFT JOIN tblInvoiceDetails d ON i.InvoiceID = d.InvoiceID AND d.PointType = 'R'
    // LEFT JOIN tblDriverVehicleMap dv ON dv.VehicleID = i.TankLorryNo
    // WHERE i.STONo = '1042886'
    // ORDER BY d.Chamber;

}