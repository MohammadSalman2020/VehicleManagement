@page "/map"
@using System.Text.Json
@using VehicleManagement.ApiService
@using VehicleManagement.Models.General
@inject IJSRuntime JSRuntime
@inject IApiService API

<button class="btn btn-warning btn-sm ms-auto" @onclick="LoadData">Load Fleet</button>
@* <span>Number of Markers: @count</span>
<span>Number of exceptions: @excount</span> *@


<div id="map" style="height:90vh;width:100%">

</div>

@code {


    int count = 0;
    int excount = 0;
    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            await JSRuntime.InvokeVoidAsync("loadGoogleMaps");
        }
    }
    List<string> vehicles = new List<string>();
    private async Task Getvhicles()
    {
        var rec = await API.GetRequest($"Fleet/GetAllVehicles");

        if (rec != null)
        {
            vehicles = JsonSerializer.Deserialize<List<string>>(rec);
        }
        else
        {
            Console.WriteLine("API request returned null.");
        }
    }
    List<TrackerData> data; 
    protected override async Task OnInitializedAsync()
    {
        // try
        // {
        //     data = new List<TrackerData>();
        //     await Getvhicles();
        //     foreach(var veh in vehicles)
        //     {
        //         TrackerData tpl = new TrackerData();
        //         var location = await API.GetRequest($"Fleet/GetVehiclelastLocation/{veh}?vehiceID={veh}");
        //         if (location != null)
        //         {
        //             tpl =  JsonSerializer.Deserialize<TrackerData>(location);
        //             data.Add(tpl);
        //         }

        //     }

        //     foreach(var tpl in data)
        //     {
        //       await  AddMarkerWithDelay(double.Parse(tpl.lat), double.Parse(tpl.@long), tpl.vehicleId, tpl.speed, "Siddique", tpl.locationname.ToString(), tpl.engineStatus, 100);

        //     }
        //     //   await AddMarkers();
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Error adding markers: {ex.Message}");
        // }
    }

    private async Task AddMarkerWithDelay(double lat, double lng, string vehicle, string speed, string driver, string location, string status, int delayMilliseconds)
    {
       // await Task.Delay(delayMilliseconds);
        await JSRuntime.InvokeVoidAsync("addMarker", lat, lng, vehicle, speed, driver, location, status);
    }

    private async Task LoadData()
    {
        try
        {
            data = new List<TrackerData>();
            await Getvhicles();
            foreach (var veh in vehicles)
            {
                TrackerData tpl = new TrackerData();
                var location = await API.GetRequest($"Fleet/GetVehiclelastLocation/{veh}?vehiceID={veh}");
                if (location != null)
                {
                    tpl = JsonSerializer.Deserialize<TrackerData>(location);
                    data.Add(tpl);
                }

            }

            foreach (var tpl in data)
            {
                try
                {
                    await AddMarkerWithDelay(double.Parse(tpl.lat), double.Parse(tpl.@long), tpl.vehicleId, tpl.speed, "Siddique", tpl.locationname.ToString(), tpl.engineStatus, 100);
                    count++;
                    StateHasChanged();
                    Console.WriteLine($"Marker added successfully: {tpl.vehicleId}");
                }
                catch (Exception ex)
                {
                    excount++;
                    Console.WriteLine($"Error adding marker: {tpl.vehicleId}");
                  
                }
            }
            //   await AddMarkers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding markers: {ex.Message}");
        }
    }
}
