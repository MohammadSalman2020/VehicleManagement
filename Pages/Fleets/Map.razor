@page "/map"
@using System.Text.Json
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General

@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JSRuntime
@inject IApiService API
@inject IUserClaimsService claims
<style>
    #map {
        width: 100%;
        height: 90vh;
        background: #e0e0e0; /* Just a placeholder, replace with your map */
    }

    .search-container {
        position: absolute;
        top: 10px;
        left: 280px;
        display: flex;
        justify-content: space-between;
        width: 250px;
        padding: 5px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 1000; /* Ensures the search container is above the map */
    }


        .search-container .form-group {
            margin-bottom: 0;
        }

        .search-container input {
            border: 1px solid #ccc;
            border-radius: 3px;
            padding: 5px;
            margin-right: 5px;
            flex: 1;
        }

        .search-container button {
            background: #ffc107; /* Warning color */
            color: white;
            border: none;
            border-radius: 3px;
            padding: 5px 5px;
            cursor: pointer;
        }

            .search-container button:hover {
                background: #e0a800; /* Darker shade of warning color */
            }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000; /* Ensures the spinner is above the map */
    }

</style>
<div>
    <div class="row">
        <div class="col-md-12">
            <!-- Floating search box and button -->
            <div class="search-container">
                <div class="form-group">
                    <input id="vehicleid" type="text" @bind="@vhiclenumber" placeholder="search vehicle" class="form-control" @onkeyup="SearchOnEnter" />
                </div>
                <div class="form-group">
                    <button class="btn btn-warning btn-sm" @onclick="@SearchData">Search</button>
                </div>
            </div>

            <!-- Map container -->
            <div id="map" style="height:90vh;width:100%">
            </div>

            <!-- Loading Spinner -->
            <div class="col-md-3 loading-spinner">
                @if (data.Count > 0)
                {
                    <!-- Map is loaded -->
                }
                else
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Loading...</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* <span>Number of Markers: @count</span>
<span>Number of exceptions: @excount</span> *@


<script>
    window.initializeAutoComplete = (inputId, source) => {
        $(`#${inputId}`).autocomplete({
            source: source,
            open: function () {
                $(this).data("uiAutocomplete").menu.element.css({
                    "max-height": "300px",
                    "overflow-y": "auto",
                    "overflow-x": "hidden"
                });
            }
        });
    };
</script>


@code {


    int count = 0;
    int excount = 0;
    int Lat = 0;
    int Long = 0;
    string vhiclenumber = "";
    string[] deviceTokens = new string[1];
    private string token;

    //this is source
    List<string> vehiclelist = new List<string>();
    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {

            await JSRuntime.InvokeVoidAsync("loadGoogleMaps");
            await JSRuntime.InvokeVoidAsync("initializeAutoComplete", "vehicleid", vehicles);


        }
        else
        {
            await JSRuntime.InvokeVoidAsync("initializeAutoComplete", "vehicleid", vehicles);
        }

    }

    public class MarkerData
    {
        public string name { get; set; }
        public string LAT { get; set; }
        public double Long { get; set; }
    }
    List<BusinessVehicles> vehicle1 = new List<BusinessVehicles>();
    List<string> vehicles = new List<string>();
    private async Task Getvhicles()
    {
        List<int> ids = await claims.GetBusinessIdsAsync();

        var rec = await API.GetRequest($"Fleet/GetAllVehicles");

        if (rec != null)
        {
            var list = JsonSerializer.Deserialize<List<BusinessVehicles>>(rec);

            vehicles = list.Where(a => ids.Contains(a.busid)).Select(a => a.vehicleid).Distinct().ToList();


            // foreach( var x in ids)
            // {
            //     var list = vehicle1.Where(a => a.busid == x).ToList();
            //     foreach(var y in list)
            //     {
            //         vehicles.Add(y.vehicleid);
            //     }
            // }

        }
        else
        {
            Console.WriteLine("API request returned null.");
        }
    }
    List<TrackerData> data = new List<TrackerData>();
    List<MarkerData> points = new List<MarkerData>();
    protected override async Task OnInitializedAsync()
    {
        ///   poligons = new List<LatLng>();
        // poligons.Add(new LatLng (4.817815,67.313360 ));
        await LoadData();
        //  await Addmarkers();
        await AddPointsAsync();
        // var veh = await API.GetRequest($"Inspection/GetVehicles");
        // if (veh != "")
        // {
        //     var vehicle = JsonSerializer.Deserialize<List<vehicleinfo>>(veh);
        //     foreach (var vehi in vehicle)
        //     {
        //         vehiclelist.Add(vehi);
        //     }
        // }
        // try
        // {
        //     data = new List<TrackerData>();
        //     await Getvhicles();
        //     foreach(var veh in vehicles)
        //     {
        //         TrackerData tpl = new TrackerData();
        //         var location = await API.GetRequest($"Fleet/GetVehiclelastLocation/{veh}?vehiceID={veh}");
        //         if (location != null)
        //         {
        //             tpl =  JsonSerializer.Deserialize<TrackerData>(location);
        //             data.Add(tpl);
        //         }

        //     }

        //     foreach(var tpl in data)
        //     {
        //       await  AddMarkerWithDelay(double.Parse(tpl.lat), double.Parse(tpl.@long), tpl.vehicleId, tpl.speed, "Siddique", tpl.locationname.ToString(), tpl.engineStatus, 100);

        //     }
        //     //   await AddMarkers();
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Error adding markers: {ex.Message}");
        // }
    }
    private async Task Addmarkers()
    {

        string webRootPath = WebHostEnvironment.WebRootPath;
        string filePath = Path.Combine(webRootPath, "htlpoints.json");
        if (File.Exists(filePath))
        {
            try
            {


                string jsonContent = File.ReadAllText(filePath);
                points = JsonSerializer.Deserialize<List<MarkerData>>(jsonContent);
            }
            catch (Exception ex)
            {

                string s = ex.Message;
            }

        }

        foreach (var x in points)
        {
            await AddPint(double.Parse(x.Long.ToString()), double.Parse(x.LAT.ToString()), x.name);
            //   List<(double Latitude, double Longitude)> dataset = GeoLocation.GenerateDataset(double.Parse(x.LAT.ToString()), double.Parse(x.Long.ToString()));
            //   await AddPolyGon(dataset);
            StateHasChanged();
        }

    }

    public async Task AddPointsAsync()
    {
        try
        {
            string webRootPath = WebHostEnvironment.WebRootPath;
            string filePath = Path.Combine(webRootPath, "htlpoints.json");

            if (File.Exists(filePath))
            {
                string jsonContent = File.ReadAllText(filePath);
                var points = JsonSerializer.Deserialize<List<MarkerData>>(jsonContent);

                // Convert MarkerData instances into JavaScript objects
                var jsPoints = points.Select(p => new
                {
                    lat = double.Parse(p.Long.ToString()),
                    lng = double.Parse(p.LAT.ToString()),
                    description = p.name
                }).ToList();

                // Call JavaScript function to add points on the map
                await JSRuntime.InvokeVoidAsync("addpoint", jsPoints);
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine(ex.Message);
        }
    }


    private async Task AddMarkerWithDelay(double lat, double lng, string vehicle, string speed, string driver, string location, string status, int Vehicledirectionangle, int delayMilliseconds)
    {
        // await Task.Delay(delayMilliseconds);
        await JSRuntime.InvokeVoidAsync("addMarker", lat, lng, vehicle, speed, driver, location, status, Vehicledirectionangle);
    }
    private async Task AddPint(double lat, double lng, string description)
    {
        // await Task.Delay(delayMilliseconds);
        await JSRuntime.InvokeVoidAsync("addpoint", lat, lng, description);
    }
    private async Task AddPolyGon(List<(double Latitude, double Longitude)> dataset)
    {
        // await Task.Delay(delayMilliseconds);
        await JSRuntime.InvokeVoidAsync("addPolygon", dataset);
    }
    void SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Call your search function here
            SearchData();
        }
    }

    private async Task SearchData()
    {
        if (vhiclenumber.Trim() != "")
        {
            var rec = data.Where(a => a.vehicleId.Contains(vhiclenumber)).FirstOrDefault();
            if (rec != null)
            {
                // await Task.Delay(delayMilliseconds);
                await JSRuntime.InvokeVoidAsync("searchMarkerWithLatLong", rec.lat, rec.@long);
            }




            // await NotificationService.SendNotificationAsync("Title", "Body", deviceTokens);
        }

    }

    private async Task LoadData()
    {
        try
        {
            data = new List<TrackerData>();
            await Getvhicles();
            JsonSerializerOptions options = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData = JsonSerializer.Serialize(vehicles, options);
            var location = await API.PostRequest($"Fleet/GetVehiclesGpsData", jsonData);
            if (location != null)
            {
                data = JsonSerializer.Deserialize<List<TrackerData>>(location);

            }
            var markerDataList = new List<object>(); // Create a list to hold marker data
            foreach (var tpl in data.Where(a => a.lat != "0.0").ToList())
            {
                try
                {
                    if (tpl.vehicledirectionangle == null)
                    {
                        tpl.vehicledirectionangle = "0";
                    }

                    // Add marker data to the list
                    markerDataList.Add(new
                    {
                        lat = double.Parse(tpl.lat),
                        lng = double.Parse(tpl.@long),
                        vehicle = tpl.vehicleId,
                        speed = tpl.speed,
                        driver = tpl.fueldata,
                        location = tpl.locationname.ToString(),
                        status = tpl.engineStatus + "(" + tpl.timestamp + ")",
                        directionAngle = int.Parse(tpl.vehicledirectionangle)
                    });

                    Console.WriteLine($"Marker data added successfully: {tpl.vehicleId}");
                }
                catch (Exception ex)
                {
                    excount++;
                    Console.WriteLine($"Error adding marker data: {tpl.vehicleId}");
                }
            }

            // Convert the list to JSON
            string jsonMarkerData = JsonSerializer.Serialize(markerDataList);

            // Call the JavaScript function to add markers
            await JSRuntime.InvokeVoidAsync("addMarker", jsonMarkerData);
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
    public class BusinessVehicles
    {
        public string vehicleid { get; set; }
        public int busid { get; set; }
    }

}
