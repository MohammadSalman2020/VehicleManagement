@page "/fleetstatus"
@using System.Text.Json
@using System.Collections.Generic
@using System.IO
@using Microsoft.AspNetCore.Components
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@using System.Text
@using System.Text.RegularExpressions
@using VehicleManagement.ApiService
@using VehicleManagement.Authentication
@using VehicleManagement.Models.General
@inject NavigationManager NavigationManager
@using VehicleManagement.Models.DB
@using VehicleManagement.Models.General.Fleet
@inject IApiService API
@inject IUserClaimsService UserClaimsService
@inject IToastService toastService
<style>
    .contact-info {
        cursor: pointer;
        text-align: center;
    }

    .modal {
        display: @modalDisplay;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        /* background-color: rgba(0, 0, 0, 0.5); */
        max-width: 250px; /* Set the maximum width of the modal based on your preference */
        max-height: 260px; /* Set the maximum width of the modal based on your preference */
        padding: 20px;
        border-radius: 5px;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
    }

    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
    }

</style>
<div style="margin-top:10px;padding:0px;">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between">
                    <span>Fleet Status Report</span>

                    <AuthorizeView Policy="SuperVisorAdmin">
                        <Authorized Context="AdminAccess">
                            @if (IsEdit)
                            {
                                <button class="btn btn-primary" @onclick="AddPositions">Save</button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="ActiveEdit">Edit</button>
                            }
                        </Authorized>
                    </AuthorizeView>
                   

                    <button class="btn btn-primary" @onclick="ExportToCSV">Export To CSV</button>
                </div>

                <div class="card-body">
                    <div class="table-responsive">
                        <div style="overflow-x: scroll; max-width: 100%;">
                            <div class="modal" style="display: @modalDisplay;">
                                <div class="modal-content">
                                    <span class="close" @onclick="CloseModal">&times;</span>
                                    <div>

                                        <button class="btn btn-link" @onclick="MakeCall">Call</button>
                                        <button class="btn btn-link" @onclick="whatsapp">Whatsapp</button>
                                        <button class="btn btn-link" @onclick="SendSMS">Send SMS</button>
                                    </div>
                                </div>
                            </div>
                            @if (!IsLoading)
                            {
                                @if (fleet.Count > 0)
                                {
                                    sr = 0;

                                    <!-- Your table code -->
                                    <table class="table-bordered">
                                        <!-- Added 'table-bordered' class -->
                                        <thead style="background-color:#5e72e4;color:white">
                                            <tr style="text-align:center">
                                                <th>Sr#</th>
                                                <th style="padding:5px">Vehicle_#</th>
                                                <th>Qty</th>
                                                <th>Driver_1</th>
                                                <th>Driver_2</th>
                                                <th>Report/FillingData</th>
                                                <th>Product</th>
                                                <th>FillingPoint</th>
                                                <th>Heading</th>
                                                <th>Destination</th>
                                                <th>CurrentLocation</th>
                                                <th>Remarks</th>
                                            </tr>
                                        </thead>
                                        <tbody>


                                            @foreach (var item in fleet)
                                            {
                                                <tr>
                                                    <td style="text-align:center">
                                                        <p>@(sr = (sr + 1))</p>
                                                    </td>
                                                    <td style="text-align:center">
                                                        <p>@item.vehicleID</p>
                                                    </td>
                                                    <td style="text-align:center">
                                                        <p>@item.qty</p>
                                                    </td>
                                                    <td class="contact-info">
                                                        <p @onclick="() => HandleButtonClick(Trim(item.driver1))">@item.driver1</p>
                                                    </td>
                                                    <td class="contact-info">
                                                        <p @onclick="() => HandleButtonClick(Trim(item.driver2))">@item.driver2</p>
                                                    </td>
                                                    <td style="text-align:center">
                                                        <span>@item.reportingFillingdate</span>
                                                    </td>
                                                    <td style="text-align:center">
                                                        <span>@item.product</span>
                                                    </td>
                                                    <td style="text-align:center">
                                                        <span>@item.fillingPoint</span>
                                                    </td>
                                                    <td style="text-align:center">
                                                        <span>
                                                            @if (IsEdit)
                                                            {
                                                                <input class="form-control" type="text" value="@item.heading" @onchange="@((e)=>SearchTable(e,item.vehicleID,1))" />

                                                            }
                                                            else
                                                            {
                                                                <span>@item.heading</span>
                                                            }

                                                        </span>
                                                    </td>
                                                    <td style="text-align:center">
                                                        <span>@item.destination</span>
                                                    </td>
                                                    <td>
                                                        <span>@item.current_location</span>
                                                    </td>
                                                    <td>
                                                        <span>
                                                            @if (IsEdit)
                                                            {
                                                                <input class="form-control" type="text" value="@item.remarks" @onchange="@((e)=>SearchTable(e,item.vehicleID,2))" />
                                                            }
                                                            else
                                                            {
                                                                <span>@item.remarks</span>
                                                            }
                                                        </span>
                                                    </td>
                                                </tr>
                                            }



                                        </tbody>
                                    </table>

                                }
                                else
                                {
                                    <p>No Data Found...</p>
                                }

                            }
                            else if (IsLoading)
                            {
                                <div class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p>@LoadingText</p>

                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    window.downloadFile = function (filePath) {
        var link = document.createElement('a');
        link.href = filePath;
        link.download = filePath.substr(filePath.lastIndexOf('/') + 1);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>

@code {

    string modalDisplay = "none";
    string phoneNumber;
    public string? LoadingText;
    public List<int> BusinessID = new List<int>();
    int sr = 0;
    public bool IsLoading { get; set; }
    public bool IsEdit { get; set; }
    List<FleetStatusreport> fleet = new List<FleetStatusreport>();
    List<AddPositions> PosList = new List<AddPositions>();
    private async Task ActiveEdit()
    {
        IsEdit = true;
    }
    void HandleButtonClick(string s)
    {
        var match = Regex.Match(s, @"\(([^)]*)\)");
        if (match.Success)
        {
            // Get the phone number from the regex match
            phoneNumber = match.Groups[1].Value.Trim();
            phoneNumber = phoneNumber.Replace(" ", "").Replace("-", "");
            phoneNumber = "+92" + phoneNumber.Substring(1);
            modalDisplay = "block";
        }
    }
    private async Task SearchTable(ChangeEventArgs e, string VehicleID, int From)
    {
        if (e.Value != "")
        {
            var rec = PosList.Where(p => p.VehicleID == VehicleID).FirstOrDefault();
            if (rec == null)
            {
                if (From == 1) // Position
                {
                    PosList.Add(new AddPositions
                        {
                            VehicleID = VehicleID,
                            Position = e.Value.ToString()
                        });
                }
                else if (From == 2) //Remarks
                {
                    PosList.Add(new AddPositions
                        {
                            VehicleID = VehicleID,
                            Remarks = e.Value.ToString()
                        });
                }
            }
            else
            {
                if (From == 1) // Position
                {
                    rec.Position = e.Value.ToString();
                }
                else if (From == 2) //Remarks
                {
                    rec.Remarks = e.Value.ToString();
                }
            }



        }


    }

    private string Trim(string input)
    {

        int indexOfOpeningParenthesis = input.IndexOf('(');

        if (indexOfOpeningParenthesis != -1) // Check if '(' exists in the string
        {
            string result = input.Substring(0, indexOfOpeningParenthesis);
            return result; // Output: JQ-1858
        }
        else
        {
            // Handle the case when '(' is not found in the string
            return input;
        }

    }
    // Method to close the modal
    void CloseModal()
    {
        modalDisplay = "none";
    }
    void SendSMS()
    {
        // Open the default SMS application with the recipient's number pre-filled
        string smsUri = $"sms:{phoneNumber}";
        JSRuntime.InvokeVoidAsync("open", smsUri);
    }

    void MakeCall()
    {
        // Initiate a phone call
        string telUri = $"tel:{phoneNumber}";
        JSRuntime.InvokeVoidAsync("open", telUri);
    }
    void whatsapp()
    {
        // Replace spaces and dashes from the phone number, if any
        string formattedPhoneNumber = phoneNumber.Replace(" ", "").Replace("-", "");

        // Construct the WhatsApp message with the phone number and any additional content
        string whatsappMessage = $"https://wa.me/{formattedPhoneNumber}?text=Hello";

        // Open WhatsApp with the pre-filled message
        JSRuntime.InvokeVoidAsync("open", whatsappMessage);
    }
    private async Task ExportToCSV()
    {
        if (fleet != null && fleet.Count > 0)
        {
            StringBuilder sb = new StringBuilder();

            // Header
            sb.AppendLine("Sr#,Vehicle ID,Qty,Driver 1,Driver 2,Reporting/Filling Date,Product,Filling Point,Heading,Destination,Current Location,Remarks");

            // Data
            int count = 1;
            foreach (var report in fleet)
            {
                sb.AppendLine($"\"{count}\",\"{report.vehicleID}\",\"{report.qty}\",\"{report.driver1}\",\"{report.driver2}\",\"{report.reportingFillingdate}\",\"{report.product}\",\"{report.fillingPoint}\",\"{report.heading}\",\"{report.destination}\",\"{report.current_location}\",\"{report.remarks}\"");
                count++;
            }

            // Get the wwwroot path
            var wwwRootPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");

            // Define the file path
            var filePath = Path.Combine(wwwRootPath, "Reports", "fleet_status_report.csv");

            // Save CSV file
            await File.WriteAllTextAsync(filePath, sb.ToString());

            // Get the relative URL
            var relativeUrl = Path.Combine("Reports", "fleet_status_report.csv");

            // Navigate to the CSV file
            await JSRuntime.InvokeVoidAsync("downloadFile", relativeUrl);
            //  File.Delete(filePath);
        }

    }

    public async Task LoadFleetStatusreport()
    {
        try
        {
            JsonSerializerOptions options = new JsonSerializerOptions
                {
                    WriteIndented = true,
                    ReferenceHandler = null
                };
            string jsonData = JsonSerializer.Serialize(BusinessID, options);
            var Main = await API.PostRequest($"Fleet/FleetStatusReport", jsonData);
            if (Main != "")
            {
                var rec = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FleetStatusreport>>(Main);
                fleet = rec.Where(p => BusinessID.Contains(p.busID)).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }




    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        LoadingText = "Loading Fleets....";
        BusinessID = await UserClaimsService.GetBusinessIdsAsync();
        await LoadFleetStatusreport();
        IsLoading = false;

    }
    private async Task AddPositions()
    {
        try
        {

            if (PosList.Count > 0)
            {
                IsLoading = true;
                LoadingText = "Saving Positions and Remarks...";
                JsonSerializerOptions options = new JsonSerializerOptions
                    {
                        WriteIndented = true,
                        ReferenceHandler = null
                    };
                string jsonData = JsonSerializer.Serialize(PosList, options);
                var AddDriver = await API.PostRequest($"Fleet/AddPos", jsonData);
                int Result = JsonSerializer.Deserialize<int>(AddDriver);
                if (Result == 200)
                {
                    toastService.ShowSuccess($"Positions and Remarks Updated");
                    IsEdit = false;
                    LoadingText = "Loading Fleets...";
                    StateHasChanged(); // Trigger re-render to reflect updated text

                    await LoadFleetStatusreport();

                }
                else
                {

                    IsEdit = false;
                    toastService.ShowError("Error");
                }

            }
            else
            {
                toastService.ShowError("Nothing to Save");
                IsEdit = false;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error {ex}");
        }

        IsLoading = false;
    }

}
